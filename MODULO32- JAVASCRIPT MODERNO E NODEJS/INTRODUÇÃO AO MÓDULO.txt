










-_> NESSE MÓDULO, VEREMOS 'CÓDIGO NODE MODERNO'...














----> MAS NÃO É TÃO 'MODERNO' ASSIM....











--> tudo que aprendemos no curso até agora é 100% correto, 100% up-to-date,



E USADO 



NA GRANDE MAIORIA DE PROJETOS...











-------> AINDA ASSIM, É IMPORTANTE ENTENDER QUE 





AO LONGO DOS ANOS,

O NODEJS 

E O JAVASCRIPT 

EM SI
 

 EVOLUIU.... --> 
 O
  JAVASCIRPT 

  AGORA NÃO É 



  O MESMO 


  DE 10 ANOS ATRÁS,


  MAS 



  10 ANOS ATRÁS 

  FOI O ANO EM QUE 

  O 


  NODEJS 


  FOI CRIADO... --> O NODEJS FOI CRIADO 


  EM 

  UM 


  MOMENTO EM QUE 

  NÃO TÍNHAMOS, NO JAVASCRIPT,

  TANTAS 

  FEATURES COMO TEMOS AGORA....














  --> ISSO SIGNIFICA, EM OUTRAS PALAVRAS,

  QUE 
  O 


  NODEJS (main nodejs code QUE VOCÊ ESCREVE )  __ ESTÁ COM ALGUMAS FEATURES 



  __FALTANDO__...









  --> ou seja,

  o código que nós escrevemos NÃO TEM ESSAS LATEST FEATURES ___ OUT OF THE BOX...










  ---> MAS ISSO __ NÃO QUER DIZER QUE __ O NODEJS _ NÃO SUPORTA ESSAS FEATURES NEM UM POUCO....  ---> O NODEJS 


  SUPORTA 

  FEATURES DE SINTAXE DO JVASCRIPT 



  MODERNo... --> NESSE MÓDULO,

  VEREMOS 




  2 FEATURES QUE CHEGARAM AO NODEJS, QUE VOCÊ PODE USAR AGORA,



  QUE 

  TALVEZ


  SEJAM 



  INTERESSANTES PARA VOCÊ....





  SÃO ELAS:



  1) ES MODULES (aquela sintaxe de 'import {} from 'xxx' '),




  É SIMPLESMENTE UMA MANEIRA DIFERENTE DE IMPORTAR ARQUIVOS, como vermeos daqui a pouco..











  2) PROMISES EM 'CORE APIs'... -----> PROMISES --> ISSO 


  PODE SER 

  SURPREENDENTE, pq nós trabalhamos 


  com elas muitas vezes ao lonog do curso,




  COM ASYNC/AWAIT... -----------> MAS O PROFESSOR, AQUI, ESTÁ FALANDO 
  DE 


  'PROMISE SUPPORT'


  EM 



  ____'CORE APIs'.... ------> POR CORE APIS,




  queremos 

  DIZER 




  APIs COMO O __ FILE SYSTEM API QUE VEM COM O NODE,




ETC ETC.... -->  TODAS ESSAS 


aPIS SÃO,



tradicionalmente,



'CALLBACK-BASED' (aquela sintaxe horrível de 'função(argumento, () => {})' ),










E POR SEREM CALLBACK BASED,


ELES 


SOFREM/PODEM SOFRER 

DE 

ALGUNS PROBLEMAS (callback hell),






PROBLEMAS QUE PODEM SER FACILMENTE RESOLVIDOS COM 



THEN-CATCH E 



async/await...








---------> EA Í, VOCÊ 



PODE 



QUERER USAR PROMISES 

NESSES 

'CORE APIs' 



DO 


NODE.... (


    core apis como 





        O FILESYSTEM, NO CASO...
)







------> VOCê PODE __ E DEVE__, na verdade.... 




--_> o professor nos mostrará como utilizar promises/async-await COM 




ESSAS CORE APIs do  node...