










--> VIMOS UM MONTE DE CONTEÚDO SOBRE GRAPHQL.







--> há como preencher um curso inteiro sobre o graphql..









--> DOCS OFICIAIS DO GRAPHQL... --> LÁ VOCê PODE APRENDER SOBRE 


AS FEATURES MAIS 


AVANÇADAS 

DO GRAPHQL..








-> TIVEMOS UM 'OVERVIEW'



DOS CORE CONCEPTS DO GRAPHQL,




e também


NOÇÕES BÁSICAS DE COMO CONSTRUIR 




UM BACKEND GRAPHQL,

com a ajuda do nodeexpress.









--> APRENDEMOS: 



1) O GRAPHQL É UM 'STATELESS- CLIENT-INDEPENDENT API' (como o REST API)...




2) GRAPHQL POSSSUI MAIOR FLEXIBILIDADE EM RELAÇÃO 



A  'REST APIS',



TUDO DEVIDO A UMA 'CUSTOM QUERY LANGUAGE'

QUE É 

__ EXPOSTA__ AOS NOSSOS CLIENT...







3) QUERIES (GET),
 

 MUTATION (pOST, PUT, PATCH, DELETE) e subscriptions (WEBSOCKETS)

 PODEM 

 SER USADOS 
 PARA 

 'EXCHANGE AND MANAGE DATA'..
 .








 4) TODOS OS REQUESTS GRAPHQL __ SÃO __ DIRECIONADOS __a 1 ÚNICO ENDPOINT (POST/ GRAPHQL).... ----> 



 a única exceção é quando vocÊ precisa FAZER MANAGE DE FILE UPLOADS...






 5) O SERVER PARSEIA 'THE INCOMING QUERY EXPRESSION' (PARSING TIPICAMENTE FEITO POR THIRD-PARTY PCAKGES), E 

 AÍ 


 'CHAMA OS RESOLVERS APROPRIADOS'....










 6) --> O GRAPHL NÃO É 

 LIMITADO A APLICATIVOS 

'REACTJS') --> ' ISSO SIGNIFICA QUE 

PODEMOS O UTILIZAR 


EM QUALQUER OUTRO FRAMEWORK,

MOBILE APP,

etc etc....








--------------------------------










--> MAS QUANDO COMPARAMOS o backend graphql


COM O BACKEND REST API,




constatamos 

QUE 




A SOLUÇÃO 'GRAPHQL'

naõ é 1005 melhor....









--> REST APIs são ÓTIMAS PARA 'STATIC DATA REQUIREMENTS' (

    ex: file UPLOAD,

    CENÁRIOS EM QUE VOCê 

    PRECISA DA MESMA __ DATA___ TODO O TEMPO...
)






--> GRAPHQL 


TE DÁ, POR OUTRO LADO,


MAIOR 

FLEXIBILDIADE POR MEIO Do' EXPOSE A FULL QUERY LANGUAGE TO THE CLIENT'...






----> REST API ----> BOM PARA CASOS EM QUE VOCê NÃO PRECISA DESSA FLEXIBILIDADE EXTRA,


CASOS EM QUE 

DEFINIR CLARAMENTE AS POSSIBILIDADES DO SEU 

APp 

É 

preferível (ex: file upload).... ---> casos em que SEMPRE VAMOS QUERER RECEBER A MESMA DATA, SEM MAIOR FLEXIBILIDADE...











--> EM OUTOS CENÁRIOS, O GRAPHQL 

PODE SER MELHOR, PQ 
TEMOS 

UMA MAIOR FLEXBILIDADE (

DEVIDO A ESSA 'EXPOSED FULL QUERY LANGUAGE' que pode ser usada 

por seu client...

)





--> REST E GRAPHQL API 




___ PODEM SER IMPLEMENTADAS __ COM QUALQUER __ 


FRAMEWORK,
QUALQUER 

SERVERSIDE LANGUAGE....  ------> VOCÊ NÃO ESTÁ LIMITADO AO NODEJS... -> E NO 



'NODEJS',


É IMPORTANTE 


SABER QUE ___ VOCê NÃO ESTÁ __ ACORRENTADO AO 'EXPRESS'' --> UM MONTE DA LÓGICA QUE APRENDMEOS 



AO LONGO DO CURSO E LÓGICA QUE APLICAMOS 

_ SERÁ A MESMA, 



NÃO IMPORTANDO QUAL FRAMEWORK VOCÊ USA, OU QUAL SERVERSIDE LANGUAGE VOCÊ USA....