







--> NÓS ADICIONAMOS UMA AUTHENTICATION FLOW BÁSICA NA ÚLTIMA LIÇÃO,



MAS __ NO MOMENTO AINDA __ TEMOS UMA 

SECURITY __ FLAW____ GIGANTTE__ 



NO NOSSO 



APPROACH 



ATUAL...












-_> QUE FLAW DE SEGURANÇA É ESSA?










ELA ESTÁ NESTA LINHA:







const user = new User(
    {
        email: email,
        password: password , //////ESTA LINHA AQUI...
        cart: { products: []}
    }
)










-----> NÓS ESTAMOS BASICAMENTE 


ARMAZENANDO NOSSO 

'PASSWORD'


como 


PLAIN TEXT.... ------->E ISSO PODE 

SER 

VISTO 




LÁ NO COMPASS,



no código 



DO NOSSO USER....:








{
    "_id": {
        "$oid": "6181a702e29036669d4d1d89"
    },
    "email": "CACA@CACA.COM",
    "password": "CACA",
    "cart": {
        "products": []
    },
    "__v": 0
}












---------> ISSO AÍ __, ESSE PASSWORD,



ESTÁ 
BASICAMENTE 


'PURO'

ALI DENTRO.... -----> ESTÁ ARMAZENADO COMO __ PLAIN TEXT__- ---> E VOCê _NUNCA __ DEVE 

ARMAZENAR _ SEUS 

PASSWORDS 

ASSIM... -------> ISSO PQ 



SE 



ALGUM DIA __ SUA 


DATABASE 

FOR 


COMPROMISED,




algo que é claro que QUEREMOS EVITAR,





MAS 



__ SE ISSO ACONTCER,




OU TVZ 

PQ 
ALGUM 


EMPLOYYEE
 



 DE SUA 

 COMPANHIA 






 __POR ALGUMA RAZÃO TIVER 

 ACESSO 

  A ESSA DATA,


OS 



PASSWORDS 

DE 

SEUS 

USERS 

FICARÃ o





__COMPLETAMENTE_ EXPOSTOS.... ---> É POR ISSO QUE 

TEMOS 
QUE 



_HASHEAR___ ESSES 
PASSWORDS,



temos 


QUE 
HASHEAR 

DE UMA 



MANEIRA QUE __ NÃO É REVERSÍVEL,

PARA 



QUE __ PESSOAS __NÃO CONSIGAM 'CONSTRUCT THE PASSWORD',







TUDO PARA __ QUE MESMO QUANDO ALGUÉM CONSIGA 
ACESSO/INVADIR 

O 

DATABASE,


ELE 



__TALVEZ CONSIGA _ VER O EMAIL,


MAS 


___NÃO VAI CONSEGUIR VER O 'PASSWORD',

o 


PASSWORD 

DE VERDADE QUE PERTENCE A ESSE EMAIL... -------> 



ISSO 

É 

ALGO QUE DEVE SER IMPLEMENTADO,


E 

IMPLEMENTAREMOS AGORA...












--------> PARA ISSO,


__NÓS VAMOS _ INSTALAR_ OUTRA PACKAGE,












A PACKAGE DE 


BCRYPT,

provavelmente...











-----> npm install --save bcryptjs











BCRYPTJS....









--> É UMA PACKAGE QUE NOS AJUDA COM ENCRYPTION,




E 

NOS AJUDA 

COM O ENCRYPT 

DO 

PASSWORD....












------> QUANDO ISSO TERMINAR,





REINICIAMOS NOSSO SEERVER.....












--> ISSO FEITO,

LÁ NOS NOSSOS CONTROLLERS, AGORA,


PODEMOS __ USAR__ O 

'bcrypt'... 










--> VAMOS IMPORTÁ-LO COM A SINTAXE 

DE 

IMPORTS 

DO NODE...








ex:


const bcrypt = require('bcrypt');












-----------------> COLOCAMOS ISSO LÁ NO CONTROLLER DE 'auth.js'...











--> COM ISSO INSTALADO,

VAMOS 

ATÉ 

'postSignup'


e aí 





VAMOS QUERER __ EXECUTAR__ O 


Bcrypt__ ,
 
 um de seus methods,


 PARA __eNTÃO ARMAZENARMOS 


 UMA 


 VERSÃO 

 'HASHED' 

 DE NOSSO PASSWORD...








 --> PARA ISSO,


 ESCREVEMOS ASSIM:








              const user = new User({
                email: email,
                password: bcrypt.hash(password);
                cart: {
                  products: []
                }
              })
            return user.save(); //salva/cria nosso user QUE AINDA NÃO EXISTIA (pq passamos aquele check de 'if(user)' ) LÁ NA DATABASE, NA COLLECTION DE 'users'...










----------------------------



MAS O PROFESSOR ESCREVE 


1 POUCO DIFERENTE...






ex:






            const hashedPassword = bcrypt.hash(password);

              const user = new User({
                email: email,
                password: hashedPassword
                cart: {
                  products: []
                }
              })
            return user.save(); //salva/cria nosso user QUE AINDA NÃO EXISTIA (pq passamos aquele check de 'if(user)' ) LÁ NA DATABASE, NA COLLECTION DE 'users'...



---------------------------------




OK... 




O METHOD 

'hash'


EXIGE COMO PRIMEIRO PARÂMETRO 

A STIRNG 


DO NEGÓCIO QUE VOCÊ QUER HASHEAR... 








--> JÁ O SEGUNDO PARÂMETRO É O 

VALOR DO 


'SALT VALUE',



QUANTAS VEZES VOCê VAI QUERER SALTEAR... --> 12 é um bom número.






EX:







            const hashedPassword = bcrypt.hash(password, 12);

              const user = new User({
                email: email,
                password: hashedPassword
                cart: {
                  products: []
                }
              })
            return user.save(); //salva/cria nosso user QUE AINDA NÃO EXISTIA (pq passamos aquele check de 'if(user)' ) LÁ NA DATABASE, NA COLLECTION DE 'users'...








----------------------------------







12 ---> HIGHLY SECURE...








--> ISSO VAI GERAR 1 'HASHED PASSWORD',




MAS O _PROBLEMA __ É QUE 



'bcrypt.hash()'


É 


__UMA __ ASYNC TASK__,



POR ISSO 


VAMOS TER QUE 


FAZER UM THEN BLOCK HELL AQUI,









ESCREVER ALGO TIPO ASSIM:








exports.postSignup = (req, res, next) => {



 const { email, password, confirmPassword } = req.body;


 console.log(email);


    if ( password !== confirmPassword ) {

        console.log("Passwords do not match.")
      return res.status(400).json(
        {message: "Passwords don't match!"}
      );


    }




    User.findOne({email: email}) /////TALVEZ ESTE CÓDIGO... (usei 'findOne' em vez de '.find()', pq FIND() NÃO FUNCIONOU/deu um erro....)
    .then(
        (user) => {


            if(user) { ///se for descoberto que JÁ EXISTE 1 USER COM ESSE EMAIL LÁ NA NOSSA DATABASE, vamos querer RETORNAR UMA RESPONSE DIZENDO 'An user with that email already exists, please use a different email address.';

                    return res.status(400).json(
                        {message: 'An user with that email already exists, please use a different email address.',
                }
                    )
                

            } else {




              return bcrypt.hash(password, 12) ///NOS RETORNA UMA PROMISE... por isso o 'return'...
                .then(
                    (hashedPassword) => {





                                           const user = new User({
                email: email,
                password: hashedPassword,
                cart: {
                  products: []
                }
              })
            return user.save(); //salva/cria nosso user QUE AINDA NÃO EXISTIA (pq passamos aquele check de 'if(user)' ) LÁ NA DATABASE, NA COLLECTION DE 'users'...



                    }
                )

   


            }
        }       
    )
    .then(
      (result) => {

        res.redirect('/login');
      }
    )



}









EX:









exports.postSignup = (req, res, next) => {
  const { email, password, confirmPassword } = req.body;

  console.log(email);

  if (password !== confirmPassword) {
    console.log('Passwords do not match.');
    return res.status(400).json({ message: "Passwords don't match!" });
  }

  User.findOne({ email: email }) /////TALVEZ ESTE CÓDIGO... (usei 'findOne' em vez de '.find()', pq FIND() NÃO FUNCIONOU/deu um erro....)
    .then((user) => {
      if (user) {
        ///se for descoberto que JÁ EXISTE 1 USER COM ESSE EMAIL LÁ NA NOSSA DATABASE, vamos querer RETORNAR UMA RESPONSE DIZENDO 'An user with that email already exists, please use a different email address.';

        return res
          .status(400)
          .json({
            message:
              'An user with that email already exists, please use a different email address.',
          });
      } else {
       return bcrypt.hash(password, 12) ///ESSE 'HASHING' é uma TAREFA ASSÍNCRONA, e é por isso que VAMOS USAR UM THEN BLOCK, para chainar o resto de nosso código a essa tarefa... --> e é por isso que vamos escrever aquele 'return', para CONTINUAR COM A EXECUÇÃO DOS THEN BLOCKS RESTANTES...
        
        .then((hashedPassword) => {
          const user = new User({
            email: email,
            password: hashedPassword,
            cart: {
              products: [],
            },
          });
          return user.save(); //salva/cria nosso user QUE AINDA NÃO EXISTIA (pq passamos aquele check de 'if(user)' ) LÁ NA DATABASE, NA COLLECTION DE 'users'...
        });
     
     
      }
    })
    .then((result) => {
      res.redirect('/login');
    });
};





---------------------------------------------



CERTO....





AGORA, PORTANTO, 

ESTAREMOS __ ARMAZENANDO O 'HASHED PASSWORD'


lá 



NA NOSSA DATABASE,



na collection de 'users',

naquela key de 'password: xxx'...












--> 1 EXEMPLO DESSE 


USER COM O HASHED PASSWORD É ESTE:







{
    "_id": {
        "$oid": "6182244c7b3433771ff12235"
    },
    "email": "TESTE@EXEMPLO.COM",
    "password": "$2a$12$vv8BtAENa.6EU8smci/HmeZJRMrPbMmr3IeONKr/5qCXKiKiQreku",
    "cart": {
        "products": []
    },
    "__v": 0
}








------------> OK........ 








--> AÍ O PROFESSOR DIZ QUE '''NÓS MELHORAMOS A PERFORMANCE TREMENDAMENTE'.... ------> 






SÓ N ENTENDI O PQ DESSE 'INCREASE DE PERFORMANCE'... ------> 






ok, agora 




TEMOS UM HASHED PASSWORD,

o 


'HASHED VALUE'.... --------------> E A PARTE IMPORTANTE 

DOS 


'ENCRYPTED PASSWORDS'



É 

QUE 



__VOCê/QUALQUER UM __ NÃO VAI __ CONSEGUIR ___ DECRIPTAR__ 


O 

PASSWORD QUE EU 

USEi... --> 





NÃO HÁ NINGUÉM QUE CONSIGA DECRIPTAR 



'"$2a$12$vv8BtAENa.6EU8smci/HmeZJRMrPbMmr3IeONKr/5qCXKiKiQreku"''




E DESCOBRIR QUE 

O 

PASSWORD 

é 

'CCC', por exemplo...








-->  E ESSE FATO AÍ,

O 

FATO DE QUE 

__ISSO AÍ É __ IMPOSSÍVEL __ DE DECRIPTAR__ 



É __ A MESMA RAZÃO 

PELA QUAL __ NÃO VAMOS ___ QUERER 


ENCRIPTAR O EMAIL... --> N VAMOS QUERER 





____ENCRIPTAR__ O EMAIL PQ ELE TBM VAI FICAR IMPOSSÍVEL DE 

DECRIPTAR,

e PRECISAMOS 


DO 

EMAIL 



para fazer outras coisas na nossa database...











--> NÃO VAMOS DECRIPTAR ESSE 'PASSWORD', DE FATO... --> ok, mas COMO 


VAMOS 


SABER 


SE 

O 

USER 



REALMENTE INPUTTOU SEU PASSWORD 



CORRETO NO FIELD DE 'PASSWORD', QUANDO ELE FOR FAZER LOGIN? --------> 


PROFESSOR DIZ QUE LOGO VAI NOS ENSINAR 



COMO _ É _ FEITO ESSE 'CHECK'(




  eu acho que é por meio daquele 




method de 'bcrypt',


aquele method de 



'bcrypt.compare'...




)










------> MAS A MORAL É QUE __ NÃO __ VAMOS CONSEGUIR __ DECRIPTAR___ ESSE 


'HASHED PASSWORD' -------> E É EXATAMENTE POR CONTA DISSO
 
 QUE 



 __NÃO VAMOS QUERER __ ENCRIPTAR NOSSOS 'EMAIL' 

 dentro do user... --> n vamos querer 


 encriptar os 

 EMAIL 


 __pq __ 

 SE NÓS __ ALGUMA HORA __ 



 TIVERMOS QUE __ ENVIAR__ MESSAGES_ A 

 ESSE 

 EMAIL (como um email de 'recuperar senha', ou qualquer coisa desse tipo),



 __NÃO VAMOS CONSEGUIR,


 PQ 

 O 
 VALOR 

 ESTARÁ 


 ENCRIPTADO (e NÃO HÁ COMO DECRIPTAR, como o professor nos explicou anteriormente..)










 --> É POR ISSO QUE O EMAIL VAI 




 SER ARMAZENADO __ DE FORMA PURA__.....









 --> mas o PASSWORD REALMENTE FICARÁ 

 'SECURE',


 ficará 


 __NOT READABLE_...








 OK... É ASSIM QUE ARMAZENAMOS 



 'PASSWORDS'

 na nossa database,


 em

 objetos/documents 'user'...








 ----> OK... PROFESSOR TESTA A FEATURE 



 DE 


 'NÃO DEIXAR PESSOA CRIAR 


 USER PARA 1 EMAIL QUE JÁ EXISTE NA DATABASE'...









 --> CERTO... PROSSEGUINDO...