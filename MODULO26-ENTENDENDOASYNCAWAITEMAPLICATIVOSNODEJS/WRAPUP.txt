


OK, AGORA ESTAMOS USANDO ASYNC/AWAIT 


EM 



TODO LUGAR DE NOSSO CÓDIGO....












--> PROFESSOR DESTACA:









MONGOOSE ---> PARA TODAS ESSAS FUNÇÕES MONGOOSE, QUE SÃO 'THE PRIMARY THING' EM QUE 

USAMOS ASYNC/AWAIT.... --> você tem que 


ENTENDER QUE 

O 

'MONGOOSE',


COM 

OPERATIONS 


COMO 



'countDocuments'



e 

'find()'




__ NÃO FAZ ___ O RETURN__ 


DE 


UMA 

'ACTUAL PROMISE',


E SIM 


RETORNA UM 


'PROMISE-LIKE OBJECT'... -----> OBJECT EM QUE 


VOCê 

PODE USAR 



'then-catch' 


e 

também 

'async/await'.... --> ISSO TAMBÉM 



É PERMITIDO 


PELO MONGOOSE, AINDA UQE 


POR TRÁS DAS CENAS 


ESSES MÉTODOS 


MONGOOSE NÃO SEJAM 'REAL PROMISES'... -------> NÃO IMPORTA MT.. --> ISSO PQ 




VOCê 

USA 

ASYNC/AWAIT 


NESSAS FUNÇÕES/MÉTODOS MONGOOSE 





___ EXATAMENTE DA MESMA FORMA,

MAS É IMPORTANTE RESSALTAR ESSE FATO...










-------> QUANDO VOCÊ QUISER 


'GET BACK A REAL PROMISE' 



como resultado 



DA EXECUÇAÕ DE UM MÉOTDO MONGOOSE,





VOCÊ DEVE CHAMAR 

'.exec()'


NO FINAL DO CALL DO MÉTODO,

tipo assim:









const totalItems = await Post.find().countDocuments().exec();








-------> PROFESSOR EXPLICA QUE NÓS NÃO PRECISAMOS DESSE NEGÓCIO NO NOSSO PROJETO,


ISSO 

PQ 

ESSE 

'PROMISE-LIKE OBJECT'


SE COMPORTA EXATAMENTE DA MANEIRA QUE QUEREMOS QUE SE COMPORTE...


(



    UM EXEMPLO DE 'REAL PROMISE' 

    É 

    VISTA COM 
    a 
    LIBRARY DE 

    'bcrypt',


    EM QUE 


    FAZEMOS HASH DO PASSWORD....




)









--> ISSO É VISTO LÁ NAQUELE CÓDIGO DE 



'const hashedPassword = await hash(password, 12);'










-----> BEM, MAS NÃO HÁ DIFERENÇA ENTRE ISSO E MÉTODOS MONGOOSE,



QUANTO AO RETURN DAS PROMISES...














------> ASYNC/AWAIT --> BOA ALTERNATIVA AO USO DE 

'THEN-CATCH'... 



--> POR TRÁS 

DAS CENAS,



É ESSENCIALMENTE O MESMO CÓDIGO...







---> NÃO TIRE DA MENTE QUE 

ISSO AINDA É 

'ASYNC STEPS',



E QUE 


O 


'JAVASCRIPT CODE EXECUTION BEHAVIOR'


NÃO MUDA 

EM RAZÃO DESSA SINTAXE.... ------> ele só wrappa as coisas em 



THEN BLOCKS IMPLÍCITOS... 

(


bem simples...
)










--> VOCÊ PODE CONTINUAR COM O 'OLD PROMISE STYLE' (then e catch),




PQ 

ELE 

É 


MELHOR PARA ENSINAR... --> mas 


se 

você 





tem 





IDEIA DE COMO O ASYNC/AWAIT 






FUNCIONA,

VOCê 


PODE 





USAR SUA ESCRITA...











----> COM O REACT APP,





PROFESSOR VAI MANTER 

O 


CÓDIGO DE '

then-catch',




AO PASSO QUE NO NODE ELE 

VAI 




OPTAR PELO ASYNC/AWAIT...











---> VOU COMPARAR O CÓDIGO DOS MEUS CONTROLLERS COM OS DO PROFESSOR,

VER SE ESTÃO IGUAIS...










------->  ESTÃO IGUAIS... O ÚNICO PROBLEMEA 

SÃO 

ESSES CONTROLLERS AQUI:









exports.getUserStatus = async (req, res, next) => {
  try {
    const user = await User.findById(req.userId);
    if (!user) {
      const error = new Error('User not found.');
      error.statusCode = 404;
      throw error;
    }
    res.status(200).json({ status: user.status });
  } catch (err) {
    if (!err.statusCode) {
      err.statusCode = 500;
    }
    next(err);
  }
};

exports.updateUserStatus = async (req, res, next) => {
  const newStatus = req.body.status;
  try {
    const user = await User.findById(req.userId);
    if (!user) {
      const error = new Error('User not found.');
      error.statusCode = 404;
      throw error;
    }
    user.status = newStatus;
    await user.save();
    res.status(200).json({ message: 'User updated.' });
  } catch (err) {
    if (!err.statusCode) {
      err.statusCode = 500;
    }
    next(err);
  }
};












-------> eu não implementei essa feature de 'status'

no meu código...












--> SÓ O 'deletePost'


FICOU UM POUCO DIFERENTE:









exports.deletePost = async (req, res, next) => {
  const postId = req.params.postId;
  try {
    const post = await Post.findById(postId);

    if (!post) {
      const error = new Error('Could not find post.');
      error.statusCode = 404;
      throw error;
    }
    if (post.creator.toString() !== req.userId) {
      const error = new Error('Not authorized!');
      error.statusCode = 403;
      throw error;
    }
    // Check logged in user
    clearImage(post.imageUrl);
    await Post.findByIdAndRemove(postId);

    const user = await User.findById(req.userId);
    user.posts.pull(postId);
    await user.save();

    res.status(200).json({ message: 'Deleted post.' });
  } catch (err) {
    if (!err.statusCode) {
      err.statusCode = 500;
    }
    next(err);
  }
};







---> ok.... AGORA É HORA DE VER O MÓDULO 27...