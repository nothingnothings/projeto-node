











para deixarmos o user RESETTAR O PRÓPRIO PASSWORD DA CONTA, PRECISAMOS DE UMA FORM....











---> SÓ N SEI SE ESSA FORM __ VAI __ SER RENDERIZADA__ NA PRÓPRIA VIEW 


de 

'reset-password'  (de tipo 'get' + 'token', no caso),






OU SE VAMOS USAR 



UMA VIEW SEPARADA PARA ISSO...













-----------> PROFESSOR 





DIZ QUE 

DEVEMOS 


ADICIONAR UMA 

FORM 

QUE 


DEIXE 



O USER RESETTAR A SENHA... --> PARA ISSO,



ELE 


REALMENTE ADICIONA UMA NOVA VIEW,


'new-password.ejs'...









----------------------------




CONSEGUI... IMPLEMENTEI A PORRA TODA SOZINHO...












ex:














exports.postNewPassword = (req, res, next) => {

    const newPassword = req.body.password;


    const userToken = req.body.userToken;



    User.findOne({token: userToken})
  .then(
    (user) => {


        bcrypt.hash(
          newPassword, 12
        )
        .then(
          (hashedPassword) => {


            user.password = hashedPassword;
            user.save();
          }
        )
        .then(
          (result) => {


            res.redirect('/login');
          }
        )
        .catch(
          (err) => {
            console.log(err);
          }
        )

    }
  )

}





ISSO REALMENTE __ FAZ__ COM QUE O PASSWORD __DE NOSSO USER SEJA ALTERADO para esse novo password...



----------------------------










--> PROFESSOR ESCREVE A FORM ASSIM:








<%- include('../includes/head.ejs') %>
    <link rel="stylesheet" href="/css/forms.css">
    <link rel="stylesheet" href="/css/auth.css">
</head>
<body>
    <%- include('../includes/navigation.ejs'); %>
    <main>
        <% if (errorMessage) {  %>
            <div class="user-message user-message--error"><%= errorMessage %></div>
            <% } %>
            <form class="login-form" action="/new-password" method="POST">
                <input type="hidden" value="<%= csrfToken %>" name="_csrf"> <!--  VOCÊ _ _DEVE UTILIZAR ESSE NAME de '_csrf' para esse INPUT FIELD DE TYPE 'hidden' SE VOCê QUER__ QUE A PACKAGE 'csurf' CONSIGA DETECTAR ESSE INPUT FIELD__ COMO AQUELE RESPONSÁVEL/SEGURADOR DE SUA CSRF TOKEN...-->
                <input type="hidden" value="<%= userToken %>" name="userToken">
                <div class="form-control">
                    <label for="password">New Password</label>
                    <input type="password" name="password" id="password">
                </div>
                <button class="btn" type="submit">Reset Your Password</button>
            </form>
    </main>
<%- include('../includes/end.ejs'); %>







----------------------








NA CONTROLLER ACTION, ELE ESCREVEU:












exports.getNewPassword = (req, res, next) => {



        res.render('auth/new-password', {


            path: '/new-password',
            pageTitle: 'New Password',
            errorMessage: message
        })


}









--> É CLARO QUE O USER NÃO VAI QUERER 
SÓ 

RENDERIZAR 1 VIEW AQUI... --> ELE VAI QUERER CHECAR 





SE EXISTE 1 USER PARA ESSA TOKEN 

QUE 

É 


PASSADA 

NESSA URL...












----> OK... --> EU FIZ ISSO POR MEIO DO CÓDIGO DE 










exports.getNewPasswordPage = (req, res, next) => {
  // console.log('TEST');
  // console.log(req.params.token);

  let message = req.flash('error');

  if (message.length > 0) {
    message = message[0];
  } else {
    message = null;
  }


  const userToken = req.params.token;



  User.findOne({token: userToken})
  .then(
    (user) => {

      if(!user) {
          console.log('BLOCK ENTERED');
          req.flash('error', 'Invalid token. Please enter the address that was sent to you via email.');
          res.redirect('/');

      } else {



        console.log(userToken);

        res.render(
          'auth/new-password', {

            pageTitle: 'Change your Password',
            path: '',
            userToken: userToken,
            // errorMessage2: req.flash('error') /////USO DE 'flash-connection'... particularmente, do método 'req.flash()', que é SEU __cORE METHOD.... -----> AQUI NÓS VAMOS __ UTILIZAR__ a message/error message armazenada na key de 'error' DENTRO DE NOSSA SESSION (o store dessas error messages na session do user é mt efetivo PQ __ PODEMOS __ USAR a data das sessions AO LONGO DE REQUESTS DISTINTOS.... isso quer dizer que a DATA PERSISTE, pode ser usada em QUALQUER PAGE DE NOSSO APP, para fazer o ERROR HANDLING junto de REDIRECTS... esse é o uso de 'req.flash()' ) -----> OBS: ESSE É O REQ.FLASH() que __ USA__ o 'flash' que você definiu anteriormente... --> para ver a definição de um 'FLASH', veja o controller de 'postLogin', aquele block de 'if(!user)'...
            errorMessage: message,



          }
        )


      }


    }
  )
}













-------------------------------








--> OK, AÍ O PROFESSOR USOU 

'User.findOne({})'

 







 --> PROFESSOR EXPLICA, AGORA, 





 que 



 ___ COMO NOSSAS TOKENS SÃO GERADAS DE UMA MANEIRA 'NON GUESSABLE', random,




 VOCê __ TAMBÉM __ NÃO PODE INSERIR ___ RANDOM TOKENS __ 


 PARA TENTAR EDITAR___ 





 OS PASSWORDS DE OUTROS USERS... --> e mesmo que você pudesse,



 você nunca saberia os 'fitting email addresses'...










 --> OK.... 








 --> PROFESSOR ESCREVE:






   User.findOne({token: userToken})











   ------> ok.... 









   --> MAS __AÍ __ EU ESQUECI 1 DETALHE... ------> 


   ESSAS 


   TOKENS 

   DEVEM 

   SER VÁLIDAS __ TAMBÉM __ DE UMA PERSPECTIVA 

   'DATE',




   TUDO PARA QUE 



   esse 

   'find'


   

   SATISFAÇA MAIS DO QUE ESSE CRITÉRIO,



   MAS TAMBÉM 

   O 


   SEGUNDO CRITÉRIO (podemos adicionar múltiplos critérios nesse 'findOne',
   
   
   
   basta 

   adicionar ',' e então ir enumerando os critérios...
   
   
   )









   -----> OK.... ------> 





   É POR ISSO QUE O PROFESSOR VAI ESCREVER QUE 




   VAI QUERER 

   QUE 



   a 

   'Expiry Date' SEJA _ SUPERIOR __ À '''CURRENT DATE''' __...









POR ISSO QUE ELE ESCREVE ALGO ASSIM:






User.findOne({resetToken: userToken, expiryDate: {} })








---------------------------------------








pARA ISSO,






professor diz que 


podemos usar um OPERADOR ESPECIAL,






DESSES OPERATORS QUE DEVEM SER INSERIDOS ___ DENTRO __ DE '{}" (curly braces)...









-------> VOCÊ VAI ESCREVER 



'{$gt}' 





---> 'gt' SIGNIFICA   ''''greater than''',






__ 




E VAMOS COMPARAR SE 



esse 


'ExpiryDate'



É __ 'GREATER THAN' 



o 

'Date.now()', 






ou seja, SE __ 'the token is still greater than now',




OU SEJA___ SE 



___ A TOKEN AINDA É __ NO FUTURO EM RELAÇÃO AO MOMENTO ATUAL... (bem conveniente)....












EX:







User.findOne({resetToken: userToken, expiryDate: {$gt: Date.now()} })








----------------------------------------------









SÓ COM ESSES 2 CRITÉRIOS SATISFEITOS É QUE 

TEREI 

o 


USER QUE 

VOU QUERER ENCONTRAR...










---> OK, AÍ ADICIONAMOS UM THEN E CATCH,








LOGGAMOS
 


 QUAISUQER 


 ERROS 

 QUE 

 TALVEZ 




 RECEBAMOS... -------> 









 CÓDIGO VAI FICANDO ASSIM:



















 exports.getNewPasswordPage = (req, res, next) => {
  // console.log('TEST');
  // console.log(req.params.token);

  let message = req.flash('error');

  if (message.length > 0) {
    message = message[0];
  } else {
    message = null;
  }


  const userToken = req.params.token;



  User.findOne({token: userToken, expiryDate: { $gt: Date.now() }})////OBS: em 'findOne', PODEMOS ESTABELECER __MÚLTIPLOS CRITÉRIOS DE FIND, __ basta enumerá-los com '''','''' (vírgulas)...
                                  /////'{$gt}' -----> OPERATOR QUE SIGNIFICA 'greater than' ----> USAMOS AQUI PARA ASSEGURAR QUE O 'MOMENTO DE AGORA' (representado por 'Date.now()') NÃO SEJA SUPERIOR AO MOMENTO '''FUTURO''' (só é válido o token se o 'ExpiryDate' no seu user FOR __INFERIOR__ ao 'current time', representado por 'resetToken') representado por 'ExpiryDate' lá no nosso model de 'user'... 
  .then(
    (user) => {

      if(!user) {
          console.log('BLOCK ENTERED');
          req.flash('error', 'Invalid token. Please enter the address that was sent to you via email.');
          res.redirect('/');

      } else {



        console.log(userToken);

        res.render(
          'auth/new-password', {

            pageTitle: 'Change your Password',
            path: '',
            userToken: userToken,
            errorMessage: message,



          }
        )


      }


    }
  )
}




------------------------------












        res.render(
          'auth/new-password', {

            pageTitle: 'Change your Password',
            path: '',
            userToken: userToken,
            errorMessage: message,



          }
        )








--------> vamos querer renderizar essa view 






do 'new password',





mas aí __ O PROFESSOR DISSE QUE __ VAMOS QUERER __ INCLUIR O 'userId' 


em vez 

do 


'userToken', que 


depois 

será


usado 

para 

'UPDATE THE PASSWORD'


naquela outra 



página.... 

(

    mas eu usei o token, em vez disso,

    e funcionou igual...
)








o que interessa é que o código ficou assim:







        res.render(
          'auth/new-password', {

            pageTitle: 'Change your Password',
            path: '',
            userToken: userToken,
            errorMessage: message,
            userId: user._id.toString()



          }
        )







--------------------------------








OK..... AGORA NÓS VAMOS RENDERIZAR ESSA PAGE DE 'NEW PASSWORD',

e nessa 

page 





vamos 



ter 





AQUELE FIELD HIDDEN QUE EU USEI, DE NOVO,


tipo assim:




                <input type="hidden" value="<%= csrfToken %>" name="_csrf"> <!--  VOCÊ _ _DEVE UTILIZAR ESSE NAME de '_csrf' para esse INPUT FIELD DE TYPE 'hidden' SE VOCê QUER__ QUE A PACKAGE 'csurf' CONSIGA DETECTAR ESSE INPUT FIELD__ COMO AQUELE RESPONSÁVEL/SEGURADOR DE SUA CSRF TOKEN...-->
                <input type="hidden" value="<%= userToken %>" name="userToken">






--------------------------------








ok.... 





--> AÍ 



VAMOS USAR DESSE 'POST REQUEST'




PARA QUANDO ___ FORMOS __ SALVAR__ 




NOSSO NOVO PASSWORD... ---> ok, com 

isso 




adicionamos 


uma nova route 


em 


'auth.js',






a route de 


'''
router.get('/new-password/:token', authController.getNewPassword);

''









-----> 






ok...




minha view era/é:








<%- include('../includes/head.ejs') %>
    <link rel="stylesheet" href="/css/forms.css">
    <link rel="stylesheet" href="/css/auth.css">
</head>
<body>
    <%- include('../includes/navigation.ejs'); %>
    <main>
        <% if (errorMessage) {  %>
            <div class="user-message user-message--error"><%= errorMessage %></div>
            <% } %>
            <form class="login-form" action="/new-password" method="POST">
                <input type="hidden" value="<%= csrfToken %>" name="_csrf"> <!--  VOCÊ _ _DEVE UTILIZAR ESSE NAME de '_csrf' para esse INPUT FIELD DE TYPE 'hidden' SE VOCê QUER__ QUE A PACKAGE 'csurf' CONSIGA DETECTAR ESSE INPUT FIELD__ COMO AQUELE RESPONSÁVEL/SEGURADOR DE SUA CSRF TOKEN...-->
                <input type="hidden" value="<%= userToken %>" name="userToken">
                <div class="form-control">
                    <label for="password">New Password</label>
                    <input type="password" name="password" id="password">
                </div>
                <button class="btn" type="submit">Reset Your Password</button>
            </form>
    </main>
<%- include('../includes/end.ejs'); %>










------------------------------------------











---> ok.... teremos esse parâmetro 'token' dinâmico, isso 

pq 







VAMOS QUERER USAR ESSE 'token' 




no nosso find...


(


  como visto em 


  'const token = request.params.token'






)







ok........ ----> COM ISSO, VOLTAMOS E RECARREGAMOS 




A PÁGINA... --> A FUNÇÃO FUNCIONOU... 







-------------> PROFESSOR DIZ QUE NA PRÓXIMA LIÇÃO DEVEMOS ADICIONAR A LÓGICA PARA 

'UPDATE THE PASSWORd'...










EX:












exports.postNewPassword = (req, res, next) => {

    const newPassword = req.body.password;


    const userToken = req.body.userToken;



    User.findOne({token: userToken})
  .then(
    (user) => {


        bcrypt.hash(
          newPassword, 12
        )
        .then(
          (hashedPassword) => {


            user.password = hashedPassword;
            user.save();
          }
        )
        .then(
          (result) => {


            res.redirect('/login');
          }
        )
        .catch(
          (err) => {
            console.log(err);
          }
        )

    }
  )

}







-------------------------------------------------







-> USEI ESTE CÓDIGO AQUI:


        bcrypt.hash(
          newPassword, 12
        )
        .then(
          (hashedPassword) => {


            user.password = hashedPassword;
            user.save();
          }
        )