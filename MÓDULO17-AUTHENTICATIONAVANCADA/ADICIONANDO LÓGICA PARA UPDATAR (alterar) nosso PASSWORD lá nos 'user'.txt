










------> ADICIONAMOS UMA PAGE QUE 

NOS 


PERMITE 'ENTER A NEW PASSWORD'... -->   





A VIEW 

de 



'new-password' é assim:












<%- include('../includes/head.ejs') %>
    <link rel="stylesheet" href="/css/forms.css">
    <link rel="stylesheet" href="/css/auth.css">
</head>
<body>
    <%- include('../includes/navigation.ejs'); %>
    <main>
        <% if (errorMessage) {  %>
            <div class="user-message user-message--error"><%= errorMessage %></div>
            <% } %>
            <form class="login-form" action="/new-password" method="POST">
                <input type="hidden" value="<%= csrfToken %>" name="_csrf"> <!--  VOCÊ _ _DEVE UTILIZAR ESSE NAME de '_csrf' para esse INPUT FIELD DE TYPE 'hidden' SE VOCê QUER__ QUE A PACKAGE 'csurf' CONSIGA DETECTAR ESSE INPUT FIELD__ COMO AQUELE RESPONSÁVEL/SEGURADOR DE SUA CSRF TOKEN...-->
                <input type="hidden" value="<%= userToken %>" name="userToken">
                <div class="form-control">
                    <label for="password">New Password</label>
                    <input type="password" name="password" id="password">
                </div>
                <button class="btn" type="submit">Reset Your Password</button>
            </form>
    </main>
<%- include('../includes/end.ejs'); %>










-----------------------------------------------









--> REQUEST à ROUTE 


de  



'/new-password',


de tipo POST....









---------> ok....







--> NOS CONTROLLERS, PROFESSOR COMEÇA ESCREVENDO ASSIM:











exports.postNewPassword = (req, res, next) => {



    const newPassword = req.body.password; ////extraído de NOSSA VIEW, lá da form, enviada por meio do button de type 'submit'...





}









----> ALÉM DISSO,


PROFESSOR DIZ QUE TAMBÉM VAMOS TER QUE EXTRAIR AQUELA 'token'


EM 


''         <input type="hidden" value="<%= userToken %>" name="userToken"> ''''











---------> ok... VAI FICANDO ASSIM:




exports.postNewPassword = (req, res, next) => {



    const newPassword = req.body.password; ////extraído de NOSSA VIEW, lá da form, enviada por meio do button de type 'submit'...
    const userId = req.body.userId;




}






------------------------------------






---> AINDA VAMOS QUERER__ TER ESSA TOKEN,

PQ CASO CONTRÁRIO 


 


 ____ AS PESSOAS PODERIAM 


 APENAS DIGITAR RANDOM TOKENS na url bar e AINDA ALCANÇAR 

 ESSA 


 ROUTE 





 aí, e aí poderiam 'change users on the backend' 

por meio 




Do insert DE 'RANDOM USER IDS'


naqueles 

input fields de type 'hidden', também...







--> ou seja, o que o professor fez foi USAR O TOKEN para basicamente 'validate'/autorizar 



os users que acessam essa page...


(

    O MEU CÓDIGO HAVIA FICADO DIFERENTE, HAVIA FICADO ASSIM (eu nao havia usado o 'userId'... mas não sei se é realmente necessário esse 'userId', como o professor usou..):










exports.postNewPassword = (req, res, next) => {
  const newPassword = req.body.password;

  const userToken = req.body.userToken;

  User.findOne({ token: userToken }).then((user) => {
    bcrypt
      .hash(newPassword, 12)
      .then((hashedPassword) => {
        user.password = hashedPassword;
        user.save();
      })
      .then((result) => {
        res.redirect('/login');
      })
      .catch((err) => {
        console.log(err);
      });
  });
};







)





é por isso que o código do professor 




foi ficando um pouco diferente do nosso, tipo assim:









(view):








<%- include('../includes/head.ejs') %>
    <link rel="stylesheet" href="/css/forms.css">
    <link rel="stylesheet" href="/css/auth.css">
</head>
<body>
    <%- include('../includes/navigation.ejs'); %>
    <main>
        <% if (errorMessage) {  %>
            <div class="user-message user-message--error"><%= errorMessage %></div>
            <% } %>
            <form class="login-form" action="/new-password" method="POST">
                <input type="hidden" value="<%= csrfToken %>" name="_csrf"> <!--  VOCÊ _ _DEVE UTILIZAR ESSE NAME de '_csrf' para esse INPUT FIELD DE TYPE 'hidden' SE VOCê QUER__ QUE A PACKAGE 'csurf' CONSIGA DETECTAR ESSE INPUT FIELD__ COMO AQUELE RESPONSÁVEL/SEGURADOR DE SUA CSRF TOKEN...-->
                <input type="hidden" value="<%= userToken %>" name="userToken">
                <input type="hidden" value="<%= userId %>" name="userId"> ///////EIS O CÓDIGO EM QUESTÃO.

                <div class="form-control">
                    <label for="password">New Password</label>
                    <input type="password" name="password" id="password">
                </div>
                <button class="btn" type="submit">Reset Your Password</button>
            </form>
    </main>
<%- include('../includes/end.ejs'); %>


----------------------------------






EX:











exports.postNewPassword = (req, res, next) => {
  const newPassword = req.body.password;

  const userToken = req.body.userToken;


  const userId = req.body.userId;

    User.findOne({ resetToken: userToken }).then((user) => {
    bcrypt
      .hash(newPassword, 12)
      .then((hashedPassword) => {
        user.password = hashedPassword;
        user.save();
      })
      .then((result) => {
        res.redirect('/login');
      })
      .catch((err) => {
        console.log(err);
      });
  });
};










-----------------------------------------



OK....







o professor também havia, lá em 'getNewPasswordPage',

passado
 

 um objeto data ao render, assim:




  const userToken = req.params.token;

        res.render('auth/new-password', {
          pageTitle: 'Change your Password',
          path: '',
          userToken: userToken, //////ISSO AQUI É 'passwordToken', na versão do PROFESSOR, MAS É A MESMA COISA...
          errorMessage: message,
        });






-------------------------------







certo... ---> e agora esse token foi passado, e agora é algo que podemos 

EXTRAIR 

em 




'

exports.postNewPassword = (req, res, next) => {


    '',










    TIPO ASSIM:





    exports.postNewPassword = (req, res, next) => {



    const newPassword = req.body.password; ////extraído de NOSSA VIEW, lá da form, enviada por meio do button de type 'submit'...
    const userId = req.body.userId;
    const passwordToken = req.body.passwordToken;




}








------------------------------------







OK.... AGORA TEMOS ESSAS 3 'PIECES OF INFORMATION' 




no controller de 'postNewPassword'...







----------------------> AGORA VAMOS QUERER RESETTAR NOSSO USER,

por isso 

o 

professor 

escreve 




'User.findOne()',









tipo assim:








''''                                            '''''''
User.findOne({resetToken: userToken})










--> MAS É CLARO QUE VAMOS QUERER TAMBÉM USAR 

O CRITÉRIO 


de 


'expiryDate' 



PARA __, DE NOVO, 




COMPARAR 

'''' expiryDate: {$gt: Date.now() + 3600000 }'''








-----> MESMA LÓGICA QUE HAVÍAMOS ESCRITO ANTES...








---->  ALÉM DISSO,

PROFESSOR 


VAI QUERER que 





o '_id' desse user seja IGUAL A 'userId',







tudo para que REALMENTE O USER NECESSÁRIO SEJA SELECIONADO, O USER CUJO PASSWORD DEVE SER ALTERADO...







eX:






User.findOne(
    
    
    {resetToken: userToken,

    expiryDate: {$gt: Date.now() + 3600000}, 
    _id: userId
    
    
    
    
    }
    
    
    
    
    
    )



----------------------------------------









COLOCAMOS UM THEN E UM CATCH,




AÍ NO THEN BLOCK TEREMOS NOSSO USER,




user que satisfaça todos os critérios... 






-----> NO USER, VAMOS QUERER ASSIGNAR UM NOVO 'PASSWORD', NOVO 'HASHED PASSWORD', POR MEIO 

DO 


BCRYPT E 'bcrypt.hash()', 


CÓDIGO 



ASSÍNCRONO.... (promises).










EX:








exports.postNewPassword = (req, res, next) => {
  const newPassword = req.body.password;

  const userToken = req.body.userToken;


  const userId = req.body.userId;

  // User.findOne({ token: userToken }).then((user) => {
    User.findOne({ resetToken: userToken, expiryDate: {$gt: Date.now() + 3600000}}).then((user) => {
 return  bcrypt
      .hash(newPassword, 12)
      .then((hashedPassword) => {
        user.password = hashedPassword;
        user.save();
      })
      .then((result) => {
        res.redirect('/login');
      })
      .catch((err) => {
        console.log(err);
      });
  });
};














------> ok.... professor escreveu essencialmente o mesmo código que eu...










-----> mas ele escreveu seu código de uma maneira um pouco diferente, organização DIFERENTE 

de 

then blocks com as promises...








ex:








exports.postNewPassword = (req, res, next) => {
  const newPassword = req.body.password;
    const userId = req.body.userId;
  const userToken = req.body.userToken;

    let resetUser; //////EIS O CÓDIGO EM QUESTÃO.

    User.findOne({ resetToken: userToken, expiryDate: {$gt: Date.now() + 3600000}}).then((user) => {


            resetUser = user; //////EIS O CÓDIGO EM QUESTÃO. Define 'resetUser' como sendo o valor DESSE USER retornado nesse block aí....

 return  bcrypt.hash(newPassword, 12);

    })
      .then((hashedPassword) => {

                resetUser.password = hashedPassword; ///EIS OS CÓDIGOS EM QUESTAÕ.
                resetUser.resetToken =  undefined;    /// esses fields naõ serão mais necessários, por isso os definimos como 'undefined'...
                resetUser.expiryDate = undefined;      ////
                return resetUser.save();

      })
      .then((result) => {
        res.redirect('/login');
      })
      .catch((err) => {
        console.log(err);
      });
  });
};






-----------------





--> MAS É CLARO QUE __ 




AINDA PRECISAMOS CHAMAR 'user.save()'...






--> PROFESSOR EXPLICA QUE DEFINIMOS COMO 'UNDEFINED' 

os 


fields 

de 




'resetToken' 

e 

'expiryDate' 

JUSTAMENTE PQ ELES NÃO SERÃO MAIS NECESSÁRIOS, PQ A TOKEN JÁ TERÁ SIDO UTILIZADA....




--> ok, POR FIM, PROFESSOR EXPLICA QUE ELE PODE/VAI SIMPLESMENTE 



EXECUTAR 

'return resetUser.save()', 


PARA UPDATAR
 

 ESSES 

 VALORES 



 NO USER... ( o token, sua expiry date e O _PASSWORd__...)






 DEPOIS DESSE PROCESSO, REDIRECIONAMOS O USER DE VOLTA à PÁGINA DE LOGIN com 

 'res.redirect('/login') '...


 -------------











 É CLARO QUE __ VOCÊ PODERIA __ AINDA __ ENVIAR OUTRO _ EMAIL __ CONFIRMANDO ESSE CHANGE 

 DE 

 PASSWORDS, se quisesse...






OK, ESTÁ TUDO FUNCIONANDO...






CONSEGUI, FICOU ASSIM:










exports.postNewPassword = (req, res, next) => {
  const newPassword = req.body.password;

  console.log(newPassword);

  const userToken = req.body.userToken;


  const userId = req.body.userId;

  let resetUser;


  // User.findOne({ token: userToken }).then((user) => {
    User.findOne({ resetToken: userToken, expiryDate: {$gt: Date.now() }, _id: userId}).then(
      
      
      (user) => {
        resetUser = user;
  return  bcrypt
      .hash(newPassword, 12)

      })
      .then((hashedPassword) => {

        resetUser.password = hashedPassword;
        resetUser.resetToken = undefined; /// esses fields naõ serão mais necessários, por isso os definimos como 'undefined'... ///VAMOS QUERER DESCARTAR A TOKEN E  O 'EXPIRY DATE'  ASSIM QUE ELA FOR REALIZADO ESSE PROCEDIMENTO DE 'RESET PASSWORD' (uso único dessa token....)
        resetUser.expiryDate = undefined;
        resetUser.save();
      })
      .then((result) => {
        res.redirect('/login');
      })
      .catch((err) => {
        console.log(err);
      });
  
};





---------------






O BOM É QUE QUANDO ESSA OPERAÇÃO 

DE 

'REST PASSWORD' TERMINA,

NOSSO 



TOKEN 

de 

'resetToken' 

É 




REMOVIDO, JUNTO DE 'expiryDate' --> o que é ótimo, realmente 

nos ajuda muito....







--> E SE TENTARMOS 




DIGITAr 

'localhost:3000/rest-password/asasihasihasoibioqboiwbwqobiwq' (COM UMA RANDOM TOKEN),





ISSO NÃO VAI FUNCIONAR, MAS NENHUM ERRO SERÁ MOSTRADO AO USER.... --> isso é ruim,

pq 

VAMOS QUERER TER PROPER ERROR HANDLING PARA ESSE CASE...










(nós nem vamos  conseguir alcançar essa page) ------> PROFESSOR 


NOS DIZ QUE 

TERMEOS 





' A WHOLE MODULE ABOUT ERROR HANDLING'



no futuro.... --> ISSO, 




ESSE 



'NENHUM ERRO'



ACONTECERÁ 
PQ 

__BASICAMENTE_ 



'WE FAILED TO FIND A USER FOR THAT TOKEN',





_____ MAS ISSO É BOM, POR OUTRO LADO, PQ SIGNIFICA QUE 


NÃO PODEMOS 

'START CHANGING VALUES OF RANDOM TOKENS OFF OF RANDOM USERS'... --> isso não vai funcionar, o que é ótimo...