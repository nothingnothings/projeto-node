








ok.... já criamos a view de 


'reset-password',






E TAMBÉM 


ADICIONAMOS UM CONTROLLER (por enquanto vazio) 



de 



'POST' 



PARA __ ENVIAR 1 


EMAIL...








--> o controller é este:










exports.postResetPassword = (req, res, next) => {



};















--> EU ACHO QUE A PRIMEIRA COISA QUE TEMOS QUE 

FAZER 

É 



ESCREVER 


aquele 



'transport.sendMail()',


PARA 



COMEÇAR A FORMULAÇÃO DE NOSSO EMAIL... (e aí, devemos escrever um REDIRECT  ___antes___ desse 'sendMail', para redirecionar o USER DE FORMA INDEPENDENTE do send desse email)...




ex:





exports.postResetPassword = (req, res, next) => {


        res.redirect('/');



        transport.sendMail(
            {

            }
        )


};











---------> 





EX:







 
exports.postResetPassword = (req, res, next) => {


  
  res.redirect('/');



  transporter.sendMail(
      {
        to: email, ///////EIS O CÓDIGO EM QUESTÃO.
        from: 'arthur.panazolo@acad.pucrs.br',
        subject: 'Reset Password Request',
        html: `<h1>Here's your password reset link: </h1>`
      }
  )


};










---------








--> OK.... VAMOS QUERER 


ENVIAR 1 EMAIL A ESSE EMAIL, COM 1 

LINK 

PARA RESETTAR O PASSWORD DO USER.....









------> PARA CONSEGUIR ISSO,



__________________ PRIMEIRAMENTE___ VAMOS TER QUE 

CRIAR/SER CAPAZES DE 


CRIAR 

UMA 

'UNIQUE TOKEN',



TOKEN __ QUE TAMBÉM 

TERÁ 



UMA/ALGUMA 

'expiry date',







TOKEN

__ QUE __ VAMOS ___ARMAZENAR_  NA NOSSA DATABASe... ------->  VAMOS ARMAZENAR 




ESSA TOKEN NA NOSSA DATABASE ___ JUSTAMENTE__ PARA QUE_ _ O LINK 

 

 QUE ENTÃO INCLUÍMOS __ NESSE EMAIL __ TENHA __ ESSA TOKEN,


 E PARA 

 QUE 

 ENTÃO __ CONSIGAMOS__ 




 ______ VERIFICAR__ QUE O USER ___ REALMENTE___ CONSEGUIU ESSE LINK __ DE NÓS MESMOS... (

   isso 

   pq 


   SE NÓS 

   SÓ 


   DEIXÁSSEMOS O USER TROCAR DE PASSWORD SEM ESSE TOKEN,



   nós ficaríamos __ SEM NENHUM 'SECURITY MECHANISM' no lugar... ----> É JUSTAMENTE POR ISSO 


   QUE
    


    PRECISAMOS 


    COLOCAR ESSE TOKEN NO EMAIL QUE 

    VAMOS 


    ENVIAR...
 )










 --> VAMOS TER QUE CRIAR ESSA 'UNIQUE TOKEN' para cada user que pede o reset de sua senha...







 -_> PRECISAMOS COLOCAR ESSE 




 TOKEN NO EMAIL JUSTAMENTE __ PARA __ APENAS__ DEIXAR/POSSIBILITAR QUE TROQUEM 

 O 

 PASSWORD__ OS USERS___ QUE 


 ACESSAREM A ROUTE DE 'change-password'/whatever __POR MEIO 

 DESSE 

 EMAIL QUE CONTÉM O TOKEN... (link com o token embutido no meio.... talvez nos 'query params'?)












 --> isso, portanto, é um 'additional security mechanism'...











 ---> OK...  VAMOS TRABALHAR NESSA ''''TOKEN CREATION''' 











 --> PARA ISSO,



 PROFESSOR 




 COMEÇA PELO EXPORT 

 DA 
 ACTION 



 de 

 'postResetPassword'..






É A ACTION QUE É DISPARADA QUANDO PRESSIONADO O BOTÃO DE 'RESET PASSWORD'....






 ----> OK...









----> DENTRO DESSE LOCAL, O PROFESSOR __ PRECISA 'GENERATE THAT TOKEN'... ----------> 


BEM, E PARA ISSO,




O __ NODEJS___ TEM 

UMA 




___ 'CRYPTO LIBRARY' 



BUILTIN,




QUE PODEMOS USAR PARA ESSA FUNÇÃO... -----> 







O NOME DA LIBRARY REALMENTE É 'crypto',



E É 

IMPORTADA 


POR MEIO DA SINTAXE 




'const crypto = require('crypto');'








---> VAMOS IMPORTAR ISSO LÁ NO CONTROLLER DE 

'auth.js'...





-------------












--------> É UMA LIBRARY __ QUE NOS __ AJUDA __ A





__ 'CREATE SECURE UNIQUE RANDOM VALUES' (e outras coisas, mas essa é a principal)....

------------






-------> OK.... 




O PROFESSOR ESCREVE:











exports.postResetPassword = (req, res, next) => {


  crypto.xxxxx



}








--> OU SEJA,

ELE 

VAI USAR 


ESSA LIBRARY de 

'crypto'

que armazenou na constant de 'crypto'....









------> E AÍ ELE VAI CHAMAR 


'randomBytes()',


PARA __ GERAR_ ALGUNS 'RANDOM BYTES'... -----> E AÍ 

ELE 







COLOCA '32' como parâmetro,


PARA QUE 

SEJAM 


GERADOS 32 RANDOM BYTES....








--> AÍ ELE PASSA UMA CALLBACK FUNCTION COMO SEGUNDO PARÂMETRO... é a function QUE SERÁ EXECUTADA __ QUANDO 




ESSE método de 'randomBytes()'


TIVER 

TERMINADO...








ex:





exports.postResetPassword = (req, res, next) => {


  crypto.randomBytes(32, () => {})



}







-----------------------------------








CÓDIGO PROVISÓRIO:









exports.postResetPassword = (req, res, next) => { //para ENVIAR 1 EMAIL COM UM LINK DE RESET PASSWORD, PRIMEIRAMENTE PRECISMAOS __ CRIAR UMA __ UNIQUE TOKEN para esse pedido do user... --> aí, essa TOKEN __ VAI SER ARMAZENADA NA NOSSA DATABSE E ENTÃO ___ INCORPORADA__ AO LINK QUE COLOCAREMOS NESSE EMAIL.. (mais tarde, o TOKEN nesse email SERÁ _VERIFICADO__ por nosso nodeapp, PARA __ ASSEGURAR__ QUE NOSSO LINK DE 'RESET PASSWORD' foi recebido PELO __DONO DO EMAIL DA CONTA, O EFETIVO PROPRIETÁRIO DA CONTA...)


  crypto.randomBytes(32, () => {}) ///USADO PARA CRIAR 32 RANDOM BYTES, que serão nossa token, no final das contas.... --> o segundo argumento é uma callback FUNCTION que é executada APÓS TEREM SIDO CRIADOS OS 32 BYTES aleatórios...




  const { email } = req.body;
  
  res.redirect('/');
  transporter.sendMail(
      {
        to: email, ///////EIS O CÓDIGO EM QUESTÃO.
        from: 'arthur.panazolo@acad.pucrs.br',
        subject: 'Reset Password Request',
        html: `<h1>Here's your password reset link: </h1>`
      }
  )


};
















--------> CERTO... AÍ, NAQUELA CALLBACK FUNCTION,

VAMOS RECEBER __: 




OU 


1) UM ERROR
 


 2) OU UM 'Buffer'....






 ---------------------





 EX:




   crypto.randomBytes(32, (err, buffer) => {}) 








----------------------------






--> ESSE BUFFER __sERÁ __ COMPOSTO POR ESSES BYTES...








-_> E SE EU TIVER 1 ERROR,




VOU QUERER __ REDIRECIONAR O USER __ DE VOLTA À 




PAGE DE 


'reset',


E AÍ PODERÍAMOS/PODEMOS FLASHAR UMA MESSAGE DE ERRO 


a esse nosso user, se quisermos...







EX:








exports.postResetPassword = (req, res, next) => { //para ENVIAR 1 EMAIL COM UM LINK DE RESET PASSWORD, PRIMEIRAMENTE PRECISMAOS __ CRIAR UMA __ UNIQUE TOKEN para esse pedido do user... --> aí, essa TOKEN __ VAI SER ARMAZENADA NA NOSSA DATABSE E ENTÃO ___ INCORPORADA__ AO LINK QUE COLOCAREMOS NESSE EMAIL.. (mais tarde, o TOKEN nesse email SERÁ _VERIFICADO__ por nosso nodeapp, PARA __ ASSEGURAR__ QUE NOSSO LINK DE 'RESET PASSWORD' foi recebido PELO __DONO DO EMAIL DA CONTA, O EFETIVO PROPRIETÁRIO DA CONTA...)


  crypto.randomBytes(32, (err, buffer) => {  ///USADO PARA CRIAR 32 RANDOM BYTES, que serão nossa token, no final das contas.... --> o segundo argumento é uma callback FUNCTION que é executada APÓS TEREM SIDO CRIADOS OS 32 BYTES aleatórios...

    if(err) {
      console.log(err);
      return res.redirect('/reset-password');
    }




  })







};












EX:









exports.postResetPassword = (req, res, next) => { //para ENVIAR 1 EMAIL COM UM LINK DE RESET PASSWORD, PRIMEIRAMENTE PRECISMAOS __ CRIAR UMA __ UNIQUE TOKEN para esse pedido do user... --> aí, essa TOKEN __ VAI SER ARMAZENADA NA NOSSA DATABSE E ENTÃO ___ INCORPORADA__ AO LINK QUE COLOCAREMOS NESSE EMAIL.. (mais tarde, o TOKEN nesse email SERÁ _VERIFICADO__ por nosso nodeapp, PARA __ ASSEGURAR__ QUE NOSSO LINK DE 'RESET PASSWORD' foi recebido PELO __DONO DO EMAIL DA CONTA, O EFETIVO PROPRIETÁRIO DA CONTA...)


  crypto.randomBytes(32, (err, buffer) => { ///USADO PARA CRIAR 32 RANDOM BYTES, que serão nossa token, no final das contas.... --> o segundo argumento é uma callback FUNCTION que é executada APÓS TEREM SIDO CRIADOS OS 32 BYTES aleatórios...

    if(err) {

      console.log(err);
      req.flash('error', err);
      res.redirect('/reset-password');
    } else {



      
    }

  }) 
















--------------> ok... mas se entrarmos nos 'else block',

ISSO SIGNIFICA QUE 


ESTAMOS 

COM 



1 'TOKEN', 

1 

'BUFFER' de 

btes, na verdade... ------> NÓS VAMOS TER, NO FINAL DAS CONTAS, 1 'VALID BUFFER'... --> AÍ, A PARTIR 

DESSE 


VALID BUFFER,

PODEMOS 



FAZER O GENERATE DE UMA 'token' (const token) 

 

 POR MEIO DO SIMPLES 


 CALL 




de 

'buffer.toString()'...










EX:







exports.postResetPassword = (req, res, next) => { //para ENVIAR 1 EMAIL COM UM LINK DE RESET PASSWORD, PRIMEIRAMENTE PRECISMAOS __ CRIAR UMA __ UNIQUE TOKEN para esse pedido do user... --> aí, essa TOKEN __ VAI SER ARMAZENADA NA NOSSA DATABSE E ENTÃO ___ INCORPORADA__ AO LINK QUE COLOCAREMOS NESSE EMAIL.. (mais tarde, o TOKEN nesse email SERÁ _VERIFICADO__ por nosso nodeapp, PARA __ ASSEGURAR__ QUE NOSSO LINK DE 'RESET PASSWORD' foi recebido PELO __DONO DO EMAIL DA CONTA, O EFETIVO PROPRIETÁRIO DA CONTA...)


  crypto.randomBytes(32, (err, buffer) => { ///USADO PARA CRIAR 32 RANDOM BYTES, que serão nossa token, no final das contas.... --> o segundo argumento é uma callback FUNCTION que é executada APÓS TEREM SIDO CRIADOS OS 32 BYTES aleatórios...

    if(err) {

      console.log(err);
      req.flash('error', err);
      res.redirect('/reset-password');
    } else {


      const token = buffer.toString(); ////EIS O CÓDIGO EM QUESTÃO.


      
    }

  }) 





  -------------------------------





  EX:








  exports.postResetPassword = (req, res, next) => { //para ENVIAR 1 EMAIL COM UM LINK DE RESET PASSWORD, PRIMEIRAMENTE PRECISMAOS __ CRIAR UMA __ UNIQUE TOKEN para esse pedido do user... --> aí, essa TOKEN __ VAI SER ARMAZENADA NA NOSSA DATABSE E ENTÃO ___ INCORPORADA__ AO LINK QUE COLOCAREMOS NESSE EMAIL.. (mais tarde, o TOKEN nesse email SERÁ _VERIFICADO__ por nosso nodeapp, PARA __ ASSEGURAR__ QUE NOSSO LINK DE 'RESET PASSWORD' foi recebido PELO __DONO DO EMAIL DA CONTA, O EFETIVO PROPRIETÁRIO DA CONTA...)


  crypto.randomBytes(32, (err, buffer) => { ///USADO PARA CRIAR 32 RANDOM BYTES, que serão nossa token, no final das contas.... --> o segundo argumento é uma callback FUNCTION que é executada APÓS TEREM SIDO CRIADOS OS 32 BYTES aleatórios...

    if(err) {

      console.log(err);
      req.flash('error', err);
      res.redirect('/reset-password');
    } else {

        const token = buffer.toString(); ///vai gerar 1 TOKEN a partir dos dados BRUTOS de nosso buffer, que é obtido pelo MÉTODO 'crypto.randomBytes()' (e armazenado naquela const de 'buffer', de sua callback function)....



    }

  }) 
















--> MAS É CLARO QUE NÃO TERMINAMOS... -> não terminamos pq 



aquele método '.toString()'


EXIGE 

O PASS DE UM PARÂMETRO... --> vamos passar 


'hex',




JUSTAMENTE PQ 


___  BUFFERS SEMPRE SÃO 'HEXADECIMAL' (ESSE É SEU FORMATO),



E 


ESSE MÉTODO '.toString()' PRECISA DE UMA __ INFO __ PARA 

SABER 

QUE 



VAI TER DE CONVERTER HEXADECIMAL CHARACTERS,





SÓ PARA QUE ELE SAIBA QUE VAMOS QUERER CONVERTER 'HEXADECIMAL CHARACTERS' 


EM 

CARACTERES 
ASCII NORMAIS...








-> é por isso que escrevemos assim:



const token = buffer.toString('hex');
















EX(código completo):











exports.postResetPassword = (req, res, next) => { //para ENVIAR 1 EMAIL COM UM LINK DE RESET PASSWORD, PRIMEIRAMENTE PRECISMAOS __ CRIAR UMA __ UNIQUE TOKEN para esse pedido do user... --> aí, essa TOKEN __ VAI SER ARMAZENADA NA NOSSA DATABSE E ENTÃO ___ INCORPORADA__ AO LINK QUE COLOCAREMOS NESSE EMAIL.. (mais tarde, o TOKEN nesse email SERÁ _VERIFICADO__ por nosso nodeapp, PARA __ ASSEGURAR__ QUE NOSSO LINK DE 'RESET PASSWORD' foi recebido PELO __DONO DO EMAIL DA CONTA, O EFETIVO PROPRIETÁRIO DA CONTA...)


  crypto.randomBytes(32, (err, buffer) => { ///USADO PARA CRIAR 32 RANDOM BYTES, que serão nossa token, no final das contas.... --> o segundo argumento é uma callback FUNCTION que é executada APÓS TEREM SIDO CRIADOS OS 32 BYTES aleatórios...

    if(err) {

      console.log(err);
      req.flash('error', err);
      res.redirect('/reset-password');
    } else {

        const token = buffer.toString('hex'); ///vai gerar 1 TOKEN a partir dos dados BRUTOS de nosso buffer, que é obtido pelo MÉTODO 'crypto.randomBytes()' (e armazenado naquela const de 'buffer', de sua callback function)....



    }

  }) 














  -------> CERTO... TEMOS UMA TOKEN.








AGORA TEMOS QUE:



1) ARMAZENAR ESSA TOKEN NA DATABASE....







2) INCLUIR ESSA TOKEN NO LINK QUE VAMOS ENVIAR NAQUELE EMAIL...

















--> OK.. MAS QUANTO AO STORE NA DATABASE,



VAMOS __ QUERER__ QUE ESSA TOKEN _ SEJA __ ARMAZENADA __DENTRO DO OBJETO/document 'user',


JUSTAMENTE PQ ___ ESSA TOKEN _ DEVE PERTENCER __ SOMENTE A ELE... (belongs to that user)...











----> PARA ISSO,
 




PRECISAMOS PRIMEIRAMENTE IR ATÉ O NOSSO MODEL DE 'user'


E AÍ 




ADICIONAR 

2 NOVOS FIELDS_ _...









-----> PROFESSOR VAI ADICIONAR 1 FIELD DE 

'resetToken',


E AÍ 




VAI ASSIGNAR UM TYPE DE 'String'...  ------> IMPORTANTE!!!! --> 




O TYPE DAS TOKENS __ NÃO É OBRIGATÓRIO, O SET 

DO TYPE 




DOS VALORES ARMAZENADOS NESSA STRING NÃO PRECISA SER OBRIGATORIAMENTE 'string',

ISSO 

PQ __  __ NEM SEMPRE _ ESSA 

TOKEN __ FICARÁ
 
  



  DENTRO DO OBJETO USER.... ESSA 'resetToken' só ficará DENTRO DO OBJETO 'user'



  ___ SE AQUELE USER __ 



  TIVER REQUISITADO 1 RESET... 



   









   FICA TIPO ASSIM:









  

  
const mongoose = require('mongoose');

const Schema = mongoose.Schema;


const Order = require('../models/order');




const userSchema = new Schema({


  resetToken: String,  //////EIS O CO´DIGO EM QUESTÃO. 

  email: {
    type: String,
    required: true,
  },

  password: {
    type: String,
    required: true
  },

  cart: { products: [
    {
      productId: { type: Schema.Types.ObjectId, 
        ref: 'Product', /////AQUI DEFINIMOS UMA RELATION/reference AO MODEL/COLLECTION de 'products'...
        required: true },
      quantity: { type: Number, required: true },
    },
  ],
}
}
);








-----> CERTO... 






ALÉM 

DESSE 



'resetToken',


VAMOS TER TAMBÉM UM FIELD DE 

'resetTokenExpiration',


E 

ESSE 

FIELD 

SERÁ 

DE 

TYPE 


'Date' (um type novo....)











ex:










const mongoose = require('mongoose');

const Schema = mongoose.Schema;


const Order = require('../models/order');




const userSchema = new Schema({


  resetToken: String,  

  resetTokenExpiration: Date, //////EIS O CO´DIGO EM QUESTÃO. 

  email: {
    type: String,
    required: true,
  },

  password: {
    type: String,
    required: true
  },

  cart: { products: [
    {
      productId: { type: Schema.Types.ObjectId, 
        ref: 'Product', /////AQUI DEFINIMOS UMA RELATION/reference AO MODEL/COLLECTION de 'products'...
        required: true },
      quantity: { type: Number, required: true },
    },
  ],
}
}
);






-----------------------------------------





E AGORA, ISSO FEITO,

VAMOS QUERER __ ARMAZENAR__ ESSA 

TOKEN __ 

LÁ 



NO 


'USER' 
QUE 

NÓS PRETENDEMOS RESETTAR/RESETTAR O PASSWORD...









--> PARA ISSO, VOLTAMOS AO CONTROLLER de 'postResetPassword'....








Ex (TENTEI ESCREVER MEU CÓDIGO ASSIM):












exports.postResetPassword = (req, res, next) => { //para ENVIAR 1 EMAIL COM UM LINK DE RESET PASSWORD, PRIMEIRAMENTE PRECISMAOS __ CRIAR UMA __ UNIQUE TOKEN para esse pedido do user... --> aí, essa TOKEN __ VAI SER ARMAZENADA NA NOSSA DATABSE E ENTÃO ___ INCORPORADA__ AO LINK QUE COLOCAREMOS NESSE EMAIL.. (mais tarde, o TOKEN nesse email SERÁ _VERIFICADO__ por nosso nodeapp, PARA __ ASSEGURAR__ QUE NOSSO LINK DE 'RESET PASSWORD' foi recebido PELO __DONO DO EMAIL DA CONTA, O EFETIVO PROPRIETÁRIO DA CONTA...)


  const { email } = req.body;




  crypto.randomBytes(32, (err, buffer) => { ///USADO PARA CRIAR 32 RANDOM BYTES, que serão nossa token, no final das contas.... --> o segundo argumento é uma callback FUNCTION que é executada APÓS TEREM SIDO CRIADOS OS 32 BYTES aleatórios...

    if(err) {

      console.log(err);
      req.flash('error', err);
      res.redirect('/reset-password');
    } else {

        const token = buffer.toString('hex'); 
             
             User.findOne({email: email}).then(
               (user) => {


                  if(!user) {
                        req.flash('error', 'No User found for that email. Please input a different email whose password you want to reset.')

                        res.redirect('/reset-password');

                  } else {

                        user.resetToken = token;


                        user.save();
                  }

               }
             )
             .catch(
               (err) => {
                 console.log(err);
               }
             )


    }

  }) 







};





---------------------------------


OK... DEU CERTO... CONSEGUI DISPLAYAR A MESSAGE 

DE 

ERROR 



de 


''

No User found for that email. Please input a different email whose password you want to change.


''





-----------------------------------------










--> agora vou testar o case de 


'EXISTE UM USER COM ESSE EMAIL NA DATABASe'....








--> OK.... DEU CERTO.



AGORA 1 RESET TOKEN REALMENTE É DEFINIDO 

LÁ 

NA NOSSA DATABASe,




A PARTIR DESTE CÓDIGO:












exports.postResetPassword = (req, res, next) => {
  //para ENVIAR 1 EMAIL COM UM LINK DE RESET PASSWORD, PRIMEIRAMENTE PRECISMAOS __ CRIAR UMA __ UNIQUE TOKEN para esse pedido do user... --> aí, essa TOKEN __ VAI SER ARMAZENADA NA NOSSA DATABSE E ENTÃO ___ INCORPORADA__ AO LINK QUE COLOCAREMOS NESSE EMAIL.. (mais tarde, o TOKEN nesse email SERÁ _VERIFICADO__ por nosso nodeapp, PARA __ ASSEGURAR__ QUE NOSSO LINK DE 'RESET PASSWORD' foi recebido PELO __DONO DO EMAIL DA CONTA, O EFETIVO PROPRIETÁRIO DA CONTA...)

  crypto.randomBytes(32, (err, buffer) => {
    ///USADO PARA CRIAR 32 RANDOM BYTES, que serão nossa token, no final das contas.... --> o segundo argumento é uma callback FUNCTION que é executada APÓS TEREM SIDO CRIADOS OS 32 BYTES aleatórios...

    if (err) {
      console.log(err);
      req.flash('error', err);
      res.redirect('/reset-password');
    } else {
      const token = buffer.toString('hex'); ///vai gerar 1 TOKEN a partir dos dados BRUTOS de nosso buffer, que é obtido pelo MÉTODO 'crypto.randomBytes()' (e armazenado naquela const de 'buffer', de sua callback function)....
      ///OBS: PASSAMOS 'hex' a 'toString()' PARA INFORMAR ESSE MÉTODO DE QUE __ VAMOS QUERER __ CONVERTER 'hexadecimal characters' (todos buffers são nesse formato) PARA __ CARACTERES ASCII NORMAIS...

      User.findOne({ email: email })
        .then((user) => {
          if (!user) {
            req.flash(
              'error',
              'No User found for that email. Please input a different email whose password you want to change.'
            );
            res.redirect('/reset-password');
          } else {
            user.resetToken = token;
            user.save().then(
              (result) => {
                    res.redirect('/reset-password');
              }
            )
          }
        })
        .catch((err) => {
          console.log(err);
        });
    }
  });






  ----------------------







  --> OK... AGORA SÓ NOS RESTA:









  1) COLOCAR ESSE TOKEN __ NO LINK naquele EMAIL QUE É ENVIADO AO NOSSO USER.... (Como query params desse email...)








  2) VERIFICAR ESSE LINK, COM A TOKEN,

  EM OUTRA ROUTE/VIEW DE NOSSO APP,




  em que vamos extrair 
  

  'req.query',

  ou algo assim...




  (e aí vamos CHECAR se o valor dessa query É IGAUL AO VALOR do 'resetToken' armazenado lá na nossa database...)












  CERTO... AÍ SÓ VAI FALTAR O ASPECTO da 'expiryDate' 




em cada 'user',

que 



eu não sei como será implementado exatamente...








VAI FICANDO TIPO ASSIM:













exports.postResetPassword = (req, res, next) => {
  //para ENVIAR 1 EMAIL COM UM LINK DE RESET PASSWORD, PRIMEIRAMENTE PRECISMAOS __ CRIAR UMA __ UNIQUE TOKEN para esse pedido do user... --> aí, essa TOKEN __ VAI SER ARMAZENADA NA NOSSA DATABSE E ENTÃO ___ INCORPORADA__ AO LINK QUE COLOCAREMOS NESSE EMAIL.. (mais tarde, o TOKEN nesse email SERÁ _VERIFICADO__ por nosso nodeapp, PARA __ ASSEGURAR__ QUE NOSSO LINK DE 'RESET PASSWORD' foi recebido PELO __DONO DO EMAIL DA CONTA, O EFETIVO PROPRIETÁRIO DA CONTA...)

  const { email } = req.body;

  crypto.randomBytes(32, (err, buffer) => {
    ///USADO PARA CRIAR 32 RANDOM BYTES, que serão nossa token, no final das contas.... --> o segundo argumento é uma callback FUNCTION que é executada APÓS TEREM SIDO CRIADOS OS 32 BYTES aleatórios...

    if (err) {
      console.log(err);
      req.flash('error', err);
      res.redirect('/reset-password');
    } else {
      const token = buffer.toString('hex'); ///vai gerar 1 TOKEN a partir dos dados BRUTOS de nosso buffer, que é obtido pelo MÉTODO 'crypto.randomBytes()' (e armazenado naquela const de 'buffer', de sua callback function)....
      ///OBS: PASSAMOS 'hex' a 'toString()' PARA INFORMAR ESSE MÉTODO DE QUE __ VAMOS QUERER __ CONVERTER 'hexadecimal characters' (todos buffers são nesse formato) PARA __ CARACTERES ASCII NORMAIS...

      User.findOne({ email: email })
        .then((user) => {
          if (!user) {
            req.flash(
              'error',
              'No User found for that email. Please input a different email whose password you want to change.'
            );
            res.redirect('/reset-password');
          } else {
            user.resetToken = token;
            user.save().then(
              (result) => {
                    res.redirect('/reset-password');
                    transporter.sendMail({
                      to: email, ///////EIS O CÓDIGO EM QUESTÃO.
                      from: 'arthur.panazolo@acad.pucrs.br',
                      subject: 'Reset Password Request',
                      html: `<h1>Here's your password reset link: ${'' + token} </h1>`,
                    });
              }
            )
          }
        })
        .catch((err) => {
          console.log(err);
        });
    }
  });







  ----------------------------------------------






--> precisamos de uma view para RESETTAR O PASSWORD, 1 route 


que 
realmente faça isso...











--> continuando a aula do professor:



ele também escreveu 



'User.findOne({email: req.body.email})',






para conseguir o 


USER 


desejado...








-----> certo.... -_> vamos usar um then block 




para então 








FAZER GET DO USER,





e aí 


vamos 


colocar aquele 



'if(!user)',


CASE 
DE 

NÃO TER 1 USER... ----> PROFESSOR FEZ A MESMA COISA QUE EU, 

ELE 



FLASHOU UM ERROR DE 



'No account with that email found',




e aí 


ELE 

ENVIA UM REDIRECT 

À ROUTE DE 'reset'...






TIPO ASSIM:






 User.findOne({ email: email })
        .then((user) => {
          if (!user) {
            req.flash(
              'error',
              'No User found for that email. Please input a different email whose password you want to change.'
            );
            res.redirect('/reset-password');














        --> CERTO... AÍ TEMOS O 'ELSE BLOCK'...











--> nesse ELSE BLOCK, vamos colocar 



'user.resetToken = token',







___ MAS O PROFESSOR TAMBÉM __ VAI QUERER __ SETTAR O 



'user.resetTokenExpiration',





QUE ELE VAI DEFINIR COMO 



sendo igual a 


'Date.now() + 1 hora'








('Date.now()' SEMPRE NOS DÁ O 'CURRENT DAY AND TIME', a que vamos acrescer 1 hora, para ficar 1 hora de duração essa TOKEN de password reset....)










OK.........








--> MAS 1 PROBLEMA É QUE __ ESSA HORA TEM QUE __ SER EXPRESSA EM MILISSEGUNDOS... --> por isso 

escrevemos 




3600000....





VAI FICANDO ASSIM:










exports.postResetPassword = (req, res, next) => {
  //para ENVIAR 1 EMAIL COM UM LINK DE RESET PASSWORD, PRIMEIRAMENTE PRECISMAOS __ CRIAR UMA __ UNIQUE TOKEN para esse pedido do user... --> aí, essa TOKEN __ VAI SER ARMAZENADA NA NOSSA DATABSE E ENTÃO ___ INCORPORADA__ AO LINK QUE COLOCAREMOS NESSE EMAIL.. (mais tarde, o TOKEN nesse email SERÁ _VERIFICADO__ por nosso nodeapp, PARA __ ASSEGURAR__ QUE NOSSO LINK DE 'RESET PASSWORD' foi recebido PELO __DONO DO EMAIL DA CONTA, O EFETIVO PROPRIETÁRIO DA CONTA...)

  const { email } = req.body;

  crypto.randomBytes(32, (err, buffer) => {
    ///USADO PARA CRIAR 32 RANDOM BYTES, que serão nossa token, no final das contas.... --> o segundo argumento é uma callback FUNCTION que é executada APÓS TEREM SIDO CRIADOS OS 32 BYTES aleatórios...

    if (err) {
      console.log(err);
      req.flash('error', err);
      res.redirect('/reset-password');
    } else {
      const token = buffer.toString('hex'); ///vai gerar 1 TOKEN a partir dos dados BRUTOS de nosso buffer, que é obtido pelo MÉTODO 'crypto.randomBytes()' (e armazenado naquela const de 'buffer', de sua callback function)....
      ///OBS: PASSAMOS 'hex' a 'toString()' PARA INFORMAR ESSE MÉTODO DE QUE __ VAMOS QUERER __ CONVERTER 'hexadecimal characters' (todos buffers são nesse formato) PARA __ CARACTERES ASCII NORMAIS...

      User.findOne({ email: email })
        .then((user) => {
          if (!user) {
            req.flash(
              'error',
              'No User found for that email. Please input a different email whose password you want to change.'
            );
            res.redirect('/reset-password');
          } else {
            user.resetToken = token;
            user.resetTokenExpiration = Date.now() + 3600000;
            user.save().then(
              (result) => {
                    res.redirect('/reset-password');
                    transporter.sendMail({
                      to: email, ///////EIS O CÓDIGO EM QUESTÃO.
                      from: 'arthur.panazolo@acad.pucrs.br',
                      subject: 'Reset Password Request',
                      html: `<h1>Here's your password reset link: ${'' + token} </h1>`,
                    });
              }
            )
          }
        })
        .catch((err) => {
          console.log(err);
        });
    }
  });




-----------------------------------------






OK... DEPOIS DISSO, ELE ESCREVE 

o 


'user.save()',






PARA 


ENTÃO 




FAZERMOS O SEND DQUELE 'TOKEN RESET EMAIL'....











--> EU HAVIA ESCRITO ASSIM:







        user.save().then(
              (result) => {
                    res.redirect('/reset-password');
                    transporter.sendMail({
                      to: email, ///////EIS O CÓDIGO EM QUESTÃO.
                      from: 'arthur.panazolo@acad.pucrs.br',
                      subject: 'Reset Password Request',
                      html: `<h1>Here's your password reset link: ${'' + token} </h1>`,
                    });
              }
            )

  
  --------------------------------




  --> PROFESSOR NOS MOSTROU COMO ENVIAR EMAILS 




  NO ÚLTIMO MÓDULLO,




  e vamos fazer exatamente isso aqui... --> VAMOS ENVIAR 1 

  EMAIL 



  ao 

  'req.body.email' (email que estamos conseguindo da FORM...) 






  ------> NO CÓDIGO HTML,


PROFESSOR USA 


`` (backticks)


PARA 


AÍ 


ESCREVER 

MULTI-LINE STRINGS,



E TAMBÉM 

PARA 

INSERIR 


NOSSA TOKEN, QUE É 

UM VALOR DINÂMICO...






-------------------------



EX:


                      html: `<h1>Here's your password reset link: ${'' + token} </h1>`,









----> MAS PODEMOS FAZER MELHOR DO QUE ISSO... --_> PROFESSOR 


USOU UMA ANCHOR TAG no meio 


desse 


'<h1>',





PARA DEFINIR 1 LINK 




LEVANDO A UM LINK DE 


'http://localhost:3000/reset-password/SUATOKEN'....














OK..........
 

 FICOU TIPO ASSIM:








exports.postResetPassword = (req, res, next) => {
  //para ENVIAR 1 EMAIL COM UM LINK DE RESET PASSWORD, PRIMEIRAMENTE PRECISMAOS __ CRIAR UMA __ UNIQUE TOKEN para esse pedido do user... --> aí, essa TOKEN __ VAI SER ARMAZENADA NA NOSSA DATABSE E ENTÃO ___ INCORPORADA__ AO LINK QUE COLOCAREMOS NESSE EMAIL.. (mais tarde, o TOKEN nesse email SERÁ _VERIFICADO__ por nosso nodeapp, PARA __ ASSEGURAR__ QUE NOSSO LINK DE 'RESET PASSWORD' foi recebido PELO __DONO DO EMAIL DA CONTA, O EFETIVO PROPRIETÁRIO DA CONTA...)

  const { email } = req.body;

  crypto.randomBytes(32, (err, buffer) => {
    ///USADO PARA CRIAR 32 RANDOM BYTES, que serão nossa token, no final das contas.... --> o segundo argumento é uma callback FUNCTION que é executada APÓS TEREM SIDO CRIADOS OS 32 BYTES aleatórios...

    if (err) {
      console.log(err);
      req.flash('error', err);
      res.redirect('/reset-password');
    } else {
      const token = buffer.toString('hex'); ///vai gerar 1 TOKEN a partir dos dados BRUTOS de nosso buffer, que é obtido pelo MÉTODO 'crypto.randomBytes()' (e armazenado naquela const de 'buffer', de sua callback function)....
      ///OBS: PASSAMOS 'hex' a 'toString()' PARA INFORMAR ESSE MÉTODO DE QUE __ VAMOS QUERER __ CONVERTER 'hexadecimal characters' (todos buffers são nesse formato) PARA __ CARACTERES ASCII NORMAIS...

      User.findOne({ email: email })
        .then((user) => {
          if (!user) {
            req.flash(
              'error',
              'No User found for that email. Please input a different email whose password you want to change.'
            );
            res.redirect('/reset-password');
          } else {
            user.resetToken = token;
            user.resetTokenExpiration = Date.now() + 3600000; ///é o 'current day and time' + UMA HORA, pq vamos querer que essa token DURE UMA HORA... (3600000 milissegundos)
            user.save().then(
              (result) => {
                    res.redirect('/reset-password');
                    transporter.sendMail({
                      to: email, ///////EIS O CÓDIGO EM QUESTÃO.
                      from: 'arthur.panazolo@acad.pucrs.br',
                      subject: 'Reset Password Request',
                      html: `<h1>Here's your password reset link: <a href="http://localhost:3000/reset-password/${token}">"http://localhost:3000/reset-password/${token}"</a> </h1>`,
                    });
              }
            )
          }
        })
        .catch((err) => {
          console.log(err);
        });
    }
  });


  // res.redirect('/');

};














---------------------------------------------------------










CERTO... FOI EXATAMENTE O QUE EU FIZ, BASICAMENTE...












AGORA, NAQUELE VIEW 


de 



'reset-password/:token',



VAMOS __PROCURAR___ ESSA TOKEN __ NA DATABASE, PARA AÍ __ CONFIRMAR QUE __ ESSE 

LINK __ FOI REALMENTE ENVIADO POR NOSSO APP, A ESSE USER.... (pq só nós/o app saberemos o 

token...)






-----------------------------






FICOU ASSIM:












exports.postResetPassword = (req, res, next) => {
  //para ENVIAR 1 EMAIL COM UM LINK DE RESET PASSWORD, PRIMEIRAMENTE PRECISMAOS __ CRIAR UMA __ UNIQUE TOKEN para esse pedido do user... --> aí, essa TOKEN __ VAI SER ARMAZENADA NA NOSSA DATABSE E ENTÃO ___ INCORPORADA__ AO LINK QUE COLOCAREMOS NESSE EMAIL.. (mais tarde, o TOKEN nesse email SERÁ _VERIFICADO__ por nosso nodeapp, PARA __ ASSEGURAR__ QUE NOSSO LINK DE 'RESET PASSWORD' foi recebido PELO __DONO DO EMAIL DA CONTA, O EFETIVO PROPRIETÁRIO DA CONTA...)

  const { email } = req.body;

  crypto.randomBytes(32, (err, buffer) => {
    ///USADO PARA CRIAR 32 RANDOM BYTES, que serão nossa token, no final das contas.... --> o segundo argumento é uma callback FUNCTION que é executada APÓS TEREM SIDO CRIADOS OS 32 BYTES aleatórios...

    if (err) {
      console.log(err);
      req.flash('error', err);
      res.redirect('/reset-password');
    } else {
      const token = buffer.toString('hex'); ///vai gerar 1 TOKEN a partir dos dados BRUTOS de nosso buffer, que é obtido pelo MÉTODO 'crypto.randomBytes()' (e armazenado naquela const de 'buffer', de sua callback function)....
      ///OBS: PASSAMOS 'hex' a 'toString()' PARA INFORMAR ESSE MÉTODO DE QUE __ VAMOS QUERER __ CONVERTER 'hexadecimal characters' (todos buffers são nesse formato) PARA __ CARACTERES ASCII NORMAIS...

      User.findOne({ email: email })
        .then((user) => {
          if (!user) {
            req.flash(
              'error',
              'No User found for that email. Please input a different email whose password you want to change.'
            );
            res.redirect('/reset-password');
          } else {
            user.resetToken = token;
            user.resetTokenExpiration = Date.now() + 3600000; ///é o 'current day and time' + UMA HORA, pq vamos querer que essa token DURE UMA HORA... (3600000 milissegundos)
            user.save().then(
              (result) => {
                    res.redirect('/');
                    transporter.sendMail({
                      to: email, ///////EIS O CÓDIGO EM QUESTÃO.
                      from: 'arthur.panazolo@acad.pucrs.br',
                      subject: 'Reset Password Request',
                      html: `<h1>Here's your password reset link: <a href="http://localhost:3000/reset-password/${token}">"http://localhost:3000/reset-password/${token}"</a> </h1>`,
                    });
              }
            )
          }
        })
        .catch((err) => {
          console.log(err);
        });
    }
  });


  // res.redirect('/');

};






















---> AGORA PRECISAMOS CONTINUAR 



ESSE CREATE DA 'PAGE DE RESET'




LÁ NA PRÓXIMA AULA....