









-------> RESUMO DO MÓDULO:







NESSE MÓDULO, VIMOS ALGUNS 'ADVANCED AUTHENTICATION RELATED TOPICS',



PARTICULARMENTE:








1) PASSWORD RESETTING  -----> NÓS APRENDEMOS QUE __ 


O 'PASSWORD RESETTING' DEVE __ SER IMPLEMENTADO __ DE UMA __ MANEIRA ___ QUE 

__IMPEDE 'OTHER USERS' __ DE RESETTAR__ RANDOM USER ACCOUNTS (users sacaneando outros users),



--> PARA CONSEGUIR IMPLEMENTAR ESSA MANEIRA DE EVITAR OS USERS DE SACANEAREM, 
IMPLEMENTAMOS AQUELE 'SHORT LIVED PASSWORD TOKEN/resetToken',  ___ QUE É 



'random, unguessable e UNIQUE'...  








--> ESSA TOKEN __ É TEMPORÁRIA__ JUSTAMENTE __ PARA EVITAR_ _ A CHANCE 

DE 
ELA __ SER 'GENERATED BY SOME BRUTE FORCE ATTACK'.... (calculadoras),




E É POR ISSO QUE 

 

 __ A RESET__ TOKEN___ É UM ÓTIMO MECANISMO PARA IDENTIFICAR O USER A QUE 


 ENVIAMOS/VAMOS QUERER RESETTAR O PASSWORD...





 ----> A TOKEN TEM QUE SER GERADA DE UMA MANEIRA QUE É 'RANDOM, UNGUESSABLE IN 
 A REASONABLE AMOUNT OF TIME E __UNIQUE__''' ------> FIZEMOS ISSO 

 NESSE MÓDULO,
 EXATAMENTE DESSA FORMA,



 COM O 


 'crypto' do nodejs...











TAMBÉM VIMOS:






2) AUTHORIZATION...




---> AUTHORIZATION É SOBRE O LOCKDOWN DE __ ACCESS_, 



GARANTIR ACCESS DE CERTAS FEATURES __ APENAS A ALGUNS USERS RESTRITOS... ----> POR EXEMPLO,



VOCÊ, CONSUMIDOR, PODE __ENTRAR NA CONTA DO UDEMY __ E COMPRAR CURSOS,


MAS __ NÃO PODE ___ ENTRAR 

NA CONTA DO PROFESSOR __ 

E 

EDITAR O CURSO DELE, pq 

VOCÊ __ NÃO É O CRIADOR_, E HÁ UM GUARDING MECHANISM PARA EVITAR QUE VOCê FAÇA ISSO...





-----> ESSA É A IDEIA DA 'AUTHORIZATION',

E É ISSO QUE FIZEMOS _ NESSE MÓDULO __, 

QUANDO ASSEGURAMOS QUE 



'ONLY USERS THAT CREATED A PRODUCT CAN ACTUALLY EDIT AND DELETE IT'...







-----> 'not every auth user should be able to do everything'....







--> OK, AUTHORIZATION É UMA PARTE ESSENCIAL DE TODOS APPS,
 



 E JUNTO DA AUTHENTICATION (que é o que garante que existam 
 
 users EM GERAL),


 VOCÊ 


 PODE CONTROLAR COM EXATIDÃO 'WHICH VISITOR CAN DO WHAT' 



 no seu webapp...