












-----> COM NOSSA BASIC VALIDATION 





COLOCADA LÁ 



NA ROUTE DE 


'auth.js',





__DEVEMOS __ DESCOBRIR ____ COMO 



PODEMOS ___ 


'CHECK FOR EQUALITY'


NOS NOSSOS 

PASSWORDS,






ou seja,


aquela 

feature 

de 



'CONFIRM PASSWORD'...













---------> ok... -> PARA ISSO,



É CLARO QUE 




VAMOS QUERER CHECAR 

 

 NOSSO FIELD 

 DE 

 'CONFIRM PASSWORDD',


 LÁ NA 

 VIEW 



 DE SIGNUP....










 --> É AQUELE CÓDIGO DE 







                 <div class="form-control">
                    <label for="password">Password</label>
                    <input type="password" name="password" id="password">
                </div>
                <div class="form-control">
                    <label for="confirmPassword">Confirm Password</label>
                    <input type="password" name="confirmPassword" id="confirmPassword">
                </div>














-------> VOLTAMOS AO 'auth.js' (route),




ÀQUELE CÓDIGO DE 


'SIGNUP',



que é este:











router.post(
  '/signup',
  check('email')
    .isEmail(), 


 check('password', 
 'Your password has to be made of only letters and numbers, and of more than 6 characters.'). ////EIS O CÓDIGO EM QUESTÃO. É ASSIM QUE ADICIONAMOS UMA ERROR MESSAGE 'GERAL' A UM DE NOSSOS CHECKS... 
 isLength({min: 6}).
 isAlphanumeric(),
  authController.postSignup
);





-----------------------------------------------








--------> LÁ 


NESSE LOCAL,


VAMOS 



ADICIONAR UM NOVO CHECK POR ALGO NO __BODY__ DO REQUEST,


por isso 


vamos 
usar 


'body()' em vez de 'check()'...










-------> para isso, escrevemos:













router.post(
  '/signup',
  check('email')
    .isEmail(), 


 check('password', 
 'Your password has to be made of only letters and numbers, and of more than 6 characters.'). ////EIS O CÓDIGO EM QUESTÃO. É ASSIM QUE ADICIONAMOS UMA ERROR MESSAGE 'GERAL' A UM DE NOSSOS CHECKS... 
 isLength({min: 6}).
 isAlphanumeric(),


    body('confirmPassword') //////////EIS O CÓDIGO EM QUESTÃO.



  authController.postSignup
);







--> TENTEI USAR 

'.equals(req.body.password)',



MAS ISSO NÃO FUNCIONARÁ....








ex:


https://stackoverflow.com/questions/50592190/how-to-use-equals-in-express-validator






ex:










You can not use it the way you want.

I'm guessing, in your form, or your request body, you have two fields:

password
confirmPassword
Which you are able to access via:

req.body.password
req.body.confirmPassword
If this is correct, then you will not able to verify using the check API that the two are equal since you don't have access to the req object at the point and time.

What you can do is write a wrapper middleware around check:

const check = require('express-validator/check')

exports.verifyPasswordsMatch = (req, res, next) => {
    const {confirmPassword} = req.body

    return check('password')
      .isLength({ min: 4 })
      .withMessage('password must be at least 4 characters')
      .equals(confirmPassword)
}
Then use the wrapper like so:

app.post('/users/signup', [
    check('email', 'email is not valid')
      .isEmail()
      .trim(),
    verifyPasswordsMatch,
  ], (req, res) => {
    ...



    -------------------------------





This isn't the best approach (and needs further code to work properly). express-validator has custom validators support, which have access to the req object. See stackoverflow.com/a/46013025/2083599 for details. – 
gustavohenke
 May 30 '18 at 6:24 





the custom validator worked and I think is overall a better approach. Thanks guys! –






https://stackoverflow.com/questions/46011563/access-request-body-in-check-function-of-express-validator-v4/46013025#46013025







37

After fiddling around for a while, I found a way to achieve this by using custom validators. The validator function passed to the custom method accepts an object containing the request body:

router.post(
    "/submit",
    [
    // Check validity
    check("email", "Invalid email").isEmail(),
    check("password", "invalid password")
        .isLength({ min: 4 })
        .custom((value,{req, loc, path}) => {
            if (value !== req.body.confirmPassword) {
                // trow error if passwords do not match
                throw new Error("Passwords don't match");
            } else {
                return value;
            }
        })
    ],
    (req, res, next) => {
        // return validation results
        const errors = validationResult(req);

        // do stuff
    });





------------------------------------------------









CERTO... CONSEGUI 




ESCREVER ALGO SIMILAR....




FICOU ASSIM:















router.post(
  '/signup',

  [
  check('email') 
    .isEmail(),



 check('password', 
 'Your password has to be made of only letters and numbers, and of 6 or more characters.'). ////EIS O CÓDIGO EM QUESTÃO. É ASSIM QUE ADICIONAMOS UMA ERROR MESSAGE 'GERAL' A UM DE NOSSOS CHECKS... 
 isLength({min: 6}).
 isAlphanumeric(),

  // body('confirmPassword').equals(req.body.password).withMessage('Passwords do not match.') /////APPROACH QUE NÃO FUNCIONA/NÃO FUNCIONARÁ. --> DEVEMOS USAR O APPROACH DO 'cusotm validator' visto logo abaixo...

  body('confirmPassword').custom(  ////EIS O CÓDIGO EM QUESTÃO.
        (value, {req, loc, path}) => {
                if(value !== req.body.confirmPassword) { 

                  throw new Error('Passwords do not match.');
                } else {
                  return value;
                }

        }
  )


      ]

,
 
  authController.postSignup
);










-----------------------




OK... AGORA É HORA DE VER A VERSÃO DO PROFESSOR...









--> o que ele escreve 

é 



'body('confirmPassword').custom()'










--> BEM, PARECE QUE ELE VAI __ ESCREVER EXATAMENTE O QUE EU ESCREVI....






ex:








body('confirmPassword').custom((value, {req, path, loc}) => {



            if (value !== req.body.password) {


                    throw new Error ('Passwords have to match!');
            } else {


                return true;
            }

}



)








----------> E É ASSIM QUE CHECAMOS POR 'EQUALITY BETWEEN TWO FIELDS'...











--------->  ok...







------> O NEGÓCIO ESTÁ FUNCIONANDO, NOSSA MENSAGEM DE ERRO E A VALIDATION...








----> SINAL DE QUE TUDO ESTÁ FUNCIONANDO...







--------------------------




MAS 



É LEGAL TBM MENCIONAR QUE __ NÓS __ NÃO 


ADICIONAMOS 

OS OUTROS 


VALIDATORS 


A ESSE 

CHECK 

de 



'body('confirmPassword').custom()' --> 



NÃO COLOCAMOS 

'isLength' 



nem 


'isAlphanumeric',



__EMBORA_ 




ESSES CHECKS TAMBÉM SEJAM APLICADOS 




A ESSE 



CHECK PELA EQUALITY (Desse custom aí),

ISSO 
PQ 


JÁ ESTAMOS CHECANDO POR ISSO 

LÁ 




NO 

CHECK DO 'password' mesmo,




____ POR ISSO IMPLICITAMENTE 




TEMOS ESSES 

CHECKS APLICADOS AO 

'confirmPassword'... 








OK.... --> AGORA ESTOU PROTEGIDO CONTRA 'ERRORS ON THIS SITE'...







--> É ASSIM QUE PODEOMS CHECK POR 

'PASSWORDS'


OU QUALQUER FIELD _ EQUALITY,

NO SEU APLICATIVO..


