






-------> AGORA QUE APRENDEMOS UM POUCO SOBRE __ COMO PODEMOS 


FAZER 


'VALIDATE DO USER INPUT'


antes 

de 

o handlar 

no nosso app,







____ DEVEMOS __ 



VER UM POUCO DO LADO 



DA 'USER EXPERIENCE'

do nosso app... --------> ISSO PQ AGORA,


SE 

NÓS 


TENTAMOS 


FAZER 

SIGNUP 

E 
FALHAMOS,



AS COISAS QUE DIGITAMOS NOS INPUT FIELDS 



___SÃO AUTOMATICAMENTE __ APAGADAS__..... --------> 












QUEREMOS QUE 



O EMAIL FIQUE 

INTACTO,





E SÓ OS PASSWORDS 


SEJAM APAGADOS.... -----> (ou então manter os passwords, também...)









--> OK, E COMO PODEMOS FAZER ISSO?









-> BEM, PARA ISSO DEVEMOS __ IR ATÉ __ OS NOSSOS CONTROLLERS,


CONTROLLERS

EM QUE 


REALMENTE 

HANDLAMOS 



AQUELES
 

 CASES 

 DE 

 SIGNUP E SIGNIN....





 ------> VAMOS COMEÇAR COM 



 O 


 SIGNUP DE USERS...









 ----> LÁ NÓS TEMOS ESTE CÓDIGO:








 
exports.postSignup = (req, res, next) => {
  const { email, password, confirmPassword } = req.body;


  const errors = validationResult(req); //ver aula 286 - SETUP BASIC VALIDATION... --> esse method de 'validationResult' SEMPRE VAI QUERER NOSSO OBJETO REQUEST, e só vai funcionar se estivermos usando o method/middleware de 'check' NAS NOSSAS ROUTES.... (check === OUTRO METHOD IMPORTADO DE 'express-validator'...)


  // console.log(errors.array()[0].msg);

  if(!errors.isEmpty()) { ///ou seja, se NOSSO OBJETO/ARRAY 'errors' __ NÃO ESTIVER EMPTY (ou seja, o email que o user inputtou é INVÁLIDO E GEROU ERRORS), vamos querer executar esse código do block...
///isEmpty é um method que existe DENTRO DO OBJETO RETORNADO por 'validationResult(req'), e vai sempre retornar OU TRUE OU FALSE (dependendo se estiver VAZIO ou PREENCHIDO COM ERRORS)...
    return res.status(422).render(
                //OU SEJA, SE NÓS/USER (validation failed)_ __ FALHARMOS_, VAMOS QUERER __ SIMPLESMENTE 'RENDER THE PAGE AGAIN'.. ( E NÃO VAMOS REDIRECIONAR, E SIM __ APENAS RENDERIZAR A PAGE DE 'SIGNUP' MAIS UMA VEZ)...

                'auth/signup', { ///mesma page de signup, vamos querer renderizar de novo nessa hipótese...
                  path: '/signup',
                  pageTitle: 'Signup',
                  errorMessage: errors.array()[0].msg ////alteração. (precisamos de '.array' nesse objeto 'errors' do express-validator PARA __CONESGUIR _ RETORNAR 1 ARRAY COM NOSSOS ERRORS...)
                }

    ); 

  }












--------> ESSE CÓDIGO AQUI:






  if(!errors.isEmpty()) { 
    return res.status(422).render(
              

                'auth/signup', { 
                  path: '/signup',
                  pageTitle: 'Signup',
                  errorMessage: errors.array()[0].msg
                }




------->  NESSE LOCAL,




__NÓS RENDERIZAMOS___ 

AQUELA 

PAGE de 'signup' 

DE NOVO, QUANDO É INPUTTADA



DATA INCORRETA...









--> BEM, NO RENDER DESSA VIEW NÓS REALMENTE INCLUÍMOS A ERROR MESSAGE,

MAS 

OS INPUT FIELDS 

AINDA 

ESTÃO 

SENDO APAGADOS...






--> É CLARO QUE PARA 

MANTER 


A DATA QUE O USER INPUTTOU,


NÓS DEVEOMS 




'SEND THIS DATA BACK as well'...










--> É POR ISSO QUE UMA BOA IDEIA, AQUI, É 




__ENVIAR_/escrever 

uma 

key,


no objeto 'data',





de 

'oldInput',






__ E ESSA KEY__ AÍ _ PODE SER 1 OBJETO.... --> NESSE OBJETO __ VAMOS COLOCAR __ OS 


VALORES __ 



DOS INPUTS 


QUE 


O USER 


DIGITOU ANTERIORMENTE...














TIPO ASSIM, TALVEZ:














  if(!errors.isEmpty()) { 
    return res.status(422).render(
               

                'auth/signup', { 
                  path: '/signup',
                  pageTitle: 'Signup',
                  errorMessage: errors.array()[0].msg,////alteração. (precisamos de '.array' nesse objeto 'errors' do express-validator PARA __CONESGUIR _ RETORNAR 1 ARRAY COM NOSSOS ERRORS...)
                  oldInput: {   ///usado para MANTER OS VALORES/INPUTS que o user enfiou nos input fields antes de tomar uma message de error na cara e ser redirecionado...
                      
                    email: email, 
                    password: password,
                  }             
                
                
                }

    ); 

  }


  --------------------------






OK.... AGORA PRECISAMOS FAZER O RENDER CONDICIONAL DESSES VALORES nos nossos input fields,

por 



meio 


DE NOSSA VIEW... (talvez if checks...)









----> CONSEGUI...






O CÓDIGO FICOU ASSIM:








exports.getSignupPage = (req, res, next) => {
  let message = req.flash('error');

  if (message.length > 0) {
    message = message[0];
  } else {
    message = null;
  }

  console.log(message);

  res.render('auth/signup', {
    path: '/signup',
    pageTitle: 'Signup',
    errorMessage: message,
    oldInput: []
  });
};








E 




ASSIM:






exports.postSignup = (req, res, next) => {
  const { email, password, confirmPassword } = req.body;


  const errors = validationResult(req); //ver aula 286 - SETUP BASIC VALIDATION... --> esse method de 'validationResult' SEMPRE VAI QUERER NOSSO OBJETO REQUEST, e só vai funcionar se estivermos usando o method/middleware de 'check' NAS NOSSAS ROUTES.... (check === OUTRO METHOD IMPORTADO DE 'express-validator'...)

  if(!errors.isEmpty()) { 
    return res.status(422).render(
               

                'auth/signup', { ///mesma page de signup, vamos querer renderizar de novo nessa hipótese...
                  path: '/signup',
                  pageTitle: 'Signup',
                  errorMessage: errors.array()[0].msg,
                  oldInput: {   ///usado para MANTER OS VALORES/INPUTS que o user enfiou nos input fields antes de tomar uma message de error na cara e ser redirecionado...
                      
                    email: email, 
                    password: password,
                  }             
                
                
                }

    ); 

  }


  if (password !== confirmPassword) {
    console.log('Passwords do not match.');
    req.flash('error', 'Passwords do not match, please try again.'); ////uso de 'req.flash()', pacote 'connect-flash'... --> sempre usar esse pacote COM NOSSAS SESSIONS, com 'express-session'...
    return res.redirect('/signup');
  }

  User.findOne({ email: email.toLowerCase() })
    .then((user) => {
      if (user) {
        req.flash(
          'error',
          'An User with that Email already exists, please choose another one.'
        );
        return res.redirect('/signup');
      } else {
        return bcrypt
          .hash(password, 12) ///ESSE 'HASHING' é uma TAREFA ASSÍNCRONA, e é por isso que VAMOS USAR UM THEN BLOCK, para chainar o resto de nosso código a essa tarefa... --> e é por isso que vamos escrever aquele 'return', para CONTINUAR COM A EXECUÇÃO DOS THEN BLOCKS RESTANTES...

          .then((hashedPassword) => {
            const user = new User({
              email: email.toLowerCase(),
              password: hashedPassword,
              cart: {
                products: [],
              },
            });
            return user.save()
          })
          .then((result) => {
            res.redirect('/login');
            return transporter.sendMail(
              //essa é a função que REALMENTE ENVIA 1 EMAIL/emails ao user/emails da web...
              {
                to: email, ///////EIS O CÓDIGO EM QUESTÃO.
                from: 'arthur.panazolo@acad.pucrs.br',
                subject: 'Signup succeeded',
                html: '<h1>You successfullly signed up!</h1>',
              }
            );
          });
      }
    })
    .catch((err) => {
      console.log(err);
    });
};










-----------------------



COM ESSES 2 CONTROLLERS 

E 

O 

'oldInput'


sendo 

passado como key neles,



conseguimos 


FAZER COM QUE O INPUT DO USER 


__PERMANEÇA__ DENTRO __ DOS INPUT FIELDS, QUANDO ELE FALHAR... (no caso, fiz isso ´so com o email, mas é óbvio que posso fazer a MESMA COISA COM  O FIELD DE PASSWORD, é muito simples)...












O VIEW FICOU ASSIM:






<%- include('../includes/head.ejs') %>
    <link rel="stylesheet" href="/css/forms.css">
    <link rel="stylesheet" href="/css/auth.css">
</head>
<body>
    <%- include('../includes/navigation.ejs'); %>
    <main>
        <% if (errorMessage) {  %>
            <div class="user-message user-message--error"><%= errorMessage %></div>
            <% } %>
            <form class="login-form" action="/signup" method="POST">
                <input type="hidden" value="<%= csrfToken %>" name="_csrf"> <!--  VOCÊ _ _DEVE UTILIZAR ESSE NAME de '_csrf' para esse INPUT FIELD DE TYPE 'hidden' SE VOCê QUER__ QUE A PACKAGE 'csurf' CONSIGA DETECTAR ESSE INPUT FIELD__ COMO AQUELE RESPONSÁVEL/SEGURADOR DE SUA CSRF TOKEN...-->
                <div class="form-control">
                    <label for="email">E-Mail</label>
                    <input type="email" name="email" id="email" 
                    <% if (oldInput !== []) {   %>
                            value="<%= oldInput.email %>"
                 <%    }  %> 
                    >
                </div>
                <div class="form-control">
                    <label for="password">Password</label>
                    <input type="password" name="password" id="password">
                </div>
                <div class="form-control">
                    <label for="confirmPassword">Confirm Password</label>
                    <input type="password" name="confirmPassword" id="confirmPassword">
                </div>
                <button class="btn" type="submit">Signup</button>
            </form>
    </main>
<%- include('../includes/end.ejs'); %>














--> E A PARTE IMPORTANTE É ESTA:




       <div class="form-control">
                    <label for="email">E-Mail</label>
                    <input type="email" name="email" id="email" 
                    <% if (oldInput !== []) {   %>
                            value="<%= oldInput.email %>"
                 <%    }  %> 
                    >
                </div>







    
    -------------------------





    SE O 'OLDINPUT'


    não for um 


    EMPTY ARRAY, 



    for um OBJETO tipo assim:


''''
    {

      email: xxxx,
      password: yyy
    },
''''




    ___ aí esse block será __TRUE__, o que 


    fará com que 

    PAREÇA O 


    'OLDINPUT'

    naquele 




    input tag, pq 

    temos 

    'value=xxxxx'....


  
----------------------------------






OK.... 





vou fazer a mesma coisa com o password.. 






EX:





<%- include('../includes/head.ejs') %>
    <link rel="stylesheet" href="/css/forms.css">
    <link rel="stylesheet" href="/css/auth.css">
</head>
<body>
    <%- include('../includes/navigation.ejs'); %>
    <main>
        <% if (errorMessage) {  %>
            <div class="user-message user-message--error"><%= errorMessage %></div>
            <% } %>
            <form class="login-form" action="/signup" method="POST">
                <input type="hidden" value="<%= csrfToken %>" name="_csrf"> <!--  VOCÊ _ _DEVE UTILIZAR ESSE NAME de '_csrf' para esse INPUT FIELD DE TYPE 'hidden' SE VOCê QUER__ QUE A PACKAGE 'csurf' CONSIGA DETECTAR ESSE INPUT FIELD__ COMO AQUELE RESPONSÁVEL/SEGURADOR DE SUA CSRF TOKEN...-->
                <div class="form-control">
                    <label for="email">E-Mail</label>
                    <input type="email" name="email" id="email" 
                    <% if (oldInput !== []) {   %>
                            value="<%= oldInput.email %>"
                 <%    }  %> 
                    >
                </div>
                <div class="form-control">
                    <label for="password">Password</label>
                    <input type="password" name="password" id="password"
                    <% if (oldInput !== []) {   %>
                        value="<%= oldInput.password %>"
             <%    }  %> 
                    >
                </div>
                <div class="form-control">
                    <label for="confirmPassword">Confirm Password</label>
                    <input type="password" name="confirmPassword" id="confirmPassword">
                </div>
                <button class="btn" type="submit">Signup</button>
            </form>
    </main>
<%- include('../includes/end.ejs'); %>












-----------------------------------------------














CERTO....






NÃO VOU FAZER ISSO COM O CONFIRMPASSWORD,

pq 




ele realmente deve ser 

confirmado pelo user.... (não deve ser mantido, no reload das pages....)
















OK... PROFESSOR FEZ EXATAMENTE O QUE EU FIZ...







-----------------------------










ok........ O QUE SOBROU?









------> agora se inputtamos algo que é incorreto, vamos 


ver que os valores são mantidos ao ser recarregada a página....








certo... próximo passo.



