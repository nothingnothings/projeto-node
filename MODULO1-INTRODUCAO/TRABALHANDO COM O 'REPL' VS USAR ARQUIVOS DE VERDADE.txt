








--> ANTES DE FINALMENTE 

DIVARMOS 



NO MÓDULO DO REFRESHER DE JAVASCRIPT,









_____ DEVEMOS __ VER AS 

2 DIFERENTES 

MANEIRAS 

DE 

EXECUTAR 


SEU CÓDIGO 

NODEJS... 



------------





1a maneira ----> 



O 

USO 


DE 

'REPL' ------> 









R 


E 


P 



L 








READ (user input, read user input)....





EVALUATE (evaluate, evaluate user input)....




PRINT (print, PRINT OUTPUT, print the RESULT)....





LOOP (loop, é o 'RETURNING' e o 'WAIT FOR NEW INPUT'...)




------------------------------------





--> CERTO....



E 

'REPL' É O QUE VOCê USA 

SE 

VOCÊ 

DIGITA 


'node'




LÁ NO SEU TERMINAL.... -------> 








TEREMOS UM 

'>'..... -----> 


AÍ PODEMOS EXECUTAR 


COMANDOS 

DO NODE,

como 


'console.log('Hello')...









----> 2 + 2...





-> TAMBÉM PODEMOS ESCREVER E INTERAGIR COM ARQUIVOS... -----> 




POR EXEMPLO,


PROFESSOR 
ESCREVE 



'const fs = require('fs');' 




----------------------------------




--------> AÍ, ISSO FEITO,

PODEMOS 



UTILIZAR ESSE IMPORT ___ PARA 'WRITE A FILE SYNCHRONOUSLY',


por meio 

de um código como 


'fs.writeFileSync()'...



--------------




-------> TUDO ISSO___ VAI FUNCIONAR__ AQUI... --> 



E ESSE, É CLARO,

É UM ENVIRONMENT 


___ EM QUE __ NÓS 


__NÃO FAZEMOS O STORE__ 


DE CODE EM ARQUIVOS (arquivos .js),



E SIM ___ 

'''ESCREVEMOS NOSSA NODE APPLICATION COM 


__CADA LINHA QUE ESCREVEMOS''''' --------> AS LINES 




_____NÃO TRABALHAM __ DE FORMA INDEPENDENTE UMA DA OUTRA.... -->



ISSO 

SIGNIFICA QUE 

O 
PROFESSOR 


PODE FACILMENTE 

USAR 


'fs.writeFileSync()'



DEPOIS 


DE IMPORTAR 

o 
'fs'... -------->









MAS, UMA VEZ QUE O PROFESSOR QUITE DESSE PROCESSO POR MEIO 

DE 

'
CTRL + C',




__ ELE ESTARÁ 


'''DONE''''''.... ----> isso quer 

dizer que 


ESSE 

CÓDIGO DELE __ NÃO ESTARÁ __ SALVO 


EM LUGAR ALGUM;



ISSO __NÃO SERÁ/NÃO É UM 


__ARQUIVO QUE ELE __ PODERÁ 


EXECUTAR DE NOVO... ----------> E É EXATAMENTE POR ISSO 




QUE 



ESSE 'REPL' 


É UM 

EXCELENTE PLAYGROUND... -------------> A ALTERNATIVA 


A 



RODAR CODES 


NO TERMINAL 

É 




______EXECUTAR___ FILES__, como fizemos antes... ------> 



E É 

EXATAMENTE 

O QUE 

FAREMOS AO LONGO DO RESTO DO CURSO... ---> ESSA É A ALTERNATIVA 

A 

USAR 

O 

'REPL'... 






-------> '''EXECUTE FILES'''' ---> ISSO É USADO COM APPS DE VERDADE (real apps)....









---> QUANDO NÓS EXECUTAMOS ARQUIVOS,



A VANTAGEM É __ QUE ___ NÓS 


___'WRITE OUR CODE IN ADVANCE',


E NÓS 




SEMPRE PODEMOS EXECUTAR NOSSO CÓDIGO (que ficará salvo).... --> 



E QUANDO NÓS CONSTRUÍMOS UM APP DE VERDADE,




É ÓBVIO QUE VAMOS QUERER SALVAR NOSSO CÓDIGO EM ARQUIVOS,



ARQUIVOS QUE PODEMOS DEPLOY,


E QUE 

PODEMOS 

SHARE COM OUTROS 

DEVELOPERS,




TAMBÉM 


PAUSAR O CÓDIGO PARA CONTINUAR DEPOIS...

('Predictable sequence of steps'..).








--> MAS O REPL NÃO É UMA PORCARIA:



podemos o utilizar COMO PLAYGROUND,


PARA RODAR ALGUNS COMANDOS,

TESTAR ALGUMAS COISAS, ETC... ---> OBVIAMENTE,




PODEMOS __ 


'EXECUTE CODE AS WE WRITE IT'... 







-----> ok, essas são as 2 maneiras de executar código nodejs...





---> É CLARO QUE VAMOS COM O APPROACH FILE-BASED,





MAS SEMPRE QUE O PROFESSOR FALAR 'REPL',


ele 

estará 


FALANDO 

DESSE 

'DIRECT INPUT WAY',

que o professor 



RECOMENDA __ PARA __ TRYING OUT SOME FEATURES,


MAS NÃO PARA ESCREVER 



APLICATIVOS DE VERDADE....







-------->  agora devemos começar o write de código com os próximos módulos...








EX:


Throughout this course, we'll write a lot of code. And to give you the possibility of comparing your code to mine (to find + fix potential errors in your code), you'll find multiple code snapshots per module attached to lectures in this course.

The last lecture of each module always holds all snapshots for the module, ordered chronologically.

You can view the code and compare it to yours or replace (parts of) your code with it temporarily (to narrow down the issue).

How do you use the attached code?

BEFORE we started using npm, you simply run the main .js file via node - just as we do it in the videos. Or you simply look into the code files to view + compare the code.

AFTER we started using npm, you need to run npm install inside of the extracted code attachment before you can run npm start to run the server.





-----------------------------------------

