 






 NÃO REINVENTE A RODA!










 --> AGORA QUE TIVEMOS UMA INTRODUÇÃO AO NODEJS 



 e 



 vimos como executar 



 códigos básicos....











 --> MAS PERCEBEMOS QUE O NODEJS POR SI SÓ NOS OBRIGA 

 A 




ESCREVER 

UM MONTE 

DE CÓDIGO 


  

  PARA FAZER COISAS SIMPLES,

  COISAS SIMPLES COMO 

  'EXTRACT THE BODY OF A INCOMING REQUEST'... -------->
   




   E VOCÊ TIPICAMENTE NÃO QUER FAZER ISSO;


   VOCÊ TIPICAMENTE 

   QUER FOCAR NA SUA 

   'BUSINESS LOGIC',




   você não quer ter que se importar 



   COM TAREFAS BANAIS COMO 'ROUTING' (executar co´digos diferentes para diferentes paths), 



 ou então 

  

  O  HANDLING DE INCOMING REQUESTS,






  e coisas assim.... 









  ---> PORTANTO, AGORA DAREMOS UMA OLAHDA NO EXPRESS.JS...










  ---> É UMA FRAMEWORK 



  QUE VOCÊ PODE INCORPORAR AO SEU PROJETO NODE 

  por meio 

  de 

  'npm install'....










  -------> ELE TE DEIXA 

  OUTSOURCEAR UM MONTE DAQUELE 'NITTY GRITTY WORK'

  e os detalhes 


  que não interessam...






  ----> ELE TE DÁ UM 'RULE SET' COM O QUAL VOCÊ FUNCIONA,

  E UM MONTE 
  DE UTILITY FUNCTIONS QUE TE AJUDAM 




  A ESCREVER 


  CÓDIGO MAIS LIMPO,

  e focar na sua core business....










  --> DENTRO DESSE MÓDULO, TEMOS:







  1) O QUE É O EXPRESS JS? 





  2) CONCEITO IMPORTANTE DO EXPRESS.JS: 


  MIDDLEWARE....... -----> VEREMOS O QUE É O MIDDLEWARE...





  3) VEREMOS COMO PODEMOS TRABALHAR COM REQUESTS E RESPONSES COM O EXPRESS.JS


  DE UMA MANEIRA BEM MAIS ELEGANTE E FÁCIL DO QUE a que USAMOS  até agora...








  4) VEREMOS O ROUTING,


  E COMO PODEMOS 

  EXECUTAR DIFERENTE CÓDIGO PARA DIFERENTES 'INCOMING REQUESTS' e paths/urls,


  SEM TER QUE 

  ESCREVER UM MONTE DE IF STATEMENTS....





  5) POR FIM, 

  VEREMOS COMO 

  RETORNAR 

  'HTML PAGES' ( ou seja,
  
  
  ARQUIVOS QUE PREPARAMOS )



  AOS NOSSOS CLIENTS,

  EM VEZ 

  DE TER QUE 



  ESCREVER __ CÓDIGO _ HTML NO NODEJS (como fizemos até agora, com 'res.write()')...


(BEM MAIS ÓPTIMO)...

