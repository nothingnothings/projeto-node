ACABAMOS COM ESSE MÓDULO...




APRENDEMOS MUITO SOBRE NODE.JS....





Aprendemos que ele usa uma SINTAXE REGULAR DO JAVASCRIPT, mas que 


ELE TAMBÉM USA SUAS PRÓPRIAS APIs, COMO A 'FILe system', por meio 


de __PACKAGES___ que podemos usar....






---> aprendemos, ademais, QUE O NODE.JS não suporta, obviamente, AS APIs 



___DEFAULT___ do browser... (como as APIs do DOM e do browser storage...) ---> ISSO é assim 

pq O NODE.JS NÃO RODA NO BROWSER, e sim em OUTRO AMBIENTE...







AMBIENTE DO NODE.JS ---> nossa máquina. Ou em qualquer máquina em que o node.js está instalado..





NÓS PODEMOS USAR NODE.JS não só para rodar utility scripts como 


AQUELE BEM DO INÍCIO, aquele que está em 


'files.js'  (aquele script do 'readFile()' - 'writeFile()'),




MAS TAMBÉM COMO PARA ___SETTAR ____ UM HTTP SERVER....



POdemos tanto settar esse http server POR CONTA PRÓPRIA, COM NOSSO PRÓPRIO CÓDIGO (e a sintaxe pura do node.js),


COMO TAMBÉM PODEMOS (na verdade, devemos) 

SETTAR ESSES SERVIDOR 

COM A AJUDA 

DAS MUITAS PACKAGES e o RICO ECOSSISTEMA do node.js,



EM QUE TEMOS VÁRIAS PACKAGES E FRAMEWORKS COMO 'EXPRESS'  (e outras)...






ESSAS FRAMEWORKS E PACKAGES NOS AJUDAM A FOCAR NA PARTE IMPORTANTE DOS NOSSOS CÓDIGOS,
 
 nossa 'business logic'; fazem com que deixemos de nos importar COM O PARSING DE DADOS e assim por diante... (coisas banais).








NÓS APRENDEMOS:


1) COMO SETTAR UM PEQUENO SERVIDOR QUE 


RETORNA 


ALGUNS ARQUIVOS HTML RENDERIZADOS NO 'SERVERSIDE' (ou 'por meio' do serverside)...


(ESSA FOI A PRIMEIRA METADE DESTE MÓDULO, QUE NOS ENSINOU A RETORNAR CÓDIGO HTML POR MEIO DO SERVERSIDE...

MAS ESSE MÉTODO É MEIO SUBÓTPTIMO)... 








2) COMO SETTAR AQUILO QUE CHAMAMOS DE 'REST API', 

EM QUE NÓS TEMOS VÁRIOS 'endpoints'/várias URLS que você suporta 

naquele servidor....


VÁRIAS URLS QUE FAZEM __DIFERENTES__ TAREFAS__ dependendo do método do http request que 

é enviado a elas (e nós programamos isso, a possibilidade de receber tal e tal tipo de http request,
 LÁ NO SERVERSIDE...) ---> DIFERENTE CÓDIGO É RODADO A PARTIR 
 DO MÉTODO DO HTTP REQUEST e da URL QUE ESSE REQUEST TENTOU OBJETIVAR...



 resumindo:



 é a combinação do 'PATH' e do 'MÉTODO' do request que interessa, na hora de programar essas respostas aos requests...





 -------------------------------------------------





3) APRENDEMOS SOBRE COMO ARMAZENAR DADOS EM UM DATABASE e então FAZER RETRIEVE desses 

dados que foram armazenados nessa database....




---------------------------------------------



COM TUDO ISSO, VOCÊ AGORA DEVE TER UMA BOA IDEIA DE QUE TIPO DE PROBLEMA QUE O NODE.JS resolve,


E UMA IDEIA DE COMO ELE GERALMENTE FUNCIONA...





Você sabe que ele é javascript, no final das contas, mas também 
sabe que 


ELE TE DEIXA FAZER COISAS ABSURDAS COM O JAVASCRIPT...





AGORA NÓS TEMOS UMA VISÃO AMPLA DO JAVASCRIPT....


More about NodeJS: https://academind.com/learn/node-js/

NodeJS Official Docs: https://nodejs.org/en/docs/