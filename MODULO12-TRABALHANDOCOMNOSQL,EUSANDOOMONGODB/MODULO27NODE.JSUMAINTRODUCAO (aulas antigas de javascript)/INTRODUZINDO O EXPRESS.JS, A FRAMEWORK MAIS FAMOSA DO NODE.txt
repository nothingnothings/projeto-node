FAZER TODO ESSE DATA PARSING e response GENERATION CODE 

POR CONTA PRÓPRIA É __ALGO BEM IRRITANTE__ 
E DIFÍCIL 


DE FAZER...


é 'hard to scale'....



---> professor diz que nosso código JÁ É BEM ILEGÍVEL com essa funcionalidade simples adicionada ao site, 

imagine algo mais complexo...
------




É EVIDENTE QUE PODERÍAMOS OPTIMIZAR ISSO, DE CERTA FORMA, mas 

você não vai querer construir 


aplicativos maiores com essa sintaxe horrível...



----> PROBLEMAS SIMILARES EXISTEM NO 'CLIENTSIDE JAVASCRIPT'...



----> lá no clientside javascript, se você tem apps muito complexos 

COM ACESSO MUITO GRANDE AOS SEUS DOCUMENTOS, APPS EM QUE VOCÊ CRIA 

ELEMENTOS E OS INSERE... 

Isso pode virar um problema grande bem rápido.



CUMBERSOME...




Entretanto,, no clientside javascript nós também aprendemos 

SOBRE REACT.JS e outros frameworks que nos ajudam 

COM ISSO....



NÓS TAMBÉM APRENDEMOS QUE EXISTEM LIBRARIES QUE TORNAM ALGUMAS 
MAIS SIMPLES E PRÁTICAS.





---> a mesma coisa existe para o node.js...





famosa library de node.js, EXPRESS.js...





----> NO FINAL DAS CONTAS, ISSO AQUI É UMA SIMPLES FRAMEWORK 

PARA NODE.JS...



Ela faz a construção de web apps SER BEM MAIS CLARA E FÁCIL...


NÓS INSTALAMOS O 'EXPRESS.JS' 



por meio 

do 

código 



'npm install express --save'....   no terminal...



MAS PARA DIGITAR ESSE CÓDIGO, PRIMEIRAMENTE PRECISAMOS TRANSFORMAR 

ESSE NOSSO PROJETO 


EM UM
 
 'NPM project'...




 Podemos fazer isso por meio do código 'npm init' no nosso terminal...




 Apertamos enter mil vezes...


 Agora temos um arquivo package.json...



 E agora podemos instalar DEPENDENCIES



 É O MESMO APPROACH E IDEIA GERAL QUE USAMOS NAQUELES PROJETOS CLIENTSIDE, com 
 o webpack...


lá, nos gerenciamos nosso projeto com o 'package.json' E COM UMAS PACKAGES NPM....




A ÚNICA DIFERENÇA É QUE AGORA NÓS NÃO VAMOS PRECISAR DE WEBPACK OU QUALQUER OUTRA TOOL....

Só vamos precisar do EXPRESS....



Não vamos precisar de nada disso pq ___O NODE JS___ SUPORTA ESSES PACKAGES ___NATIVAMENTE ___ (natively)....



NODE.JS SUPORTA ESSAS PACKAGES E NODE MODULES ___NATIVAMENTE___... (essa é a razão daquele folder se chamar 'node_modules'...)


 

 E NÓS NÃO PRECISAMOS DE WEBPACK OU QUALQUER OUTRA TOOL PARA COMBINAR TODAS ESSAS FERRAMENTAS/ARQUIVOS....



 -----------------------------------------------------------------



npm install express --save -------------> INSTALA O EXPRESS COMO UMA 'PRODUCTION DEPENDENCY'...





Aí você verá uma entrada 'dependencies' no 


PACKAGE.JSOn...



TAMBÉM VEREMOS O FOLDER 'NODE_MODULES' colocado na página do nosso projeto...




---> node.js é CAPAZ DE TRABALHAR NATIVAMENTE COM NODE_MODULES... você não precisa de ferramenta 
alguma para trabalhar com todos esses diferentes arquivos....





----> COM ISSO, O PROFESSOR VAI RENOMEAR O ARQUIVO 'app.js' com o qual estávamos mexendo 

como


'pure-node.js'...



-----------------------------



E AGORA ELE ADICIONARÁ UM NOVO ARQUIVO VAZIO 'app.js'...




Agora podemos começar com express.js, ver como settar um webserver com 

ele...




ELE FAZ COM QUE O 'RECEIVE' de incoming requests seja muito mais fácil, e as outgoing responses também...


 
--> veremos como fazer  OUTSOURCE DO NOSSO CÓDIGO HTML CODE EM DIFERENTES ARQUIVOS... (e não usar 

ele 'inline', como fizemos até agora,

como naquele trecho 

em que 


escrevemos 


`<h1>Hi, ${userName}</h1><form method="POST" action="/"><input name="username" type="text"><button type="submit">Send</button></form>`
)




VEREMOS COMO CONSTRUIR WEBAPPS COM ISSO...







