{"version":3,"sources":["components/Layout/Layout.js","components/Backdrop/Backdrop.js","components/Toolbar/Toolbar.js","components/Navigation/MobileToggle/MobileToggle.js","components/Logo/Logo.js","components/Navigation/NavigationItems/NavigationItems.js","components/Navigation/MainNavigation/MainNavigation.js","components/Navigation/MobileNavigation/MobileNavigation.js","components/Button/Button.js","components/Modal/Modal.js","components/ErrorHandler/ErrorHandler.js","components/Feed/Post/Post.js","components/Form/Input/Input.js","components/Form/Input/FilePicker.js","components/Image/Image.js","util/validators.js","util/image.js","components/Feed/FeedEdit/FeedEdit.js","components/Paginator/Paginator.js","components/Loader/Loader.js","pages/Feed/Feed.js","pages/Feed/SinglePost/SinglePost.js","pages/Auth/Auth.js","pages/Auth/Login.js","pages/Auth/Signup.js","App.js","index.js"],"names":["layout","props","react_default","a","createElement","react","className","header","mobileNav","children","backdrop","ReactDOM","createPortal","open","join","onClick","document","getElementById","toolbar","mobileToggle","onOpen","logo","navItems","id","text","link","auth","navigationItems","concat","Object","toConsumableArray","filter","item","isAuth","map","key","mobile","NavLink","to","exact","onChoose","onLogout","mainNavigation","MobileToggle_MobileToggle","onOpenMobileNav","Logo_Logo","NavigationItems_NavigationItems","mobileNavigation","onChooseItem","button","Link","design","mode","disabled","loading","type","modal","title","Button_Button","onCancelModal","onAcceptModal","acceptEnabled","isLoading","errorHandler","console","log","error","Backdrop_Backdrop","onHandle","Modal_Modal","message","post","_useState","useState","_useState2","slicedToArray","created","setCreated","useEffect","asyncToGenerator","regenerator_default","mark","_callee","userId","graphqlQuery","postUserIdResult","manipulatedPostUserIdResult","wrap","_context","prev","next","localStorage","getItem","query","variables","postId","fetch","method","headers","Content-Type","Authorization","token","body","JSON","stringify","sent","json","data","getCreationStatus","stop","author","date","onStartEdit","onDelete","input","label","htmlFor","control","valid","touched","required","value","placeholder","onChange","event","target","files","onBlur","rows","filePicker","image","style","backgroundImage","imageUrl","backgroundSize","contain","backgroundPosition","left","trim","length","config","isValid","min","max","isLetter","match","isEqualToPassword","originalPassword","email","test","generateBase64FromImage","imageFile","reader","FileReader","promise","Promise","resolve","reject","onload","e","result","onerror","err","readAsDataURL","POST_FORM","validators","content","FeedEdit","state","postForm","formIsValid","imagePreview","postInputChangedHandler","base64","_this","setState","prevState","_step","_iterator","_createForOfIteratorHelper","s","n","done","validator","f","updatedForm","objectSpread","defineProperty","inputName","t0","inputBlurHandler","cancelPostChangeHandler","onCancelEdit","acceptPostChangeHandler","onFinishEdit","prevProps","this","editing","selectedPost","imagePath","_id","Input_Input","bind","FilePicker","Image_Image","Component","paginator","currentPage","onPrevious","lastPage","onNext","loader","Feed","isEditing","posts","totalPosts","editPost","status","postPage","postsLoading","editLoading","statusLoading","loadPosts","direction","page","loadedPostsResult","manipulatedPostsResult","errors","Error","getPosts","totalItems","catchError","statusUpdateHandler","_callee2","updateStatusResult","_context2","preventDefault","newPostHandler","startEditPostHandler","find","cancelEditHandler","finishEditHandler","_callee3","postData","formData","imageSend","manipulatedImageSend","editAndAddResults","manipulatedEditAndAddResults","_context3","FormData","append","filePath","replace","updatePost","creator","createdAt","createPost","updatedPosts","updatedTotalPosts","findIndex","pop","unshift","statusInputChangedHandler","postCreator","updatedPostIndex","p","deletePostHandler","_callee4","deleteResult","manipulatedDeleteResult","_context4","_this2","then","res","getStatus","catch","_this3","ErrorHandler","Feed_FeedEdit_FeedEdit","onSubmit","Loader_Loader","textAlign","marginTop","Paginator_Paginator","Math","ceil","Post_Post","name","Date","toLocaleDateString","SinglePost","params","getPost","Login","loginForm","password","inputChangedHandler","Login_createForOfIteratorHelper","Auth_Auth","onLogin","Signup","signupForm","confirmPassword","Signup_createForOfIteratorHelper","color","App","showBackdrop","showMobileNav","authLoading","mobileNavHandler","isOpen","backdropClickHandler","logoutHandler","removeItem","loginHandler","authData","loginResult","manipulatedLoginResult","expiryDate","loginUser","setItem","getTime","toISOString","setAutoLogout","signupHandler","fetchedResponse","manipulatedFetchedResponse","history","milliseconds","setTimeout","remainingMilliseconds","routes","Switch","Route","path","render","Auth_Login","assign","Auth_Signup","Redirect","pages_Feed_Feed","Feed_SinglePost_SinglePost","Layout_Layout","Toolbar_Toolbar","MainNavigation_MainNavigation","MobileNavigation_MobileNavigation","withRouter","BrowserRouter","src_App_0"],"mappings":"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","file":"static/js/main.cb07fcf3.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\n\r\nimport './Layout.css';\r\n\r\nconst layout = (props) => {\r\n  return (\r\n    <Fragment>\r\n      <header className=\"main-header\">{props.header}</header>\r\n      {props.mobileNav}\r\n      <main className=\"content\">{props.children}</main>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\n\r\nexport default layout;","import React from 'react';\r\n\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './Backdrop.css';\r\n\r\nconst backdrop = (props) => {\r\n  return ReactDOM.createPortal( ///eu me lembro disto.\r\n    <div\r\n      className={['backdrop', props.open ? 'open' : ''].join(' ')}\r\n      onClick={props.onClick}\r\n    />,\r\n    document.getElementById('backdrop-root') ////e disto... (ver arquivo de 'index.html', sua estrutura......)\r\n  );\r\n};\r\n\r\n\r\nexport default backdrop;","import React from 'react';\r\n\r\nimport './Toolbar.css';\r\n\r\nconst toolbar = (props) => {\r\n  return <div className=\"toolbar\">{props.children}</div>;\r\n};\r\n\r\nexport default toolbar;\r\n","import React from 'react';\r\n\r\nimport './MobileToggle.css';\r\n\r\nconst mobileToggle = (props) => {\r\n  return (<button className=\"mobile-toggle\" onClick={props.onOpen}>\r\n    <span className=\"mobile-toggle__bar\" />\r\n    <span className=\"mobile-toggle__bar\" />\r\n    <span className=\"mobile-toggle__bar\" />\r\n  </button>\r\n  );\r\n};\r\n\r\n\r\nexport default mobileToggle;","import React from 'react';\r\n\r\nimport './Logo.css';\r\n\r\nconst logo = (props) => <h1 className=\"logo\">MessageNode</h1>;\r\n\r\nexport default logo;\r\n","import React from 'react';\r\n\r\nimport './NavigationItems.css';\r\n\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst navItems = [\r\n  { id: 'feed', text: 'Feed', link: '/', auth: true },\r\n  { id: 'login', text: 'Login', link: '/', auth: false },\r\n  { id: 'signup', text: 'Signup', link: '/signup', auth: false },\r\n];\r\n\r\nconst navigationItems = (props) => [\r\n  ///retorna um ARRAY  DE ELEMENTOS... SIM, ISSO É POSSÍVEL (ver aula 'entendendo o setup frontend...')\r\n\r\n  ...navItems\r\n    .filter((item) => item.auth === props.isAuth)\r\n    .map((item) => (\r\n      <li\r\n        key={item.id}\r\n        className={['navigation-item', props.mobile ? 'mobile' : ''].join(' ')}\r\n      >\r\n        <NavLink to={item.link} exact onClick={props.onChoose}>\r\n          {item.text}\r\n        </NavLink>\r\n      </li>\r\n    )),\r\n  props.isAuth && (\r\n    <li className={[\"navigation-item\", props.mobile ? 'mobile' : ''].join(' ')} key=\"logout\">\r\n      <button onClick={props.onLogout}>Logout</button>\r\n    </li>\r\n  ),\r\n];\r\n\r\nexport default navigationItems;\r\n","import React from 'react';\r\n\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport MobileToggle from '../MobileToggle/MobileToggle';\r\n\r\nimport Logo from '../../Logo/Logo';\r\n\r\nimport NavigationItems from '../NavigationItems/NavigationItems';\r\n\r\nimport './MainNavigation.css';\r\n\r\nconst mainNavigation = (props) => {\r\n  return (\r\n    <nav className=\"main-nav\">\r\n      <MobileToggle onOpen={props.onOpenMobileNav} />\r\n      <div className=\"main-nav__logo\">\r\n        <NavLink to=\"/\">\r\n          <Logo />\r\n        </NavLink>\r\n      </div>\r\n      <div className=\"spacer\" />\r\n      <ul className=\"main-nav__items\">\r\n        <NavigationItems isAuth={props.isAuth} onLogout={props.onLogout} />\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default mainNavigation;\r\n","import React from 'react';\r\n\r\nimport NavigationItems from '../NavigationItems/NavigationItems';\r\n\r\nimport './MobileNavigation.css';\r\n\r\nconst mobileNavigation = (props) => (\r\n  <nav className={['mobile-nav', props.open ? 'open' : ''].join(' ')}>\r\n    <ul\r\n      className={['mobile-nav__items', props.mobile ? 'mobile' : ''].join(' ')}\r\n    >\r\n      <NavigationItems\r\n        mobile\r\n        onChoose={props.onChooseItem}\r\n        isAuth={props.isAuth}\r\n        onLogout={props.onLogout}\r\n      />\r\n    </ul>\r\n  </nav>\r\n);\r\n\r\nexport default mobileNavigation;\r\n","import React from 'react';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './Button.css';\r\n\r\nconst button = (props) => {\r\n  return !props.link ? (\r\n    <button\r\n      className={[\r\n        'button',\r\n        `button--${props.design}`,\r\n        `button--${props.mode}`,\r\n      ].join(' ')}\r\n      onClick={props.onClick}\r\n      disabled={props.disabled || props.loading}\r\n      type={props.type}\r\n    >\r\n      {props.loading ? 'Loading...' : props.children}\r\n    </button>\r\n  ) : (\r\n    <Link\r\n      className={[\r\n        'button',\r\n        `button--${props.design}`,\r\n        `button--${props.mode}`,\r\n      ].join(' ')}\r\n      to={props.link}\r\n    >\r\n      {props.children}\r\n    </Link>\r\n  );\r\n};\r\n\r\n\r\n\r\nexport default button;","import React from 'react';\r\n\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport Button from '../Button/Button';\r\n\r\nimport './Modal.css';\r\n\r\nconst modal = (props) => {\r\n  return ReactDOM.createPortal(\r\n    <div className=\"modal\">\r\n      <header className=\"modal__header\">\r\n        <h1>{props.title}</h1>\r\n      </header>\r\n      <div className=\"modal__content\">{props.children}</div>\r\n      <div className=\"modal__actions\">\r\n        <Button design=\"danger\" mode=\"flat\" onClick={props.onCancelModal}>\r\n          Cancel\r\n        </Button>\r\n        <Button\r\n          mode=\"raised\"\r\n          onClick={props.onAcceptModal}\r\n          disabled={!props.acceptEnabled}\r\n          loading={props.isLoading}\r\n        >\r\n          Accept\r\n        </Button>\r\n      </div>\r\n    </div>, \r\n    document.getElementById('modal-root')\r\n  );\r\n};\r\n\r\n\r\n\r\n\r\n\r\nexport default modal;","import React, { Fragment } from 'react';\r\n\r\nimport Backdrop from '../Backdrop/Backdrop';\r\n\r\nimport Modal from '../Modal/Modal';\r\n\r\nconst errorHandler = (props) => {\r\n\r\n  console.log(props.error);\r\n\r\n  \r\n  return (\r\n    <Fragment>\r\n      {props.error && <Backdrop onClick={props.onHandle} />}\r\n      {props.error && (\r\n        <Modal\r\n          title=\"An Error Occurred\"\r\n          onCancelModal={props.onHandle}\r\n          onAcceptModal={props.onHandle}\r\n          acceptEnabled\r\n        >\r\n          <p>{props.error.message}</p>\r\n          \r\n        </Modal>\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default errorHandler;","import React from 'react';\r\n\r\nimport Button from '../../Button/Button';\r\n\r\nimport { Fragment } from 'react';\r\n\r\nimport { useEffect, useState } from 'react';\r\n\r\n// import Image from '../../Image/Image';\r\n\r\nimport './Post.css';\r\n\r\nconst post = (props) => {\r\n\r\n\r\n\r\n\r\n  const [created, setCreated] = useState(false);\r\n\r\n\r\n  // const[loadedPostData, setLoadedPostData] = useState(false);\r\n\r\n\r\n\r\n  // useEffect(() => {\r\n  \r\n  //   const creationStatus = editAndDeleteDisplayer();\r\n  //   console.log(creationStatus);\r\n  //    setCreated(creationStatus);\r\n  //   // setCreated(true);\r\n  //    console.log(created);\r\n  // }, [loadedPostData]);\r\n  \r\n\r\n\r\n\r\n  \r\n\r\n\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      // const postUserIdResult = await fetch(`http://localhost:8080/feed/post/buttons/${props.id}`, {\r\n\r\n      const userId = localStorage.getItem('userId');\r\n\r\n\r\n        const graphqlQuery = {\r\n          query: `\r\n         query getCreationStatusOperation ($userId: ID!, $postId: ID!) {\r\n            getCreationStatus(userId: $userId, postId: $postId) {\r\n                  created\r\n            }\r\n          } \r\n          `,\r\n          variables: {\r\n            userId: userId,\r\n            postId: props.id\r\n          }\r\n        }\r\n\r\n\r\n        const postUserIdResult = await fetch(`http://localhost:8080/graphql`, { ///versão graphql...\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${props.token}`,\r\n      },\r\n      body: \r\n      // JSON.stringify({\r\n      //   userId: props.userId,\r\n      // }),\r\n            JSON.stringify(graphqlQuery),\r\n    });\r\n    const manipulatedPostUserIdResult = await postUserIdResult.json();\r\n\r\n\r\n    // console.log(manipulatedPostUserIdResult);\r\n      // console.log(manipulatedPostUserIdResult.data.created);\r\n      // setLoadedPostData(true);\r\n\r\n\r\n    \r\n\r\n\r\n      setCreated(manipulatedPostUserIdResult.data.getCreationStatus.created);\r\n\r\n    })()\r\n\r\n  }, [])\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // const editAndDeleteDisplayer = async () => {\r\n  //   const postUserIdResult = await fetch(`http://localhost:8080/feed/post/buttons/${props.id}`, {\r\n  //     method: 'POST',\r\n  //     headers: {\r\n  //       'Content-Type': 'application/json',\r\n  //       'Authorization': `Bearer ${props.token}`,\r\n  //     },\r\n  //     body: JSON.stringify({\r\n  //       userId: props.userId,\r\n  //     }),\r\n  //   });\r\n\r\n\r\n  //   const manipulatedPostUserIdResult = await postUserIdResult.json();\r\n\r\n  //   console.log(manipulatedPostUserIdResult);\r\n  //     console.log(manipulatedPostUserIdResult.created);\r\n  //     setLoadedPostData(true);\r\n  //   return manipulatedPostUserIdResult.created;\r\n  // };\r\n\r\n  return (\r\n    <article className=\"post\">\r\n      <header className=\"post__header\">\r\n        <h3 className=\"post__meta\">\r\n          Posted by {props.author} on {props.date}\r\n        </h3>\r\n        <h1 className=\"post__title\">{props.title}</h1>\r\n      </header>\r\n      {/* <div className=\"post__image\">\r\n      <Image imageUrl={`http://localhost:8080/${props.image}`} contain />\r\n    </div> */}\r\n      {/* <div className=\"post__content\">{props.content}</div> */}\r\n      <div className=\"post__actions\">\r\n        <Button mode=\"flat\" link={props.id}>\r\n          View\r\n        </Button>\r\n        {created ? (\r\n          <Fragment>\r\n            <Button mode=\"flat\" onClick={props.onStartEdit}>\r\n              Edit\r\n            </Button>\r\n            <Button mode=\"flat\" design=\"danger\" onClick={props.onDelete}>\r\n              Delete\r\n            </Button>\r\n          </Fragment>\r\n        ) : null}\r\n      </div>\r\n    </article>\r\n  );\r\n};\r\n\r\nexport default post;\r\n","import React from 'react';\r\n\r\nimport './Input.css';\r\n\r\nconst input = (props) => {\r\n  return (<div className=\"input\">\r\n    {props.label && <label htmlFor={props.id}>{props.label}</label>}\r\n    {props.control === 'input' && (\r\n      <input\r\n        className={[\r\n          !props.valid ? 'invalid' : 'valid',\r\n          props.touched ? 'touched' : 'untouched',\r\n        ].join(' ')}\r\n        type={props.type}\r\n        id={props.id}\r\n        required={props.required}\r\n        value={props.value}\r\n        placeholder={props.placeholder}\r\n        onChange={(event) => {\r\n          return props.onChange(props.id, event.target.value, event.target.files);\r\n        }}\r\n        onBlur={props.onBlur}\r\n      />\r\n    )}\r\n    {props.control === 'textarea' && (\r\n      <textarea\r\n        className={[\r\n          !props.valid ? 'invalid' : 'valid',\r\n          props.touched ? 'touched' : 'untouched',\r\n        ].join(' ')}\r\n        id={props.id}\r\n        rows={props.rows}\r\n        required={props.required}\r\n        value={props.value}\r\n        onChange={(event) => {\r\n          props.onChange(props.id, event.target.value, event.target.files);\r\n        }}\r\n        onBlur={props.onBlur}\r\n      />\r\n    )}\r\n  </div>\r\n  )\r\n};\r\n\r\nexport default input;\r\n","import React from 'react';\r\n\r\nimport './Input.css';\r\n\r\nconst filePicker = (props) => {\r\n  return (\r\n    <div className=\"input\">\r\n      <label htmlFor={props.id}>{props.label}</label>\r\n      <input\r\n        className={[\r\n          !props.valid ? 'invalid' : 'valid',\r\n          props.touched ? 'touched' : 'untouched',\r\n        ].join(' ')}\r\n        type=\"file\"\r\n        id={props.id}\r\n        onChange={(event) => {\r\n          console.log(props.id, 'line', event.target.value, 'line', event.target.files)\r\n          props.onChange(props.id, event.target.value, event.target.files);\r\n        }}\r\n        onBlur={props.onBlur}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default filePicker;\r\n","import React from 'react';\r\n\r\nimport './Image.css';\r\n\r\nconst image = (props) => {\r\n  return (\r\n    <div\r\n      className=\"image\"\r\n      style={{\r\n        backgroundImage: `url('${props.imageUrl}')`,\r\n        backgroundSize: props.contain ? 'contain' : 'cover',\r\n        backgroundPosition: props.left ? 'left' : 'center',\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default image;\r\n","export const required = (value) => value.trim() !== '';\r\n\r\nexport const length = (config) => {\r\n  return (value) => {\r\n    let isValid = true;\r\n    if (config.min) {\r\n      isValid = isValid && value.trim().length >= config.min;\r\n    }\r\n    if (config.max) {\r\n      isValid = isValid && value.trim().length <= config.max;\r\n    }\r\n    return isValid;\r\n  };\r\n};\r\n\r\nexport const isLetter = (value) => {\r\n  let isValid = true;\r\n  if (!value.match(/^[A-Za-z]+$/)) {\r\n    console.log('INVALID');\r\n    isValid = false;\r\n  } else {\r\n    console.log('TEST');\r\n    return isValid;\r\n  }\r\n};\r\n\r\nexport const isEqualToPassword = (value, originalPassword) => {\r\n  let isValid = true;\r\n  if (value !== originalPassword) {\r\n    console.log('INVALID');\r\n    isValid = false;\r\n  } else {\r\n    console.log('TEST');\r\n    return isValid;\r\n  }\r\n};\r\n\r\nexport const email = (value) => {\r\n  return /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/.test(\r\n    value\r\n  );\r\n};\r\n","export const generateBase64FromImage = (imageFile) => {\r\n  const reader = new FileReader();\r\n\r\n  const promise = new Promise((resolve, reject) => {\r\n    reader.onload = (e) => resolve(e.target.result);\r\n    reader.onerror = (err) => reject(err);\r\n  });\r\n\r\n  reader.readAsDataURL(imageFile);\r\n  return promise;\r\n};\r\n","import React, { Component, Fragment } from 'react';\r\n\r\nimport Backdrop from '../../Backdrop/Backdrop';\r\n\r\nimport Modal from '../../Modal/Modal';\r\n\r\nimport Input from '../../Form/Input/Input';\r\n\r\nimport FilePicker from '../../Form/Input/FilePicker';\r\n\r\nimport Image from '../../Image/Image';\r\n\r\nimport { required, length, isLetter } from '../../../util/validators';\r\n\r\nimport { generateBase64FromImage } from '../../../util/image';\r\n\r\nconst POST_FORM = {\r\n  title: {\r\n    value: '',\r\n    valid: false,\r\n    touched: false,\r\n    validators: [required, \r\n      \r\n      length({ min: 6 }),\r\n      \r\n      \r\n      \r\n      isLetter],\r\n  },\r\n  image: {\r\n    value: '',\r\n    valid: false,\r\n    touched: false,\r\n    validators: [required],\r\n  },\r\n\r\n  content: {\r\n    value: '',\r\n    valid: false,\r\n    touched: false,\r\n    validators: [required, length({ min: 6 })],\r\n  },\r\n  id: {\r\n    value: '',\r\n    valid: true,\r\n    touched: true,\r\n\r\n  }\r\n};\r\n\r\nclass FeedEdit extends Component {\r\n  state = {\r\n    postForm: POST_FORM,\r\n    formIsValid: false,\r\n    imagePreview: null,\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (\r\n      this.props.editing &&\r\n      prevProps.editing !== this.props.editing &&\r\n      prevProps.selectedPost !== this.props.selectedPost\r\n    ) {\r\n      const postForm = {\r\n        title: {\r\n          ...prevState.postForm.title,\r\n          value: this.props.selectedPost.title,\r\n          valid: true,\r\n        },\r\n        image: {\r\n          ...prevState.postForm.image,\r\n          value: this.props.selectedPost.imagePath,\r\n          valid: true,\r\n        },\r\n        content: {\r\n          ...prevState.postForm.content,\r\n          value: this.props.selectedPost.content,\r\n          valid: true,\r\n        },\r\n        id: {\r\n          ...prevState.postForm.id,\r\n          value: this.props.selectedPost._id,\r\n          valid: true\r\n        }\r\n      };\r\n\r\n      this.setState({ postForm: postForm, formIsValid: true });\r\n    }\r\n  }\r\n\r\n  // postInputChangedHandler = (input, value, files) => {\r\n  //   if (files) {\r\n  //     generateBase64FromImage(files[0])\r\n  //       .then((base64) => {\r\n  //         console.log('ENTERED');\r\n  //         this.setState({ imagePreview: base64 });\r\n  //       })\r\n  //       .catch((event) => {\r\n  //         console.log('ENTERED2');\r\n  //         this.setState({ imagePreview: null });\r\n  //       });\r\n  //   }\r\n\r\n  //   this.setState((prevState) => {\r\n  //     let isValid = true;\r\n  //     for (const validator of prevState.postForm[input].validators) {\r\n  //       isValid = isValid && validator(value);\r\n  //     }\r\n  //     const updatedForm = {\r\n  //       ...prevState.postForm,\r\n  //       [input]: {\r\n  //         ...prevState.postForm[input],\r\n  //         valid: isValid,\r\n  //         value: files ? files[0] : value,\r\n  //       },\r\n  //     };\r\n  //     let formIsValid = true;\r\n  //     for (const inputName in updatedForm) {\r\n  //       formIsValid = formIsValid && updatedForm[inputName].valid;\r\n  //     }\r\n  //     return {\r\n  //       postForm: updatedForm,\r\n  //       formIsValid: formIsValid,\r\n  //     };\r\n  //   });\r\n  // };\r\n\r\n\r\n\r\n\r\n  postInputChangedHandler = async (input, value, files) => {\r\n\r\n\r\n\r\n\r\n    try {\r\n\r\n    \r\n    \r\n    if (files) {\r\n     const base64 = await generateBase64FromImage(files[0]);\r\n        // .then((base64) => {\r\n          // console.log('ENTERED');\r\n          this.setState({ imagePreview: base64 });\r\n        // })\r\n        // .catch((event) => {\r\n      \r\n  \r\n        // });\r\n    }\r\n\r\n    this.setState((prevState) => {\r\n      let isValid = true;\r\n      for (const validator of prevState.postForm[input].validators) {\r\n        isValid = isValid && validator(value);\r\n      }\r\n      const updatedForm = {\r\n        ...prevState.postForm,\r\n        [input]: {\r\n          ...prevState.postForm[input],\r\n          valid: isValid,\r\n          value: files ? files[0] : value,\r\n        },\r\n      };\r\n      let formIsValid = true;\r\n      for (const inputName in updatedForm) {\r\n        formIsValid = formIsValid && updatedForm[inputName].valid;\r\n      }\r\n      return {\r\n        postForm: updatedForm,\r\n        formIsValid: formIsValid,\r\n      };\r\n    });\r\n\r\n\r\n  } catch (err) {\r\n\r\n\r\n    console.log('ENTERED2');\r\n    this.setState({ imagePreview: null });\r\n  }\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  inputBlurHandler = (input) => {\r\n    this.setState((prevState) => {\r\n      return {\r\n        postForm: {\r\n          ...prevState.postForm,\r\n          [input]: {\r\n            ...prevState.postForm[input],\r\n            touched: true,\r\n          },\r\n        },\r\n      };\r\n    });\r\n  };\r\n\r\n  cancelPostChangeHandler = () => {\r\n    this.setState({\r\n      postForm: POST_FORM,\r\n      formIsValid: false,\r\n    });\r\n    this.props.onCancelEdit();\r\n  };\r\n\r\n  acceptPostChangeHandler = () => {\r\n    const post = {\r\n      title: this.state.postForm.title.value,\r\n      image: this.state.postForm.image.value,\r\n      content: this.state.postForm.content.value,\r\n      id: this.state.postForm.id.value\r\n    };\r\n\r\n    console.log(post);\r\n\r\n    this.props.onFinishEdit(post);\r\n    this.setState({\r\n      postForm: POST_FORM,\r\n      formIsValid: false,\r\n      imagePreview: null,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return this.props.editing ? (\r\n      <Fragment>\r\n        <Backdrop onClick={this.cancelPostChangeHandler} />\r\n        <Modal\r\n          title=\"New Post\"\r\n          acceptEnabled={this.state.formIsValid}\r\n          onCancelModal={this.cancelPostChangeHandler}\r\n          onAcceptModal={this.acceptPostChangeHandler}\r\n          isLoading={this.props.loading}\r\n        >\r\n          <form>\r\n            <Input\r\n              id=\"title\"\r\n              label=\"Title\"\r\n              control=\"input\"\r\n              onChange={this.postInputChangedHandler}\r\n              onBlur={this.inputBlurHandler.bind(this, 'title')}\r\n              valid={this.state.postForm['title'].valid}\r\n              touched={this.state.postForm['title'].touched}\r\n              value={this.state.postForm['title'].value}\r\n            />\r\n            <FilePicker\r\n              id=\"image\"\r\n              label=\"Image\"\r\n              control=\"input\"\r\n              onChange={this.postInputChangedHandler}\r\n              onBlur={this.inputBlurHandler.bind(this, 'image')}\r\n              valid={this.state.postForm['image'].valid}\r\n              touched={this.state.postForm['image'].touched}\r\n            />\r\n            <div className=\"new-post__preview-image\">\r\n              {!this.state.imagePreview && <p>Please choose an image.</p>}\r\n              {this.state.imagePreview && (\r\n                <Image imageUrl={this.state.imagePreview} contain left />\r\n              )}\r\n            </div>\r\n            <Input\r\n              id=\"content\"\r\n              label=\"Content\"\r\n              control=\"textarea\"\r\n              onChange={this.postInputChangedHandler}\r\n              onBlur={this.inputBlurHandler.bind(this, 'content')}\r\n              valid={this.state.postForm['content'].valid}\r\n              touched={this.state.postForm['content'].touched}\r\n              value={this.state.postForm['content'].value}\r\n            />\r\n          </form>\r\n        </Modal>\r\n      </Fragment>\r\n    ) : null;\r\n  }\r\n}\r\n\r\nexport default FeedEdit;\r\n","import React from 'react';\r\n\r\nimport './Paginator.css';\r\n\r\nconst paginator = (props) => {\r\n  return (\r\n    <div className=\"paginator\">\r\n      {props.children}\r\n      <div className=\"paginator__controls\">\r\n        {props.currentPage > 1 && (\r\n          <button className=\"paginator__control\" onClick={props.onPrevious}>\r\n            Previous\r\n          </button>\r\n        )}\r\n        {props.currentPage < props.lastPage && (\r\n          <button className=\"paginator__control\" onClick={props.onNext}>\r\n            Next\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\nexport default paginator;","import React from 'react';\r\n\r\nimport './Loader.css';\r\n\r\nconst loader = (props) => {\r\n  return (\r\n    <div className=\"loader\">\r\n      <div />\r\n      <div />\r\n      <div />\r\n      <div />\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\nexport default loader;","import React, { Component, Fragment } from 'react';\r\n\r\n// import openSocket from 'socket.io-client'; /////NECESSÁRIO PARA SETTAR UMA CONEXÃO 'websockets' entre O BACKEND E NOSSO FRONTEND...\r\n\r\nimport Post from '../../components/Feed/Post/Post';\r\n\r\nimport Button from '../../components/Button/Button';\r\n\r\nimport FeedEdit from '../../components/Feed/FeedEdit/FeedEdit';\r\n\r\nimport Input from '../../components/Form/Input/Input';\r\n\r\nimport Paginator from '../../components/Paginator/Paginator';\r\n\r\nimport Loader from '../../components/Loader/Loader';\r\n\r\nimport ErrorHandler from '../../components/ErrorHandler/ErrorHandler';\r\n\r\nimport './Feed.css';\r\n\r\nclass Feed extends Component {\r\n  state = {\r\n    isEditing: false,\r\n    posts: [],\r\n    totalPosts: 0,\r\n    editPost: null,\r\n    status: '',\r\n    postPage: 1,\r\n    postsLoading: true,\r\n    editLoading: false,\r\n    statusLoading: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    // fetch('URL')\r\n    // fetch('http://localhost:8080/auth/status', { ///versão REST API de nosso código\r\n\r\n    // const userId = localStorage.getItem('userId');\r\n    // console.log(userId);\r\n\r\n      const graphqlQuery = {\r\n        query: `\r\n        {\r\n          getStatus\r\n        } \r\n        \r\n        `\r\n      }\r\n\r\n      fetch('http://localhost:8080/graphql', { ////versão GRAPHQL de nosso código...\r\n      headers: {\r\n        Authorization: 'Bearer ' + this.props.token,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(graphqlQuery),\r\n      method: 'POST'\r\n    })\r\n      .then((res) => {\r\n\r\n\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        console.log(data);\r\n        if (data.errors) {\r\n          throw new Error('Failed to fetch user status.');\r\n        }\r\n        console.log(data.data.getStatus);\r\n        // this.setState({ status: data.status });\r\n        this.setState({ status: data.data.getStatus });\r\n      })\r\n      .then()\r\n      .catch(this.catchError);\r\n    this.loadPosts(); //EXECUTADO __ APÓS O FETCH, ACHO...\r\n    console.log('Entered');\r\n    ///Removemos o websockets do nosso projeto, para entender melhor o GRAPHQL...\r\n    // const openSocketToOurBackend = openSocket('http://localhost:8080',  //COLOQUE O PATH/ENDEREÇO DE SEU__ SERVIDOR/BACKEND, APP NODEEXPRESS, no nosso caso....\r\n    // {transports: ['websocket', 'polling', 'flashsocket']});  ///esse segundo parâmetro serve para CONSERTAR O PROBLEMA DE 'CORS' do nosso app, em relação ao recebimento de requests WEBSOCKET sentido server -> frontend....\r\n\r\n    // openSocketToOurBackend.on('posts',\r\n\r\n    // (data) => {/// data é a data QUE ACTUALLY RECEBEMOS DO 'REQUEST DISPARADO POR NOSSO BACKEND', request de tipo 'WEBSOCKET'...\r\n\r\n    //   if (data.action === 'create') { ////vamos querer aceitar data EMITIDA _ APENAS__ DO REQUEST _ DISPARADO POR NOSSO BACKEND QUE TENHA ESSE VALOR de string 'create' DENTRO DE SUA KEY 'action'.... ( ou seja, só aquele código do 'SOCKETIO' que escrevemos la no controller de 'createPost'...)\r\n    //     console.log('ENTEREDPOST');\r\n    //     const post = {\r\n    //       ...data.post\r\n    //     }\r\n    //     console.log(post, 'YOURPOST');\r\n    //     console.log(data.postCreator);\r\n    //     // post.creator.name = data.postCreator;\r\n    //     // console.log(post, 'YOURPOST');\r\n    //     this.addPost(post, data.postCreator);\r\n\r\n    //   }\r\n\r\n    //   if (data.action === 'edit') { ////vamos querer aceitar data EMITIDA _ APENAS__ DO REQUEST _ DISPARADO POR NOSSO BACKEND QUE TENHA ESSE VALOR de string 'create' DENTRO DE SUA KEY 'action'.... ( ou seja, só aquele código do 'SOCKETIO' que escrevemos la no controller de 'createPost'...)\r\n    //     console.log('ENTEREDPOSTEDIT');\r\n    //     const post = {\r\n    //       ...data.post\r\n    //     }\r\n    //     console.log(post, 'YOUREDITEDPOST');\r\n    //     // post.creator.name = data.postCreator;\r\n    //     // console.log(post, 'YOURPOST');\r\n    //     this.updatePost(post, data.postCreator);\r\n\r\n    //   }\r\n\r\n    //   if (data.action === 'delete') { ////vamos querer aceitar data EMITIDA _ APENAS__ DO REQUEST _ DISPARADO POR NOSSO BACKEND QUE TENHA ESSE VALOR de string 'create' DENTRO DE SUA KEY 'action'.... ( ou seja, só aquele código do 'SOCKETIO' que escrevemos la no controller de 'createPost'...)\r\n    //     console.log('ENTEREDPOSTDELETE');\r\n    //     console.log(data.postId, 'YOURDELETEDPOST');\r\n    //     // post.creator.name = data.postCreator;\r\n    //     // console.log(post, 'YOURPOST');\r\n    //     // this.deletePost(data.postId, data.postCreator); //desistimos deste approach...\r\n    //     this.loadPosts() //optamos por esse approach, que vai RECARREGAR (reload) nossa page, e a de todos os outros users.... (approach mais simples, na verdade)...\r\n\r\n    //   }\r\n\r\n    // }\r\n\r\n    // );\r\n\r\n    ///essa constante que segura o call de 'openSocket' nos fornece VÁRIOS MÉTODOS 'listener', que são EVENT LISTENERS; usaremo-nos para __ FAZER LISTEN TO _ A EVENTS __ DISPARADOS __ por nosso backend... (como o evento 'posts' que escrevemos lá no backend, no controller de 'feed.js', controller de 'createPost'...)\r\n  }\r\n\r\n  // loadPosts = (direction) => {\r\n\r\n  //     // const token = localStorage.getItem('token');  // já vamos obter isso por meio dos PROPS repassados pelo 'App.js'..\r\n\r\n  //   if (direction) {\r\n  //     this.setState({ postsLoading: true, posts: [] });\r\n  //   }\r\n\r\n  //   let page = this.state.postPage;\r\n  //   console.log(page);\r\n\r\n  //   if (direction === 'next') {\r\n  //     page++;\r\n  //     this.setState({ postPage: page });\r\n  //   }\r\n\r\n  //   if (direction === 'previous') {\r\n  //     page--;\r\n  //     console.log(this.state.postPage);\r\n  //     this.setState({ postPage: page });\r\n  //     console.log(this.state.postPage);\r\n  //   }\r\n\r\n  //   console.log(this.state.postPage, 'NEEDPOSTPAGE');\r\n  //   // fetch('URL')\r\n  //   fetch(`http://localhost:8080/feed/posts?page=${page}`,  //forma correta. (OBS: NÃO É BOM ENCODAR SUA 'TOKEN'/JWT TOKEN de authorization NAS SUAS URL... EM VEZ DISSO, OPTE POR __ ANEXAR/APPENDAR ESSA TOKEN __ LÁ _ NOS HEADERS__ DOS REQUESTS QUE VOCÊ ENVIA, COMO VISTO LOGO ABAIXo...)\r\n  //     {\r\n  //         headers: { //vamos ter que adicionar esse HEADER ESPECÍFICO DE 'Authorization'/token __ _em TODOS OS REQUESTS __ FEITOS NO NOSSO FRONTEND... (menos os de 'login' e 'signup')...\r\n  //           'Authorization': `Bearer ${this.props.token}`, //obs: esse 'Authorization' foi DEFINIDO COMO 'PERMITIDO' lá ___ no 'app.js' DO NOSSO BACKEND, naquele middleware do CORS...\r\n  //           // 'Content-Type': 'application/json' ///PROFESSOR EXPLICA QUE AQUI, NESSE CASE DESSE 'GET REQUEST', não precisamos __ SETTAR 'content-type' como sendo json __ JUSTAMENTE_ PQ NÃO ESTAMOS ENVIANDO NENHUMA DATA CONCRETA, E SIM APENAS UM 'AUTHORIZATION HEADER' no nosso request... (pq REQUESTS DE TIPO GET REALMENTE __ NÃO PODEM/CONSEGUEM ENVIAR BODIES CONSIGO... só headers)...\r\n  //         }\r\n  //     }\r\n  //   ) ///esse request vai ser enviado PRIMEIRAMENTE ao middleware do arquivo 'is-auth', na pasta 'middlewareHelpers'...\r\n\r\n  //   // fetch('/feed/posts') //FORMA ERRADA.\r\n  //     .then((res) => {\r\n  //       if (res.status !== 200) {\r\n  //         throw new Error('Failed to fetch posts.');\r\n  //       }\r\n  //       return res.json();\r\n  //     })\r\n  //     .then((data) => {\r\n  //       console.log('ENTERED25125');\r\n  //       this.setState({\r\n  //         // posts: data.posts,\r\n\r\n  //         posts: data.posts.map((post) => {\r\n  //           return {\r\n  //             ...post,\r\n  //             imagePath: post.imageUrl,\r\n  //           };\r\n  //         }),\r\n  //         totalPosts: data.totalItems,\r\n  //         postsLoading: false,\r\n  //       });\r\n  //     })\r\n  //     .catch(this.catchError);\r\n  // };\r\n\r\n  loadPosts = async (direction) => {\r\n    // const token = localStorage.getItem('token');  // já vamos obter isso por meio dos PROPS repassados pelo 'App.js'..\r\n\r\n    try {\r\n      if (direction) {\r\n        this.setState({ postsLoading: true, posts: [] });\r\n      }\r\n\r\n      let page = this.state.postPage;\r\n      console.log(page);\r\n\r\n      if (direction === 'next') {\r\n        page++;\r\n        this.setState({ postPage: page });\r\n      }\r\n\r\n      if (direction === 'previous') {\r\n        page--;\r\n        console.log(this.state.postPage);\r\n        this.setState({ postPage: page });\r\n        console.log(this.state.postPage);\r\n      }\r\n\r\n      console.log(this.state.postPage, 'NEEDPOSTPAGE');\r\n      // fetch('URL')\r\n\r\n      const graphqlQuery = {\r\n        ////o graphql nos ajuda, pois nos deixa fetchear APENAS O QUE PRECISAMOS/DESEJAMOS, deixando de lado pedaços de data que são inúteis no nosso caso específico (como 'imageUrl', ou o 'email' do 'creator' e 'updatedAt' do 'post' .... --> esses pedaços de data não são necessários nesse run de 'loadPosts', pois NÃO SÃO USADOS NO LOAD DESSA NOSSA STARTING PAGE....)\r\n        //só precisamos do write de 1 termo 'query', e não 2... (pois isso seria redundante). --> e vamos querer que os POSTS sejam retornados....\r\n\r\n        /// em 'posts { _id, title, content}'  estamos ACTUALLY ESPECIFICANDO QUAIS FIELDS NESSES OBJETOS 'Post' VAMOS QUERER QUE SEJAM RETORNADOS pelo graphql.... (aí podemos escolher ´SO OS FIELDS QUE NOS INTERESSAM.... ESSE É O PROPÓSITO DO GRAPHQL....).\r\n       \r\n        \r\n        ///aqui também temos um EXEMPLO DE uso de 'VARIABLES' (é esse '()' com essas coisas com $ .... --> isso são variáveis, que podem ser usadas LOCALMENTE, nessa nossa query...)\r\n        \r\n        //o uso de NOMES para nossas queries só serve para facilitar no error handling (vemos o nome de quais queries originam os errors, etc), e no development... (mas fora isso, são inúteis)....\r\n        \r\n        ///quando COLOCAMOS UM NOME EM UMA QUERY, é permitido a nós 'ser redundantes ' (escrever 'query: query FetchPosts', etc etc)....\r\n        \r\n        ///quando definimos a variable, somos obrigados a indicar o GRAPHQLTYPE (datatype) que ele será... (no caso, será um número, portanto 'Int')..\r\n\r\n\r\n\r\n        query: `\r\n       \r\n       query FetchPosts($page: Int!) {\r\n          getPosts(pageNumber: $page) {\r\n            posts {\r\n              _id\r\n              content \r\n              title\r\n              imageUrl\r\n              creator {\r\n                name \r\n                _id\r\n              }\r\n              createdAt\r\n            }\r\n            page\r\n            totalItems\r\n          }\r\n        } `,\r\n\r\n        variables: { ///exemplo do uso de VARIABLES ('$page') COM UMA DE NOSSAS QUERIES... (é a maneira certa de inserir VALORES DINÂMICOS NAS NOSSAS QUERIES GRAPHQL)...\r\n\r\n          page: page ///AQUI ENFIAMOS OS VALORES DINÂMICOS JAVASCRIPT QUE QUEREMOS QUE SEJAM SOCADOS NOS CALLS DAS 'VARIABLES' ali em cima, na nossa query GRAPHQL...\r\n\r\n\r\n        }\r\n      };\r\n\r\n      const loadedPostsResult = await fetch(\r\n        // `http://localhost:8080/feed/posts?page=${page}`, ///OBS:: NÃO VAMOS MAIS CONSEGUIR ENCODAR O 'PAGENUMBER' NA NOSSA URL, POIS NO MUNDO GRAPHQL SÓ EXISTE 1 ENDPOINT (o endpoint de 'localhost:8080/graphql', DE TIPO POST)....\r\n        `http://localhost:8080/graphql`,\r\n\r\n        {\r\n          method: 'POST', ////sim, vamos usar um METHOD DE 'POST', mesmo que esse seja um GET REQUEST, pq estamos no mundo graphql...\r\n          headers: {\r\n            //vamos ter que adicionar esse HEADER ESPECÍFICO DE 'Authorization'/token __ _em TODOS OS REQUESTS __ FEITOS NO NOSSO FRONTEND... (menos os de 'login' e 'signup')...\r\n            Authorization: `Bearer ${this.props.token}`, //obs: esse 'Authorization' foi DEFINIDO COMO 'PERMITIDO' lá ___ no 'app.js' DO NOSSO BACKEND, naquele middleware do CORS...\r\n            // 'Content-Type': 'application/json' ///PROFESSOR EXPLICA QUE AQUI, NESSE CASE DESSE 'GET REQUEST', não precisamos __ SETTAR 'content-type' como sendo json __ JUSTAMENTE_ PQ NÃO ESTAMOS ENVIANDO NENHUMA DATA CONCRETA, E SIM APENAS UM 'AUTHORIZATION HEADER' no nosso request... (pq REQUESTS DE TIPO GET REALMENTE __ NÃO PODEM/CONSEGUEM ENVIAR BODIES CONSIGO... só headers)...\r\n            'Content-Type': 'application/json', //aqui vamos querer ENVIAR DATA CONCRETA (o page number, nesse request de tipo POST, post pq é GRAPHQL WORLD).... , por isso o 'application/json', e esse header aí...\r\n          },\r\n\r\n          body: JSON.stringify(graphqlQuery),\r\n        }\r\n      ); ///esse request vai ser enviado PRIMEIRAMENTE ao middleware do arquivo 'is-auth', na pasta 'middlewareHelpers'...\r\n\r\n      // fetch('/feed/posts') //FORMA ERRADA.\r\n      // .then((res) => {\r\n      // if (loadedPostsResult.status !== 200) {\r\n\r\n      // return res.json();\r\n\r\n      const manipulatedPostsResult = await loadedPostsResult.json();\r\n\r\n      console.log(manipulatedPostsResult);\r\n\r\n      if (manipulatedPostsResult.errors) {\r\n        throw new Error('Failed to fetch posts.');\r\n      }\r\n\r\n      console.log(manipulatedPostsResult.data.getPosts, 'LINE');\r\n      // })\r\n      // .then((data) => {\r\n      // console.log('ENTERED25125');\r\n\r\n      console.log(this.state);\r\n      console.log(this.state.posts.length, this.state.postsLoading);\r\n\r\n      this.setState({\r\n        // posts: data.posts,\r\n\r\n        // posts: manipulatedPostsResult.posts.map((post) => {\r\n        posts: manipulatedPostsResult.data.getPosts.posts.map((post) => {\r\n          return {\r\n            ...post,\r\n            imagePath: post.imageUrl,\r\n          };\r\n        }),\r\n        totalPosts: manipulatedPostsResult.data.getPosts.totalItems,\r\n        postsLoading: false,\r\n      });\r\n      // })\r\n\r\n      console.log(this.state);\r\n      console.log(this.state.posts.length, this.state.postsLoading);\r\n    } catch (err) {\r\n      // console.log('CATCHED');\r\n      this.catchError(); ////não sei se isso está certo.\r\n    }\r\n    // .catch(this.catchError);\r\n  };\r\n\r\n  statusUpdateHandler = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // console.log(event.target.value);\r\n\r\n    this.setState(\r\n      {\r\n        statusLoading: true\r\n      }\r\n    )\r\n\r\n    const graphqlQuery = {\r\n\r\n    //   query: `  ///versão ___ SEM__ o uso de 'GRAPHQL VARIABLES' (ou seja, só com template literals e inserção direta de valores javascript)....\r\n    //  mutation {\r\n    //   updateUserStatus(status: \"${this.state.status}\")\r\n    //   }\r\n    //   `\r\n\r\n      ///versão COM USO DE 'GRAPHQL VARIABLES' (ver key de 'variables').....\r\n    query: `\r\n    mutation UpdateUserStatus($status: String!) {\r\n     updateUserStatus(status: $status)\r\n     }\r\n     `,\r\n\r\n     variables: {\r\n       status: this.state.status\r\n     }\r\n\r\n\r\n    }\r\n\r\n    try {\r\n      const updateStatusResult = await fetch(\r\n        // 'http://localhost:8080/auth/status', ////versão REST API de nosso código...\r\n        'http://localhost:8080/graphql', ///vERSÃO __GRAPHQL__ de nosso código...\r\n        {\r\n          // method: 'PATCH', ///versão REST API de nosso código\r\n          method: 'POST', ///versão GRAPHQL de nosso código....\r\n\r\n          body: JSON.stringify(graphqlQuery), ///VERSÃO __ GRAPHQL DE NOSSO CÓDIGO (body)...\r\n\r\n          // body: JSON.stringify({ ///versão REST API de nosso código...\r\n          //   status: this.state.status,\r\n          // }),\r\n          headers: {\r\n            Authorization: `Bearer ${this.props.token}`,\r\n            'Content-Type': 'application/json', //isto ainda é necessário.... (request de tipo patch/post/put...)\r\n          },\r\n        }\r\n      );\r\n\r\n      // if (\r\n      //   updateStatusResult.status !== 200 &&\r\n      //   updateStatusResult.status !== 201\r\n      // ) {\r\n      //   throw new Error(\"Can't update status!\");\r\n      // }\r\n\r\n\r\n\r\n      const manipulatedUpdateStatusResult = await updateStatusResult.json();\r\n\r\n\r\n       if(\r\n         manipulatedUpdateStatusResult.errors \r\n       ) {\r\n        this.setState(\r\n          {\r\n            statusLoading: false\r\n          }\r\n        )\r\n        throw new Error(\"Could not update status!\");\r\n       }\r\n       this.setState(\r\n        {\r\n          statusLoading: false\r\n        }\r\n      )\r\n\r\n      // console.log(manipulatedUpdateStatusResult);\r\n    } catch (err) {\r\n      this.catchError();\r\n      this.setState(\r\n        {\r\n          statusLoading: false\r\n        }\r\n      )\r\n    }\r\n  };\r\n\r\n  newPostHandler = () => {\r\n    this.setState({ isEditing: true });\r\n  };\r\n\r\n  startEditPostHandler = (postId) => {\r\n    // console.log(postId);\r\n\r\n    this.setState((prevState) => {\r\n      const loadedPost = {\r\n        ...prevState.posts.find((post) => post._id === postId),\r\n      };\r\n      // console.log(loadedPost);\r\n      return {\r\n        isEditing: true,\r\n        editPost: loadedPost,\r\n      };\r\n    });\r\n\r\n    // console.log(this.state.editPost);\r\n  };\r\n\r\n  cancelEditHandler = () => {\r\n    this.setState({ isEditing: false, editPost: null });\r\n  };\r\n\r\n  // finishEditHandler = (postData) => {\r\n  //   ///usado tanto para o ADD como para o EDIT de posts...\r\n  //   this.setState({ editLoading: true });\r\n\r\n  //   //Set up data (with image!)\r\n  //   // let url = 'URL';\r\n\r\n  //   ////esse objeto/const de 'formData' JÁ VAI SETTAR AUTOMATICAMENTE OS HEADERS APROPRIADOS PARA ESSE REQUEST, para nós... (não escreva aquele header de 'Content-Type: application/json', pq isso vai QUEBRAR O SEU APP....)\r\n  //   let formData = new FormData(); ///usado para conesguirmos UPLOADAR FILES E 'text inputs' AO MESMO TEMPO, EM UM REUQEST, AO NOSSO BACKEND...\r\n  //   formData.append('title', postData.title);\r\n  //   formData.append('content', postData.content);\r\n  //   formData.append('image', postData.image);\r\n\r\n  //   console.log(postData.image);\r\n\r\n  //   let url = 'http://localhost:8080/feed/post';\r\n  //   let method = 'POST';\r\n\r\n  //   if (this.state.editPost) {\r\n  //     // url = 'URL';\r\n  //     // url = 'http://localhost:8080/feed/post-edit';  ////approach do method 'PATCH', com o POSTID enviado no BODY do request (send no body do request, em vez de o extrair de um SEGMENTO DINÂMICO NA URL)....\r\n  //     // method = 'PATCH';\r\n  //     url = `http://localhost:8080/feed/post/${postData.id}`;\r\n  //     method = 'PUT';\r\n  //     console.log(postData);\r\n  //     // formData = new FormData(); /// approach antiga, do 'formData'.... --> essa approach é usada com o 'createPost', mas não com o EDIT POST...\r\n  //     // formData.append('postId', postData.id); //ver anotação logo acima... approach do método 'patch', antiga, minha, obsoleta.\r\n  //     // formData.append('title', postData.title);\r\n  //     // formData.append('content', postData.content);\r\n  //     // formData.append('image', postData.image);\r\n\r\n  //   }\r\n\r\n  //   for (var pair of formData.entries()) {\r\n  //     console.log(pair[0] + ', ' + pair[1]);\r\n  //   }\r\n\r\n  //   fetch(url, {\r\n  //     method: method,\r\n  //     // body: JSON.stringify(postData),\r\n  //     body: formData, //isso vai conter a DATA EM FORMATO TEXT   __ MAIS__ A image que queremos uploadar...\r\n\r\n  //     headers: { //vamos ter que adicionar esse HEADER ESPECÍFICO DE 'Authorization'/token __ _em TODOS OS REQUESTS __ FEITOS NO NOSSO FRONTEND... (menos os de 'login' e 'signup')...\r\n  //       'Authorization': `Bearer ${this.props.token}`, //obs: esse 'Authorization' foi DEFINIDO COMO 'PERMITIDO' lá ___ no 'app.js' DO NOSSO BACKEND, naquele middleware do CORS...\r\n  //       // 'Content-Type': 'application/json' ///PROFESSOR EXPLICA QUE AQUI, NESSE CASE DESSE 'GET REQUEST', não precisamos __ SETTAR 'content-type' como sendo json __ JUSTAMENTE_ PQ NÃO ESTAMOS ENVIANDO NENHUMA DATA CONCRETA, E SIM APENAS UM 'AUTHORIZATION HEADER' no nosso request... (pq REQUESTS DE TIPO GET REALMENTE __ NÃO PODEM/CONSEGUEM ENVIAR BODIES CONSIGO... só headers)...\r\n  //     }\r\n\r\n  //     // headers: { ///este código, este SET DE HEADERS, __ NÃO FUNCIONA__ quando estamos lidando com O 'UPLOAD DE TEXT + UPLOAD DE IMAGES/files' ao mesmo tempo... (pq nossas files não conseguem ser convertidas em text...) --> para possibilitar o upload de images + text ao nosso backend, usamos o approach de 'const formData = new FormData()', visto mais acima...\r\n  //     //   'Content-Type':     //'application/json' //só usaríamos isso se NÃO TIVÉSSEMOS UMA IMAGE nesse request que queremos enviar, nesse caso específico (aqui, no caso, temos UMA IMAGE + TEXTDATA... --> por isso vamos usar 'multipart/form-data' como CONTENT TYPE)....\r\n  //     //                       'multipart/form-data'\r\n  //     // }\r\n  //   })\r\n  //     .then((res) => {\r\n  //       if (res.status === 400) {\r\n  //         throw new Error(\r\n  //           'Please input values that are valid and not equal to previous ones.'\r\n  //         );\r\n  //       }\r\n  //         console.log(res.status);\r\n  //       if (res.status !== 200 && res.status !== 201) {\r\n  //         throw new Error('Creating or editing a post failed!');\r\n  //       }\r\n\r\n  //       return res.json();\r\n  //     })\r\n  //     .then((data) => {\r\n  //       console.log(data.post);\r\n  //       const post = {\r\n  //         _id: data.post._id,\r\n  //         title: data.post.title,\r\n  //         content: data.post.content,\r\n  //         creator: data.post.creator,\r\n  //         createdAt: data.post.createdAt,\r\n  //       };\r\n\r\n  //       this.setState((prevState) => {\r\n  //         let updatedPosts = [...prevState.posts];\r\n  //         if (prevState.editPosts) {\r\n  //           const postIndex = prevState.posts.findIndex((post) => {\r\n  //             return post._id === prevState.editPost._id;\r\n  //           });\r\n  //           updatedPosts[postIndex] = post;\r\n  //         } else if (prevState.posts.length < 2) {\r\n  //           updatedPosts = prevState.posts.concat(post);\r\n  //         }\r\n  //         return {\r\n  //           posts: updatedPosts,\r\n  //           isEditing: false,\r\n  //           editPost: null,\r\n  //           editLoading: false,\r\n  //         };\r\n  //       });\r\n\r\n  //       this.loadPosts();\r\n  //     })\r\n  //     .catch((err) => {\r\n  //       console.log(err);\r\n  //       this.setState({\r\n  //         isEditing: false,\r\n  //         editPost: null,\r\n  //         editLoading: false,\r\n  //         error: err,\r\n  //       });\r\n  //       this.loadPosts();\r\n  //     });\r\n  // };\r\n\r\n  finishEditHandler = async (postData) => {\r\n    ///usado tanto para o ADD como para o EDIT de posts...\r\n\r\n    try {\r\n      this.setState({ editLoading: true });\r\n\r\n      //Set up data (with image!)\r\n      // let url = 'URL';\r\n\r\n      ////esse objeto/const de 'formData' JÁ VAI SETTAR AUTOMATICAMENTE OS HEADERS APROPRIADOS PARA ESSE REQUEST, para nós... (não escreva aquele header de 'Content-Type: application/json', pq isso vai QUEBRAR O SEU APP....)\r\n      // let formData = new FormData(); ///usado para conesguirmos UPLOADAR FILES E 'text inputs' AO MESMO TEMPO, EM UM REUQEST, AO NOSSO BACKEND...\r\n      // formData.append('title', postData.title);\r\n      // formData.append('content', postData.content);\r\n      // formData.append('image', postData.image);\r\n\r\n      // console.log(postData.image);\r\n\r\n      // let url = 'http://localhost:8080/feed/post';\r\n\r\n      const formData = new FormData(); ///ainda USAREMOS ISSO PARA CONSEGUIR UPLOADAR NOSSAS IMAGES, MESMO EM UMA 'GRAPHQL API' (pq ainda vamos usar uma rest api, CONJUNTAMENTE COM ESES GRAPHQL API, para fazer o MANAGE DO STORE DE NOSSAS IMAGES)....\r\n\r\n      formData.append('image', postData.image);\r\n\r\n      if (this.state.editPost) {\r\n        formData.append('oldPath', this.state.editPost.imagePath);\r\n      }\r\n\r\n      const imageSend = await fetch(\r\n        'http://localhost:8080/post-image',\r\n\r\n        {\r\n          method: 'PUT',\r\n          body: formData,\r\n          headers: {\r\n            Authorization: `Bearer ${this.props.token}`,\r\n          },\r\n        }\r\n      );\r\n\r\n      const manipulatedImageSend = await imageSend.json();\r\n\r\n      console.log(manipulatedImageSend);\r\n\r\n      let imageUrl;\r\n\r\n      if (manipulatedImageSend.filePath) {\r\n        imageUrl = manipulatedImageSend.filePath.replace(/\\\\/g, '/');\r\n      } else {\r\n        imageUrl = 'undefined';\r\n      }\r\n\r\n      console.log(imageUrl, 'IMAGEURL');\r\n\r\n      // let graphqlQuery = { //versaõ da query SEM O USO DE VARIABLES...\r\n      //   query: `\r\n      //   mutation {\r\n      //     createPost(\r\n      //       userInput: {\r\n      //             title: \"${postData.title}\",\r\n      //             content: \"${postData.content}\",\r\n      //             imageUrl: \"${imageUrl}\"\r\n      //       }\r\n      //    ) {\r\n\r\n      //       title\r\n      //       content \r\n      //       _id\r\n      //       imageUrl\r\n      //       createdAt\r\n      //       creator {\r\n      //           name\r\n      //       }\r\n      //   }\r\n      // }\r\n      // `,\r\n\r\n      // };\r\n\r\n\r\n\r\n\r\n\r\n\r\n      let graphqlQuery = {\r\n        query: `\r\n        mutation createPostOperation($title: String!, $content: String!, $imageUrl: String!){\r\n          createPost(\r\n            userInput: {\r\n                  title: $title,\r\n                  content: $content,\r\n                  imageUrl: $imageUrl\r\n            }\r\n         ) {\r\n\r\n            title\r\n            content \r\n            _id\r\n            imageUrl\r\n            createdAt\r\n            creator {\r\n                name\r\n            }\r\n        }\r\n      }\r\n      `,\r\n      variables: {\r\n          title: postData.title,\r\n          content: postData.content,\r\n          imageUrl: imageUrl\r\n      }\r\n      };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      // if (this.state.editPost) {\r\n      //   graphqlQuery = {\r\n      //     query: `\r\n          \r\n      //     mutation {\r\n      //       updatePost(postId: \"${this.state.editPost._id}\", userInput: {title: \"${postData.title}\", content: \"${postData.content}\", imageUrl: \"${imageUrl}\" } )\r\n      //      {\r\n      //         _id \r\n      //         title \r\n      //         content\r\n      //         imageUrl\r\n      //         creator {\r\n      //           name\r\n      //           posts {\r\n      //             title\r\n      //           }\r\n      //         }\r\n      //         createdAt\r\n      //     }\r\n      //   }\r\n          \r\n      //     `,\r\n      //   };\r\n      // }\r\n\r\n\r\n\r\n\r\n      if (this.state.editPost) {\r\n        graphqlQuery = { //versão COM USO DE VARIABLES GRAPHQl...\r\n          query: `\r\n          \r\n          mutation UpdatePostOperation($postId: ID!, $title: String!, $content: String!, $imageUrl: String!){\r\n            updatePost(postId: $postId, userInput: {title: $title, content: $content, imageUrl: $imageUrl } )\r\n           {\r\n              _id \r\n              title \r\n              content\r\n              imageUrl\r\n              creator {\r\n                name\r\n                posts {\r\n                  title\r\n                }\r\n              }\r\n              createdAt\r\n          }\r\n        }\r\n          \r\n          `,\r\n          variables: {\r\n            postId: this.state.editPost._id,\r\n            title: postData.title,\r\n            content: postData.content,\r\n            imageUrl: imageUrl\r\n          }\r\n        };\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      // for (var pair of formData.entries()) {\r\n      //   // console.log(pair[0] + ', ' + pair[1]);\r\n      // }\r\n\r\n      const editAndAddResults = await fetch('http://localhost:8080/graphql', {\r\n        method: 'POST',\r\n\r\n        body: JSON.stringify(graphqlQuery),\r\n        headers: {\r\n          //vamos ter que adicionar esse HEADER ESPECÍFICO DE 'Authorization'/token __ _em TODOS OS REQUESTS __ FEITOS NO NOSSO FRONTEND... (menos os de 'login' e 'signup')...\r\n          Authorization: `Bearer ${this.props.token}`, //obs: esse 'Authorization' foi DEFINIDO COMO 'PERMITIDO' lá ___ no 'app.js' DO NOSSO BACKEND, naquele middleware do CORS...\r\n          'Content-Type': 'application/json', ///colocamos isto na VERSÃO __ 'GRAPHQL' de nosso código, pois é necessário lá... (é necessário em muitas outras hipóteses, também, mas neste curso, passou a ser necessário quando trocamos para um bakcned GRAPHQL..)\r\n\r\n          // 'Content-Type': 'application/json' ///PROFESSOR EXPLICA QUE AQUI, NESSE CASE, não precisamos __ SETTAR 'content-type' como sendo json __ JUSTAMENTE_ PQ  ENVIANDO DATA por meio daquele 'formData.append()'... APENAS precisamos settar, nesse case, UM 'AUTHORIZATION HEADER' no nosso request... (pq REQUESTS DE TIPO GET REALMENTE __ NÃO PODEM/CONSEGUEM ENVIAR BODIES CONSIGO... só headers)...\r\n        },\r\n      });\r\n\r\n      if (editAndAddResults.errors && editAndAddResults[0].status === 400) {\r\n        throw new Error(\r\n          'Please input values that are valid and not equal to previous ones.'\r\n        );\r\n      }\r\n\r\n      if (editAndAddResults.errors) {\r\n        throw new Error('Creating or editing a post failed!');\r\n      }\r\n\r\n      // return res.json();\r\n      // })\r\n      // .then((data) => {\r\n\r\n      console.log(editAndAddResults);\r\n      const manipulatedEditAndAddResults = await editAndAddResults.json();\r\n\r\n      console.log(manipulatedEditAndAddResults);\r\n\r\n      // console.log(manipulatedEditAndAddResults);\r\n\r\n      let post;\r\n\r\n      if (this.state.editPost) {\r\n        post = {\r\n          _id: manipulatedEditAndAddResults.data.updatePost._id,\r\n          title: manipulatedEditAndAddResults.data.updatePost.title,\r\n          content: manipulatedEditAndAddResults.data.updatePost.content,\r\n          creator: manipulatedEditAndAddResults.data.updatePost.creator,\r\n          createdAt: manipulatedEditAndAddResults.data.updatePost.createdAt,\r\n          imagePath: manipulatedEditAndAddResults.data.updatePost.imageUrl,\r\n        };\r\n      } else {\r\n        post = {\r\n          _id: manipulatedEditAndAddResults.data.createPost._id,\r\n          title: manipulatedEditAndAddResults.data.createPost.title,\r\n          content: manipulatedEditAndAddResults.data.createPost.content,\r\n          creator: manipulatedEditAndAddResults.data.createPost.creator,\r\n          createdAt: manipulatedEditAndAddResults.data.createPost.createdAt,\r\n          imagePath: manipulatedEditAndAddResults.data.createPost.imageUrl,\r\n        };\r\n      }\r\n\r\n      console.log(post, 'LINE646');\r\n      // console.log(post, 'Line');\r\n      this.setState((prevState) => {\r\n        let updatedPosts = [...prevState.posts];\r\n        let updatedTotalPosts = prevState.totalPosts;\r\n        if (prevState.editPost) {\r\n          const postIndex = prevState.posts.findIndex((post) => {\r\n            return post._id === prevState.editPost._id;\r\n          });\r\n\r\n\r\n          updatedPosts[postIndex] = post;\r\n        } \r\n        \r\n        else {\r\n          updatedTotalPosts++;\r\n          if(prevState.posts.length >= 5) {\r\n            updatedPosts.pop();\r\n          }\r\n          updatedPosts.unshift(post);\r\n        }\r\n        \r\n        return {\r\n          posts: updatedPosts,\r\n          isEditing: false,\r\n          editPost: null,\r\n          editLoading: false,\r\n          totalPosts: updatedTotalPosts\r\n        }\r\n        \r\n      })\r\n      //   else if (prevState.posts.length < 2) {\r\n      //     updatedPosts = prevState.posts.concat(post);\r\n      //   }\r\n      //   return {\r\n      //     posts: updatedPosts,\r\n      //     isEditing: false,\r\n      //     editPost: null,\r\n      //     editLoading: false,\r\n      //   };\r\n      // });\r\n\r\n      // this.loadPosts();\r\n      // })\r\n    } catch (err) {\r\n      // .catch((err) => {\r\n      //   console.log(err);\r\n      this.setState({\r\n        isEditing: false,\r\n        editPost: null,\r\n        editLoading: false,\r\n        error: err,\r\n      });\r\n      this.loadPosts();\r\n      // });\r\n    }\r\n  };\r\n\r\n  statusInputChangedHandler = (input, value) => {\r\n    this.setState({ status: value });\r\n  };\r\n\r\n  //   addPost = (post, postCreator) => { NÃO VAMOS MAIS USAR SOCEKTIO..\r\n  //     this.setState(prevState => {\r\n  //                 const updatedPosts = [...prevState.posts];\r\n\r\n  //                 const yourPost = {\r\n  //                   ...post\r\n  //                 }\r\n\r\n  //                 const userId = yourPost.creator.userId;\r\n  //                 yourPost.creator.userId = {\r\n  //                   userId: userId,\r\n  //                   name: postCreator\r\n  //                 };\r\n\r\n  //                 if(prevState.postPage === 1 && prevState.posts.length === 5) {\r\n  //                     // updatedPosts.pop();\r\n  //                     // updatedPosts.unshift(post);\r\n  //                     updatedPosts.unshift(yourPost);\r\n  //                     updatedPosts.pop();\r\n  //                 } else {\r\n  //                     // updatedPosts.unshift(post);\r\n  //                   updatedPosts.unshift(yourPost);\r\n  //                 }\r\n  //                 return {\r\n  //                     posts: updatedPosts,\r\n  //                     totalPosts: prevState.totalPosts + 1\r\n  //                 }\r\n\r\n  //     })\r\n  // }\r\n\r\n  updatePost = (post, postCreator) => {\r\n    this.setState((prevState) => {\r\n      const updatedPosts = [...prevState.posts];\r\n\r\n      // const yourPost = {\r\n      //   ...post\r\n      // }\r\n      // console.log(yourPost);\r\n      // const userId = yourPost.creator.userId;\r\n      // yourPost.creator.userId = {\r\n      //   userId: userId,\r\n      //   name: postCreator\r\n      // };\r\n\r\n      // if(prevState.postPage === 1 && prevState.posts.length === 5) {\r\n      //     // updatedPosts.pop();\r\n      //     // updatedPosts.unshift(post);\r\n      //     // updatedPosts.unshift(yourPost);\r\n      //     updatedPosts.pop();\r\n      // } else {\r\n      //     // updatedPosts.unshift(post);\r\n      //   updatedPosts.unshift(yourPost);\r\n      // }\r\n\r\n      const updatedPostIndex = updatedPosts.findIndex((p) => {\r\n        return post._id === p._id;\r\n      });\r\n\r\n      if (updatedPostIndex > -1) {\r\n        updatedPosts[updatedPostIndex] = post;\r\n      }\r\n      return {\r\n        posts: updatedPosts,\r\n\r\n        // totalPosts: prevState.totalPosts + 1\r\n      };\r\n    });\r\n  };\r\n\r\n  // deletePost = (postId, posts) => { ///código que eu tentei escrever, mas que não deu tão certo...\r\n  //   this.setState(prevState => {\r\n\r\n  //     const updatedPosts = [...prevState.posts];\r\n\r\n  //     const databasePosts = posts;\r\n\r\n  //     const postDeleteIndex = updatedPosts.findIndex(\r\n  //       (post) => {\r\n  //             return post._id === postId\r\n  //       }\r\n  //     )\r\n\r\n  //     const neededDatabasePostIndex = postDeleteIndex + 1;\r\n\r\n  //       if (postDeleteIndex <= 4) {\r\n\r\n  //         updatedPosts[postDeleteIndex] = databasePosts[neededDatabasePostIndex];\r\n  //       }\r\n\r\n  //     return {\r\n  //         posts: updatedPosts\r\n  //         // totalPosts: prevState.totalPosts + 1\r\n  //     }\r\n  // })\r\n\r\n  // }\r\n\r\n  // deletePostHandler = (postId) => {\r\n  //   this.setState({ postsLoading: true });\r\n\r\n  //   fetch(`http://localhost:8080/feed/delete-post/${postId}`, {\r\n  //     // method: 'POST',\r\n  //     method: 'DELETE',\r\n\r\n  //     headers: { //vamos ter que adicionar esse HEADER ESPECÍFICO DE 'Authorization'/token __ _em TODOS OS REQUESTS __ FEITOS NO NOSSO FRONTEND... (menos os de 'login' e 'signup')...\r\n  //       'Authorization': `Bearer ${this.props.token}`, //obs: esse 'Authorization' foi DEFINIDO COMO 'PERMITIDO' lá ___ no 'app.js' DO NOSSO BACKEND, naquele middleware do CORS...\r\n  //       // 'Content-Type': 'application/json' ///PROFESSOR EXPLICA QUE AQUI, NESSE CASE DESSE 'GET REQUEST', não precisamos __ SETTAR 'content-type' como sendo json __ JUSTAMENTE_ PQ NÃO ESTAMOS ENVIANDO NENHUMA DATA CONCRETA, E SIM APENAS UM 'AUTHORIZATION HEADER' no nosso request... (pq REQUESTS DE TIPO GET REALMENTE __ NÃO PODEM/CONSEGUEM ENVIAR BODIES CONSIGO... só headers)...\r\n  //     }\r\n\r\n  //     // headers: {\r\n  //     //   'Content-Type': 'application/json',\r\n  //     // },\r\n  //     // body: JSON.stringify({ ///Não é mais necessário, pois não vamos mais querer extrair o 'postId' de dentro do BODY DO REQUEST de tipo 'POST', e sim vamos extrair LÁ DA URL DESSE REQUEST de method de tipo 'DELETE' (que nunca aceitam BODIES, deve-se relembrar...)\r\n  //     //   postId: postId,\r\n  //     // }),\r\n  //   })\r\n  //     .then((res) => {\r\n  //       if (res.status !== 200 && res.status !== 201) {\r\n  //         throw new Error('Deleting a post failed!');\r\n  //       }\r\n\r\n  //       return res.json();\r\n  //     })\r\n  //     .then((data) => {\r\n  //       console.log(data);\r\n  //       this.setState((prevState) => {\r\n  //         const updatedPosts = prevState.posts.filter((post) => {\r\n  //           return post._id !== postId;\r\n  //         });\r\n  //         return { posts: updatedPosts, postsLoading: false };\r\n  //       });\r\n  //     })\r\n  //     .catch((err) => {\r\n  //       console.log(err);\r\n  //       this.setState({ postsLoading: false });\r\n  //     });\r\n  // };\r\n\r\n  deletePostHandler = async (postId) => {\r\n    try {\r\n      this.setState({ postsLoading: true });\r\n\r\n      const graphqlQuery = {\r\n        query: `\r\n\r\n        mutation DeletePostOperation($postId: ID!) {\r\n              deletePost(postId: $postId) \r\n        }\r\n        \r\n        `,\r\n\r\n        variables: {\r\n          postId: postId\r\n        }\r\n      };\r\n\r\n      const deleteResult = await fetch(\r\n        // `http://localhost:8080/feed/delete-post/${postId}`, ///versão REST API...\r\n        `http://localhost:8080/graphql`, ///VERSÃO _ GRAPHQL_...\r\n\r\n        {\r\n          method: 'POST',\r\n          // method: 'DELETE',\r\n\r\n          headers: {\r\n            //vamos ter que adicionar esse HEADER ESPECÍFICO DE 'Authorization'/token __ _em TODOS OS REQUESTS __ FEITOS NO NOSSO FRONTEND... (menos os de 'login' e 'signup')...\r\n            Authorization: `Bearer ${this.props.token}`, //obs: esse 'Authorization' foi DEFINIDO COMO 'PERMITIDO' lá ___ no 'app.js' DO NOSSO BACKEND, naquele middleware do CORS...\r\n            // 'Content-Type': 'application/json' ///PROFESSOR EXPLICA QUE AQUI, NESSE CASE DESSE 'GET REQUEST', não precisamos __ SETTAR 'content-type' como sendo json __ JUSTAMENTE_ PQ NÃO ESTAMOS ENVIANDO NENHUMA DATA CONCRETA, E SIM APENAS UM 'AUTHORIZATION HEADER' no nosso request... (pq REQUESTS DE TIPO GET REALMENTE __ NÃO PODEM/CONSEGUEM ENVIAR BODIES CONSIGO... só headers)...\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(graphqlQuery),\r\n\r\n          // headers: {\r\n          //   'Content-Type': 'application/json',\r\n          // },\r\n          // body: JSON.stringify({ ///Não é mais necessário, pois não vamos mais querer extrair o 'postId' de dentro do BODY DO REQUEST de tipo 'POST', e sim vamos extrair LÁ DA URL DESSE REQUEST de method de tipo 'DELETE' (que nunca aceitam BODIES, deve-se relembrar...)\r\n          //   postId: postId,\r\n          // }),\r\n        }\r\n      );\r\n\r\n      // .then((res) => {\r\n      // if (deleteResult.status !== 200 && deleteResult.status !== 201) { ///VERSÃO DA REST API...\r\n      //   throw new Error('Deleting a post failed!');\r\n      // }\r\n\r\n      const manipulatedDeleteResult = await deleteResult.json();\r\n\r\n      console.log(manipulatedDeleteResult);\r\n\r\n      if (manipulatedDeleteResult.errors) {\r\n        throw new Error('Post delete failed');\r\n      }\r\n\r\n      this.loadPosts();\r\n\r\n      // return res.json();\r\n      // })\r\n      // .then((data) => {\r\n      // console.log(deleteResult);\r\n      // this.setState((prevState) => {\r\n\r\n      //   console.log(prevState.posts, postId);\r\n      //   const updatedPosts = prevState.posts.filter((post) => {\r\n\r\n      //     return post._id.toString() !== postId.toString();\r\n      //   });\r\n\r\n      //   return { posts: updatedPosts, postsLoading: false };\r\n      // });\r\n\r\n      // })\r\n    } catch (err) {\r\n      // .catch((err) => {\r\n      console.log(err);\r\n      this.setState({ postsLoading: false });\r\n      // });\r\n    }\r\n  };\r\n\r\n  errorHandler = () => {\r\n    this.setState({ error: null });\r\n  };\r\n\r\n  catchError = (error) => {\r\n    this.setState({ error: error });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <ErrorHandler error={this.state.error} onHandle={this.errorHandler} />\r\n        <FeedEdit\r\n          editing={this.state.isEditing}\r\n          selectedPost={this.state.editPost}\r\n          loading={this.state.editLoading}\r\n          onCancelEdit={this.cancelEditHandler}\r\n          onFinishEdit={this.finishEditHandler}\r\n        />\r\n        <section className=\"feed__status\">\r\n          <form onSubmit={this.statusUpdateHandler}>\r\n            <Input\r\n              type=\"text\"\r\n              placeholder=\"Your status\"\r\n              control=\"input\"\r\n              onChange={this.statusInputChangedHandler}\r\n              value={this.state.status}\r\n            />\r\n          { \r\n          \r\n          !this.state.statusLoading ? <Button mode=\"flat\" type=\"submit\">\r\n              Update\r\n            </Button>\r\n            :\r\n            <Loader/>\r\n    }\r\n          </form>\r\n        </section>\r\n        <section className=\"feed__control\">\r\n          <Button mode=\"raised\" design=\"accent\" onClick={this.newPostHandler}>\r\n            New Post\r\n          </Button>\r\n        </section>\r\n        <section className=\"feed\">\r\n          {this.state.postsLoading && (\r\n            <div style={{ textAlign: 'center', marginTop: '2rem' }}>\r\n              <Loader />\r\n            </div>\r\n          )}\r\n          {this.state.posts.length <= 0 && !this.state.postsLoading ? (\r\n            <p style={{ textAlign: 'center' }}>No posts found.</p>\r\n          ) : null}\r\n          {!this.state.postsLoading && (\r\n            <Paginator\r\n              onPrevious={this.loadPosts.bind(this, 'previous')}\r\n              onNext={this.loadPosts.bind(this, 'next')}\r\n              lastPage={Math.ceil(this.state.totalPosts / 5)}\r\n              currentPage={this.state.postPage}\r\n            >\r\n              {this.state.posts.map((post) => (\r\n                <Post\r\n                  key={post._id}\r\n                  id={post._id}\r\n                  // author={post.creator.userId.name}\r\n                  author={post.creator.name}\r\n                  date={new Date(post.createdAt).toLocaleDateString('en-US')}\r\n                  title={post.title}\r\n                  image={post.imageUrl}\r\n                  content={post.content}\r\n                  onStartEdit={this.startEditPostHandler.bind(this, post._id)}\r\n                  onDelete={this.deletePostHandler.bind(this, post._id)}\r\n                  token={this.props.token}\r\n                  userId={this.props.userId}\r\n                />\r\n              ))}\r\n            </Paginator>\r\n          )}\r\n        </section>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Feed;\r\n","import React, { Component } from 'react';\r\n\r\nimport Image from '../../../components/Image/Image';\r\n\r\nimport './SinglePost.css';\r\n\r\nclass SinglePost extends Component {\r\n  state = {\r\n    title: '',\r\n    author: '',\r\n    date: '',\r\n    image: '',\r\n    content: '',\r\n  };\r\n\r\n  componentDidMount() {\r\n    const postId = this.props.match.params.postId;\r\n\r\n    // const graphqlQuery = {\r\n\r\n\r\n    //   query: `\r\n    //   {\r\n    //     getPost(postId: \"${postId}\") {\r\n    //             title\r\n    //             content\r\n    //             imageUrl\r\n    //             creator {\r\n    //               name\r\n    //             }\r\n    //             createdAt\r\n    //           }\r\n    //   }\r\n    //   `\r\n    // }\r\n\r\n\r\n\r\n\r\n    const graphqlQuery = {\r\n\r\n\r\n      query: `\r\n      query getPostOperation ($postId: ID!) {\r\n        getPost(postId: $postId) {\r\n                title\r\n                content\r\n                imageUrl\r\n                creator {\r\n                  name\r\n                }\r\n                createdAt\r\n              }\r\n      }\r\n      `,\r\n      variables: {\r\n        postId: postId\r\n      }\r\n    }\r\n\r\n\r\n    fetch(\r\n      // `http://localhost:8080/feed/post/${postId}`, //versão rest api de nosso código...\r\n      `http://localhost:8080/graphql` //versão graphql....\r\n,\r\n      {\r\n        method: 'POST', //versão graphql\r\n        headers: {\r\n          //vamos ter que adicionar esse HEADER ESPECÍFICO DE 'Authorization'/token __ _em TODOS OS REQUESTS __ FEITOS NO NOSSO FRONTEND... (menos os de 'login' e 'signup')...\r\n          Authorization: `Bearer ${this.props.token}`, //obs: esse 'Authorization' foi DEFINIDO COMO 'PERMITIDO' lá ___ no 'app.js' DO NOSSO BACKEND, naquele middleware do CORS...\r\n          // 'Content-Type': 'application/json' ///PROFESSOR EXPLICA QUE AQUI, NESSE CASE DESSE 'GET REQUEST', não precisamos __ SETTAR 'content-type' como sendo json __ JUSTAMENTE_ PQ NÃO ESTAMOS ENVIANDO NENHUMA DATA CONCRETA, E SIM APENAS UM 'AUTHORIZATION HEADER' no nosso request... (pq REQUESTS DE TIPO GET REALMENTE __ NÃO PODEM/CONSEGUEM ENVIAR BODIES CONSIGO... só headers)...\r\n          'Content-Type': 'application/json' ///versao graphql, precisamos disso....\r\n        },\r\n\r\n        body: JSON.stringify(graphqlQuery)\r\n      }\r\n    )\r\n      .then((res) => {\r\n        // if (res.status !== 200) { ////error handling de REST API, e não de GRAPHQL...\r\n        //   throw new Error('Failed to fetch status');\r\n        // }\r\n\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n\r\n        console.log(data);\r\n        if (data.errors) {\r\n          throw new Error('Post fetch has failed.');\r\n        }\r\n        this.setState({\r\n          // title: data.post.title,\r\n          // author: data.post.creator.name,\r\n          // date: new Date(data.post.createdAt).toLocaleDateString('en-US'),\r\n          // image: data.post.imageUrl,\r\n          // content: data.post.content,\r\n\r\n          title: data.data.getPost.title,\r\n          author: data.data.getPost.creator.name,\r\n          date: new Date(data.data.getPost.createdAt).toLocaleDateString('en-US'),\r\n          image: data.data.getPost.imageUrl,\r\n          content: data.data.getPost.content,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <section className=\"single-post\">\r\n        <h1>{this.state.title}</h1>\r\n        <h2>\r\n          Created by {this.state.author} on {this.state.date}\r\n        </h2>\r\n        <div className=\"single-post__image\">\r\n          <Image\r\n            contain\r\n            imageUrl={`http://localhost:8080/${this.state.image}`}\r\n          />\r\n        </div>\r\n        <p>{this.state.content}</p>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SinglePost;\r\n","import React from 'react'; //PRESENTATIONAL COMPONENT. Serve para wrappar nossas 'PAGES' de 'LOGIN' e 'SIGNUP', adicionar o style de 'auth-form' a eles...\r\n\r\nimport './Auth.css';\r\n\r\nconst auth = (props) => {\r\n        return (<section className=\"auth-form\">{props.children}</section>)\r\n}\r\n\r\n\r\n\r\nexport default auth;","import React, { Component } from 'react';\r\n\r\nimport Input from '../../components/Form/Input/Input';\r\n\r\nimport Button from '../../components/Button/Button';\r\n\r\nimport { required, length, email } from '../../util/validators';\r\n\r\nimport Auth from './Auth';\r\n\r\nclass Login extends Component {\r\n  state = {\r\n    loginForm: {\r\n      email: {\r\n        value: '',\r\n        valid: false,\r\n        touched: false,\r\n        validators: [required, email],\r\n      },\r\n\r\n      password: {\r\n        value: '',\r\n        valid: false,\r\n        touched: false,\r\n        validators: [required, length({ min: 5 })],\r\n      },\r\n      formIsValid: false,\r\n    },\r\n  };\r\n\r\n  inputChangedHandler = (input, value) => {\r\n    this.setState((prevState) => {\r\n      let isValid = true;\r\n      for (const validator of prevState.loginForm[input].validators) {\r\n        isValid = isValid && validator(value);\r\n      }\r\n\r\n      const updatedForm = {\r\n        ...prevState.loginForm,\r\n        [input]: {\r\n          ...prevState.loginForm[input],\r\n          valid: isValid,\r\n          value: value,\r\n        },\r\n      };\r\n\r\n      let formIsValid = true;\r\n      for (const inputName in updatedForm) {\r\n        formIsValid = formIsValid && updatedForm[inputName].valid;\r\n      }\r\n\r\n      return {\r\n        loginForm: updatedForm,\r\n        formIsValid: formIsValid,\r\n      };\r\n    });\r\n  };\r\n\r\n  inputBlurHandler = (input) => {\r\n    this.setState((prevState) => {\r\n      return {\r\n        loginForm: {\r\n          ...prevState.loginForm,\r\n          [input]: {\r\n            ...prevState.loginForm[input],\r\n            touched: true,\r\n          },\r\n        },\r\n      };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Auth>\r\n        <form\r\n          onSubmit={(event) => {\r\n            return this.props.onLogin(event, {\r\n              email: this.state.loginForm.email.value,\r\n              password: this.state.loginForm.password.value,\r\n            });\r\n          }}\r\n        >\r\n          <Input\r\n            id=\"email\"\r\n            label=\"Your E-Mail\"\r\n            type=\"email\"\r\n            control=\"input\"\r\n            onChange={this.inputChangedHandler}\r\n            onBlur={this.inputBlurHandler.bind(this, 'email')}\r\n            value={this.state.loginForm['email'].value}\r\n            valid={this.state.loginForm['email'].valid}\r\n            touched={this.state.loginForm['email'].touched}\r\n          />\r\n          <Input\r\n            id=\"password\"\r\n            label=\"Password\"\r\n            type=\"password\"\r\n            control=\"input\"\r\n            onChange={this.inputChangedHandler}\r\n            onBlur={this.inputBlurHandler.bind(this, 'password')}\r\n            value={this.state.loginForm['password'].value}\r\n            valid={this.state.loginForm['password'].valid}\r\n            touched={this.state.loginForm['password'].touched}\r\n          />\r\n          <Button design=\"raised\" type=\"submit\" loading={this.props.loading}>\r\n            Login\r\n          </Button>\r\n        </form>\r\n      </Auth>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import React, { Component } from 'react';\r\n\r\nimport Input from '../../components/Form/Input/Input';\r\nimport Button from '../../components/Button/Button';\r\n\r\nimport {\r\n  required,\r\n  length,\r\n  email,\r\n  isEqualToPassword,\r\n  isLetter,\r\n} from '../../util/validators';\r\n\r\nimport Auth from './Auth';\r\n\r\nclass Signup extends Component {\r\n  state = {\r\n    signupForm: {\r\n      email: {\r\n        value: '',\r\n        valid: false,\r\n        touched: false,\r\n        validators: [required, email],\r\n      },\r\n      password: {\r\n        value: '',\r\n        valid: false,\r\n        touched: false,\r\n        validators: [required, length({ min: 7 })],\r\n      },\r\n      confirmPassword: {\r\n        value: '',\r\n        valid: false,\r\n        touched: false,\r\n        validators: [required, isEqualToPassword],\r\n      },\r\n\r\n      name: {\r\n        value: '',\r\n        valid: false,\r\n        touched: false,\r\n        validators: [required, isLetter, length({min: 6})],\r\n      },\r\n      formIsValid: false,\r\n    },\r\n  };\r\n\r\n  inputChangedHandler = (input, value) => {\r\n    this.setState((prevState) => {\r\n      let isValid = true;\r\n      for (const validator of prevState.signupForm[input].validators) {\r\n        isValid =\r\n          isValid && validator(value, this.state.signupForm.password.value);\r\n      }\r\n\r\n      const updatedForm = {\r\n        ...prevState.signupForm,\r\n        [input]: {\r\n          ...prevState.signupForm[input],\r\n          valid: isValid,\r\n          value: value,\r\n        },\r\n      };\r\n\r\n      let formIsValid = true;\r\n      for (const inputName in updatedForm) {\r\n        formIsValid = formIsValid && updatedForm[inputName].valid;\r\n      }\r\n\r\n      return {\r\n        signupForm: updatedForm,\r\n        formIsValid: formIsValid,\r\n      };\r\n    });\r\n  };\r\n\r\n  inputBlurHandler = (input) => {\r\n    this.setState((prevState) => {\r\n      return {\r\n        signupForm: {\r\n          ...prevState.signupForm,\r\n          [input]: {\r\n            ...prevState.signupForm[input],\r\n            touched: true,\r\n          },\r\n        },\r\n      };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Auth>\r\n        <form\r\n          onSubmit={(event) => {\r\n            return this.props.onLogin(event, {\r\n              email: this.state.signupForm.email.value,\r\n              password: this.state.signupForm.password.value,\r\n              name: this.state.signupForm.name.value,\r\n              confirmPassword: this.state.signupForm.confirmPassword.value\r\n            });\r\n          }}\r\n        >\r\n          <Input\r\n            id=\"email\"\r\n            label=\"Your E-Mail\"\r\n            type=\"email\"\r\n            control=\"input\"\r\n            onChange={this.inputChangedHandler}\r\n            onBlur={this.inputBlurHandler.bind(this, 'email')}\r\n            value={this.state.signupForm['email'].value}\r\n            valid={this.state.signupForm['email'].valid}\r\n            touched={this.state.signupForm['email'].touched}\r\n          />\r\n          <Input\r\n            id=\"name\"\r\n            label=\"Your name\"\r\n            type=\"text\"\r\n            control=\"input\"\r\n            onChange={this.inputChangedHandler}\r\n            onBlur={this.inputBlurHandler.bind(this, 'name')}\r\n            value={this.state.signupForm['name'].value}\r\n            valid={this.state.signupForm['name'].valid}\r\n            touched={this.state.signupForm['name'].touched}\r\n          />\r\n          <Input\r\n            id=\"password\"\r\n            label=\"Password\"\r\n            type=\"password\"\r\n            control=\"input\"\r\n            onChange={this.inputChangedHandler}\r\n            onBlur={this.inputBlurHandler.bind(this, 'password')}\r\n            value={this.state.signupForm['password'].value}\r\n            valid={this.state.signupForm['password'].valid}\r\n            touched={this.state.signupForm['password'].touched}\r\n          />\r\n\r\n          <Input\r\n            id=\"confirmPassword\"\r\n            label=\"confirm Password\"\r\n            type=\"password\"\r\n            control=\"input\"\r\n            onChange={this.inputChangedHandler}\r\n            onBlur={this.inputBlurHandler.bind(this, 'confirmPassword')}\r\n            value={this.state.signupForm['confirmPassword'].value}\r\n            valid={this.state.signupForm['confirmPassword'].valid}\r\n            touched={this.state.signupForm['confirmPassword'].touched}\r\n          />\r\n          {!this.state.signupForm.confirmPassword.valid &&\r\n            this.state.signupForm.confirmPassword.touched && (\r\n              <p style={{ color: '#3b0062' }}>Passwords do not match.</p>\r\n            )}\r\n          <Button\r\n            design=\"raised\"\r\n            type=\"submit\"\r\n            loading={this.props.loading}\r\n            disabled={\r\n              !this.state.signupForm.confirmPassword.valid ||\r\n              !this.state.signupForm.password.valid ||\r\n              !this.state.signupForm.name.valid ||\r\n              !this.state.signupForm.email.valid\r\n            }\r\n          >\r\n            signup\r\n          </Button>\r\n        </form>\r\n      </Auth>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Signup;\r\n","import React, { Component, Fragment } from 'react';\r\n\r\nimport { Route, Switch, Redirect, withRouter } from 'react-router-dom';\r\n\r\nimport Layout from './components/Layout/Layout';\r\n\r\nimport Backdrop from './components/Backdrop/Backdrop';\r\n\r\nimport Toolbar from './components/Toolbar/Toolbar';\r\n\r\nimport MainNavigation from './components/Navigation/MainNavigation/MainNavigation';\r\n\r\nimport MobileNavigation from './components/Navigation/MobileNavigation/MobileNavigation';\r\n\r\nimport ErrorHandler from './components/ErrorHandler/ErrorHandler';\r\n\r\nimport FeedPage from './pages/Feed/Feed'; ////page component....\r\n\r\nimport SinglePostPage from './pages/Feed/SinglePost/SinglePost'; //page component (props repassados a ela, como METHODS...)\r\n\r\nimport LoginPage from './pages/Auth/Login'; ///page component\r\n\r\nimport SignupPage from './pages/Auth/Signup'; //page component\r\n\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    ////state INICIAL de nosso app...\r\n    showBackdrop: false,\r\n    showMobileNav: false,\r\n    // isAuth: true,\r\n    isAuth: false,\r\n    token: null, ///vamos armazenar a token OBTIDA LÁ NO BACKEND, aqui, no BROWSERSIDE, para ser anexada aos nossos requests QUE VÃO PRECISAR DESSA TOKEN PARA SEREM 'authorized'...\r\n    userId: null,\r\n    authLoading: false,\r\n    error: null,\r\n  };\r\n\r\n  componentDidMount() {\r\n    const token = localStorage.getItem('token'); //vai fazer o get de nossa token ao ser montado nosso app ( app geral) \r\n    const expiryDate = localStorage.getItem('expiryDate');\r\n\r\n    if (!token || !expiryDate) { ///if checks preventivos de login (se o user não tiver a token/token tiver expirado, não vamos renderizar o resto do nosso app)...\r\n      return;\r\n    }\r\n\r\n    if (new Date(expiryDate) <= new Date()) {\r\n      this.logoutHandler();\r\n      return;\r\n    }\r\n\r\n    const userId = localStorage.getItem('userId');\r\n    const remainingMilliseconds =\r\n      new Date(expiryDate).getTime() - new Date().getTime();\r\n    this.setState({ isAuth: true, \r\n      token: token, ///vai fazer o set de nossa token no STATE de nosso frontend, se passarmos por aqueles if checks preventivos....\r\n      \r\n      \r\n      userId: userId }); \r\n    this.setAutoLogout(remainingMilliseconds);\r\n  }\r\n\r\n  mobileNavHandler = (isOpen) => {\r\n    this.setState({ showMobileNav: isOpen, showBackdrop: isOpen });\r\n  };\r\n\r\n  backdropClickHandler = () => {\r\n    this.setState({ showMobileNav: false, showBackdrop: false, error: null });\r\n  };\r\n\r\n  logoutHandler = () => {\r\n    this.setState({ isAuth: false, token: null });\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('expiryDate');\r\n    localStorage.removeItem('userId');\r\n  };\r\n\r\n  // loginHandler = (event, authData) => { ///VERSÃO PROMISES (then e catch) do código...\r\n  //   event.preventDefault();\r\n  //   this.setState({ authLoading: true });\r\n  //   fetch(\r\n  //     'http://localhost:8080/auth/login',\r\n\r\n  //     {\r\n  //       body: JSON.stringify({\r\n  //         email: authData.email,\r\n  //         password: authData.password,\r\n  //       }),\r\n  //       headers: {\r\n  //         'Content-Type': 'application/json',\r\n  //       },\r\n  //       method: 'POST',\r\n  //       ///EIS O CÓDIGO EM QUESTÃO.\r\n  //     }\r\n  //   )\r\n  //     .then((res) => {\r\n  //       if (res.status === 422) {\r\n  //         throw new Error('Validation failed.');\r\n  //       }\r\n\r\n  //       if (res.status !== 200 && res.status !== 201) {\r\n  //         throw new Error('Could not authenticate you!');\r\n  //       }\r\n\r\n  //       return res.json();\r\n  //     })\r\n  //     .then((data) => {\r\n  //       console.log(data);\r\n\r\n  //       this.setState({\r\n  //         isAuth: true,\r\n  //         token: data.token,\r\n  //         authLoading: false,\r\n  //         userId: data.userId,\r\n  //       });\r\n  //       localStorage.setItem('token', data.token);\r\n  //       localStorage.setItem('userId', data.userId);\r\n  //       const remainingMilliseconds = 60 * 60 * 1000; ///3600 segundos, 1 hora.\r\n  //       const expiryDate = new Date(\r\n  //         new Date().getTime() + remainingMilliseconds\r\n  //       );\r\n  //       localStorage.setItem('expiryDate', expiryDate.toISOString());\r\n  //       this.setAutoLogout(remainingMilliseconds);\r\n  //     })\r\n  //     .catch((err) => {\r\n  //       console.log(err);\r\n  //       this.setState({\r\n  //         isAuth: false,\r\n  //         authLoading: false,\r\n  //         error: err,\r\n  //       });\r\n  //     });\r\n  // };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  loginHandler = async (event, authData) => {\r\n\r\n\r\n\r\n    try {\r\n\r\n    \r\n    event.preventDefault();\r\n    this.setState({ authLoading: true });\r\n  //  const loginResult = await fetch(\r\n  //     'http://localhost:8080/auth/login',\r\n\r\n  //     {\r\n  //       body: JSON.stringify({\r\n  //         email: authData.email,\r\n  //         password: authData.password,\r\n  //       }),\r\n  //       headers: {\r\n  //         'Content-Type': 'application/json',\r\n  //       },\r\n  //       method: 'POST',\r\n  //       ///EIS O CÓDIGO EM QUESTÃO.\r\n  //     }\r\n  //   );\r\n  const graphqlQuery = {\r\n        //sempre será esta estrutura..\r\n    query:  //quando tratamos de umA QUERY PURA, sem 'mutation' ou 'subscription', PODEMOS OMITIR AQUELE 'query' em 'query: `query {}` ' --> colocamos só o OBJETO SOLTO, no caso....\r\n    ///aqui TAMBÉM VAMOS USAR 'VARIABLES GRAPHQL'...\r\n    ` \r\n       query LoginUserOperation ($email: String!, $password: String!)  {\r\n      loginUser(\r\n        email: $email\r\n        password: $password\r\n     ) {\r\n          token\r\n          userId\r\n        }\r\n    }\r\n    `,\r\n\r\n    variables: {\r\n      email: authData.email,\r\n      password: authData.password\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n//   const graphqlQuery = { ////estrutura CLÁSSICA, sem o uso dos 'GRAPHQL VARIABLES', como os de cima...\r\n//     //sempre será esta estrutura..\r\n// query:  //quando tratamos de umA QUERY PURA, sem 'mutation' ou 'subscription', PODEMOS OMITIR AQUELE 'query' em 'query: `query {}` ' --> colocamos só o OBJETO SOLTO, no caso....\r\n// ///aqui TAMBÉM VAMOS USAR 'VARIABLES GRAPHQL'...\r\n// ` \r\n//    {\r\n//   loginUser(\r\n//     email: \"${authData.email}\" \r\n//     password: \"${authData.password}\"\r\n//  ) {\r\n//       token\r\n//       userId\r\n//     }\r\n// }\r\n// `,\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const loginResult = await fetch(\r\n    'http://localhost:8080/graphql',\r\n\r\n    {\r\n      body: JSON.stringify(graphqlQuery),\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      method: 'POST',\r\n      ///EIS O CÓDIGO EM QUESTÃO.\r\n    }\r\n  );\r\n\r\n\r\n  const manipulatedLoginResult = await loginResult.json();\r\n\r\n  console.log(manipulatedLoginResult)\r\n\r\n  // console.log(manipulatedLoginResult);\r\n\r\n        if (manipulatedLoginResult.errors && manipulatedLoginResult.errors[0].status) {\r\n          throw new Error('Validation failed. Please make sure that the email has not been used before, and that the inputted data is valid.');\r\n        }\r\n\r\n        if (manipulatedLoginResult.errors) {\r\n          throw new Error('Could not log you in!');\r\n        }\r\n\r\n  \r\n\r\n        // const decryptedResult = await loginResult.json();\r\n        // return res.json();\r\n      // })\r\n      // .then((data) => {\r\n        // console.log(loginResult);\r\n\r\n        this.setState({\r\n          isAuth: true,\r\n          // token: decryptedResult.token,\r\n          token: manipulatedLoginResult.data.loginUser.token,\r\n          userId: manipulatedLoginResult.data.loginUser._id,\r\n          authLoading: false,\r\n          // userId: decryptedResult.userId,\r\n        });\r\n        // localStorage.setItem('token', decryptedResult.token);\r\n        // localStorage.setItem('userId', decryptedResult.userId);\r\n        localStorage.setItem('token', manipulatedLoginResult.data.loginUser.token);\r\n        localStorage.setItem('userId', manipulatedLoginResult.data.loginUser.userId);\r\n        const remainingMilliseconds = 60 * 60 * 1000; ///3600 segundos, 1 hora.\r\n        const expiryDate = new Date(\r\n          new Date().getTime() + remainingMilliseconds\r\n        );\r\n        localStorage.setItem('expiryDate', expiryDate.toISOString());\r\n        this.setAutoLogout(remainingMilliseconds);\r\n      // })\r\n    } catch(err) {\r\n      console.log(err);\r\n      this.setState({\r\n        isAuth: false,\r\n        authLoading: false,\r\n        error: err,\r\n      });\r\n    }\r\n      // .catch((err) => {\r\n\r\n      // });\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // signupHandler = (event, authData) => { ///CÓDIGO SEM ASYNC/AWAIT...\r\n  //   event.preventDefault();\r\n  //   this.setState({ authLoading: true });\r\n  //   // fetch('URL')\r\n  //   fetch('http://localhost:8080/auth/signup', {\r\n  //     method: 'PUT',\r\n  //     body: JSON.stringify({\r\n  //       name: authData.name,\r\n  //       email: authData.email,\r\n  //       password: authData.password,\r\n  //       confirmPassword: authData.confirmPassword,\r\n  //     }),\r\n  //     headers: {\r\n  //       'Content-Type': 'application/json', ///ESQUECI DE COLOCAR, MAS É ESSENCIAL.\r\n  //     },\r\n  //   })\r\n  //     .then((res) => {\r\n  //       if (res.status === 422) {\r\n  //         throw new Error(\r\n  //           'Validation failed. Make sure the email address is unused.'\r\n  //         );\r\n  //       }\r\n\r\n  //       if (res.status !== 200 && res.status !== 201) {\r\n  //         throw new Error('Creating a user failed!');\r\n  //       }\r\n\r\n  //       return res.json();\r\n  //     })\r\n  //     .then((data) => {\r\n  //       console.log(data);\r\n  //       this.setState({\r\n  //         isAuth: false,\r\n  //         authLoading: false,\r\n  //       });\r\n  //       this.props.history.replace('/'); ///routing prop....\r\n  //     })\r\n  //     .catch((err) => {\r\n  //       console.log(err);\r\n  //       this.setState({\r\n  //         isAuth: false,\r\n  //         authLoading: false,\r\n  //         error: err,\r\n  //       });\r\n  //     });\r\n  // };\r\n\r\n\r\n\r\n\r\n  // signupHandler = async (event, authData) => { ///versão REST API/restful, ou APLICATIVO CLÁSSICO NODEEXPRESS...\r\n\r\n  //   try {\r\n\r\n    \r\n  //   event.preventDefault();\r\n  //   this.setState({ authLoading: true });\r\n  //   // fetch('URL')\r\n  //   const fetchedResponse = await fetch('http://localhost:8080/auth/signup', {\r\n  //     method: 'PUT',\r\n  //     body: JSON.stringify({\r\n  //       name: authData.name,\r\n  //       email: authData.email,\r\n  //       password: authData.password,\r\n  //       confirmPassword: authData.confirmPassword,\r\n  //     }),\r\n  //     headers: {\r\n  //       'Content-Type': 'application/json', ///ESQUECI DE COLOCAR, MAS É ESSENCIAL.\r\n  //     },\r\n  //   })\r\n  //     // .then((res) => {\r\n  //       if (fetchedResponse.status === 422) {\r\n  //         throw new Error(\r\n  //           'Validation failed. Make sure the email address is unused.'\r\n  //         );\r\n  //       }\r\n\r\n  //       if (fetchedResponse.status !== 200 && fetchedResponse.status !== 201) {\r\n  //         throw new Error('Creating a user failed!');\r\n  //       }\r\n\r\n  //       // return res.json();\r\n  //     // })\r\n  //     // .then((data) => {\r\n  //       console.log(fetchedResponse);\r\n  //       this.setState({\r\n  //         isAuth: false,\r\n  //         authLoading: false,\r\n  //       });\r\n  //       this.props.history.replace('/'); ///routing prop....\r\n  //     // })\r\n  //   } catch (err) {\r\n  //     // .catch((err) => {\r\n  //       console.log(err);\r\n  //       this.setState({\r\n  //         isAuth: false,\r\n  //         authLoading: false,\r\n  //         error: err,\r\n\r\n  //       })\r\n  //     }\r\n  //   }\r\n  //       // });\r\n  //     // });\r\n\r\n\r\n\r\n      signupHandler = async (event, authData) => { ///versão GRAPHQL do SEND DE REQUESTS a nosso backend.... (endpoint único, method de tipo POST, e inserção de 'GRAPHICAL QUERY' no body do request... são características do graphql no backend....).\r\n\r\n        try {\r\n    \r\n        \r\n        event.preventDefault();\r\n        this.setState({ authLoading: true });\r\n        // fetch('URL')\r\n        // const fetchedResponse = await fetch('http://localhost:8080/auth/signup', {\r\n\r\n\r\n        console.log(authData.email, authData.password, authData.name);\r\n          const graphqlQuery = { ///será INSERIDA NO NOSSO BODY...\r\n\r\n\r\n              query: `\r\n              mutation CreateUserOperation {\r\n                createUser(userInput: {email: $email, name: $name, password: $password}) {\r\n                  _id\r\n                  email\r\n                }\r\n              }\r\n              `,\r\n\r\n              variables: {\r\n                email: authData.email,\r\n                password: authData.password,\r\n                name: authData.name\r\n              }\r\n          }\r\n\r\n\r\n\r\n\r\n\r\n        //   const graphqlQuery = { ///será INSERIDA NO NOSSO BODY... --> versão clássica, SEM __ AS 'GRAPHQL VARIABLES'...\r\n\r\n\r\n        //     query: `\r\n        //     mutation {\r\n        //       createUser(userInput: {email: \"${\r\n        //         authData.email\r\n        //       }\", name:\"${authData.name}\", password:\"${\r\n        //     authData.password\r\n        //   }\"}) {\r\n        //         _id\r\n        //         email\r\n        //       }\r\n        //     }\r\n        //     `\r\n        // }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n          const fetchedResponse = await fetch('http://localhost:8080/graphql', {\r\n          // method: 'PUT',\r\n          method: 'POST',\r\n          // body: JSON.stringify({\r\n          //   name: authData.name,\r\n          //   email: authData.email,\r\n          //   password: authData.password,\r\n          //   confirmPassword: authData.confirmPassword,\r\n          // }),\r\n          body: JSON.stringify(graphqlQuery), //ainda vamos ter que STRINGIFAR nosso body com a query... (Exatamente como fazíamos/fazemos na REST API/app clássico nodeexpress...)\r\n\r\n\r\n          headers: {\r\n            'Content-Type': 'application/json', ///ESQUECI DE COLOCAR, MAS É ESSENCIAL. -->ESSE HEADER TAMBÉM É USADO NA VERSÃO 'GRAPHQL' DE backends...\r\n          },\r\n        })\r\n\r\n\r\n        console.log(fetchedResponse);\r\n\r\n            // if (fetchedResponse.status === 422) {\r\n            //   throw new Error(\r\n            //     'Validation failed. Make sure the email address is unused.'\r\n            //   );\r\n            // }\r\n    \r\n            // if (fetchedResponse.status !== 200 && fetchedResponse.status !== 201) {\r\n            //   throw new Error('Creating a user failed!');\r\n            // }\r\n\r\n\r\n          const manipulatedFetchedResponse = await fetchedResponse.json();\r\n\r\n\r\n          console.log(manipulatedFetchedResponse);\r\n\r\n          if(manipulatedFetchedResponse.errors && manipulatedFetchedResponse[0].status === 422) { ///ERROR HANDLING DO 'GRAPHQL'...\r\n            throw new Error(\"Validation failed. Make sure the email address is unused!\");\r\n      }\r\n\r\n\r\n      if (manipulatedFetchedResponse.errors) { ///ERROR HANDLING DO GRAPHQL....\r\n        throw new Error('User creation failed.');\r\n      }\r\n\r\n\r\n      console.log(manipulatedFetchedResponse);\r\n            this.setState({\r\n              isAuth: false,\r\n              authLoading: false,\r\n            });\r\n            this.props.history.replace('/'); ///routing prop....\r\n          // })\r\n        } catch (err) {\r\n          // .catch((err) => {\r\n            console.log(err);\r\n            this.setState({\r\n              isAuth: false,\r\n              authLoading: false,\r\n              error: err,\r\n    \r\n            })\r\n          }\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  setAutoLogout = (milliseconds) => {\r\n    setTimeout(() => {\r\n      this.logoutHandler();\r\n    }, milliseconds);\r\n  };\r\n\r\n  errorHandler = () => {\r\n    this.setState({ error: null });\r\n  };\r\n\r\n  render() {\r\n    let routes = (\r\n      <Switch>\r\n        <Route\r\n          path=\"/\"\r\n          exact\r\n          render={(props) => (\r\n            <LoginPage\r\n              {...props} //usado para OBTER OS 'ROUTING-RELATED PROPS'... (para fzer coisas como REDIRECTS...)\r\n              onLogin={this.loginHandler}\r\n              loading={this.state.authLoading}\r\n            />\r\n          )}\r\n        />\r\n        <Route\r\n          path=\"/signup\"\r\n          exact\r\n          render={(props) => (\r\n            <SignupPage\r\n              {...props}\r\n              onLogin={this.signupHandler}\r\n              loading={this.state.authLoading}\r\n            />\r\n          )}\r\n        />\r\n        <Redirect to=\"/\" />\r\n      </Switch>\r\n    );\r\n\r\n    if (this.state.isAuth) {\r\n      routes = (\r\n        <Switch>\r\n          <Route\r\n            path=\"/\"\r\n            exact\r\n            render={(props) => (\r\n              <FeedPage userId={this.state.userId} \r\n              \r\n              token={this.state.token} //prop extremamente importante, usado no método de 'loadPosts()'...\r\n               />\r\n            )}\r\n          />\r\n          <Route\r\n            path=\"/:postId\"\r\n            render={(props) => (\r\n              <SinglePostPage\r\n                {...props}\r\n                userId={this.state.userId}\r\n                token={this.state.token}\r\n              />\r\n            )}\r\n          />\r\n          <Redirect to=\"/\" />\r\n        </Switch>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Fragment>\r\n        {this.state.showBackdrop && (\r\n          <Backdrop onClick={this.backdropClickHandler} />\r\n        )}\r\n        <ErrorHandler error={this.state.error} onHandle={this.errorHandler} />\r\n        <Layout\r\n          header={\r\n            <Toolbar>\r\n              <MainNavigation\r\n                onOpenMobileNav={this.mobileNavHandler.bind(this, true)}\r\n                onLogout={this.logoutHandler}\r\n                isAuth={this.state.isAuth}\r\n              />\r\n            </Toolbar>\r\n          }\r\n          mobileNav={\r\n            <MobileNavigation\r\n              open={this.state.showMobileNav}\r\n              mobile\r\n              onChooseItem={this.mobileNavHandler.bind(this, false)}\r\n              onLogout={this.logoutHandler}\r\n              isAuth={this.state.isAuth}\r\n            />\r\n          }\r\n        />\r\n        {routes}\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(App);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\n"],"sourceRoot":""}