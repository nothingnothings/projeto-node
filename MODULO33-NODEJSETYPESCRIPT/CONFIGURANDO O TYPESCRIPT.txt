













--> BEM... O PROFESSOR NÃO VAI MOSTRAR TODOS OS DATA TYPES POSSÍVEIS 



NO 


TYPESCRIPT... -> EM VEZ DISSO,

ELE FOCARÁ 




EM UM PUNHADO DE CORE FEATURES,









___ PORTANTO, COMO PRÓXIMA ETAPA,


ELE DIZ QUE 
DEVEMOS  __ 


ADICIONAR UMA _ CONFIGURATION AO NOSSO PRJETO,



TUDO PARA QUE 



ELE 

POSSA 

NOS MOSTRAR ALGUMAS 



'CORE SETTINGS',




especialmemnte 

uma 


CORE SETTING LÁ...












--> PARA ISSO, 

DEVEMOS ADICIONAR 



1 ARQUIVO CONFIG AO NOSSO PROJETO,



arquivo que será então CONSIDERADO PELO COMPILER DO TYPESCRIPT....










--> PARA ISSO,


VOCÊ DEVE RODAR 

'tsc --init' --> ISSO VAI ADICIONAR UM ARQUIVO DE 


'tsconfig.json'

NO 




ROOT DO SEU PROJETO....














---> ESSE ARQUIVO É GIGANTE,

E TEM UM MONTE DE OPÇÕES QUE VOCÊ PODE SETTAR:










{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig.json to read more about this file */

    /* Projects */
    // "incremental": true,                              /* Enable incremental compilation */
    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
    // "tsBuildInfoFile": "./",                          /* Specify the folder for .tsbuildinfo incremental compilation files. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

    /* Language and Environment */
    "target": "es2016",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    // "lib": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */
    // "jsx": "preserve",                                /* Specify what JSX code is generated. */
    // "experimentalDecorators": true,                   /* Enable experimental support for TC39 stage 2 draft decorators. */
    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h' */
    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using `jsx: react-jsx*`.` */
    // "reactNamespace": "",                             /* Specify the object invoked for `createElement`. This only applies when targeting `react` JSX emit. */
    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */

    /* Modules */
    "module": "commonjs",                                /* Specify what module code is generated. */
    // "rootDir": "./",                                  /* Specify the root folder within your source files. */
    // "moduleResolution": "node",                       /* Specify how TypeScript looks up a file from a given module specifier. */
    // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
    // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
    // "typeRoots": [],                                  /* Specify multiple folders that act like `./node_modules/@types`. */
    // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
    // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
    // "resolveJsonModule": true,                        /* Enable importing .json files */
    // "noResolve": true,                                /* Disallow `import`s, `require`s or `<reference>`s from expanding the number of files TypeScript should add to a project. */

    /* JavaScript Support */
    // "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the `checkJS` option to get errors from these files. */
    // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from `node_modules`. Only applicable with `allowJs`. */

    /* Emit */
    // "declaration": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    // "declarationMap": true,                           /* Create sourcemaps for d.ts files. */
    // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
    // "sourceMap": true,                                /* Create source map files for emitted JavaScript files. */
    // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If `declaration` is true, also designates a file that bundles all .d.ts output. */
    // "outDir": "./",                                   /* Specify an output folder for all emitted files. */
    // "removeComments": true,                           /* Disable emitting comments. */
    // "noEmit": true,                                   /* Disable emitting files from a compilation. */
    // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // "importsNotUsedAsValues": "remove",               /* Specify emit/checking behavior for imports that are only used for types */
    // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
    // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
    // "stripInternal": true,                            /* Disable emitting declarations that have `@internal` in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like `__extends` in compiled output. */
    // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
    // "preserveConstEnums": true,                       /* Disable erasing `const enum` declarations in generated code. */
    // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */
    // "preserveValueImports": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */

    /* Interop Constraints */
    // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
    // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */
    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */

    /* Type Checking */
    "strict": true,                                      /* Enable all strict type-checking options. */
    // "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied `any` type.. */
    // "strictNullChecks": true,                         /* When type checking, take into account `null` and `undefined`. */
    // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    // "strictBindCallApply": true,                      /* Check that the arguments for `bind`, `call`, and `apply` methods match the original function. */
    // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
    // "noImplicitThis": true,                           /* Enable error reporting when `this` is given the type `any`. */
    // "useUnknownInCatchVariables": true,               /* Type catch clause variables as 'unknown' instead of 'any'. */
    // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
    // "noUnusedLocals": true,                           /* Enable error reporting when a local variables aren't read. */
    // "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read */
    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
    // "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
    // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
    // "noUncheckedIndexedAccess": true,                 /* Include 'undefined' in index signature results */
    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type */
    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true                                 /* Skip type checking all .d.ts files. */
  }
}


















---------> PROFESSOR APONTA QUE VOCÊ PODE LER 


TODOS OS COMMENTS QUE TEMOS AQUI,







E ELE FALA 

SOBRE 

AS OPÇÕES EM GRANDE DETALHE 


NO CURSO DE TYPESCRIPT...










--> O PROFESSOR VAI DEIXAR A GRANDE MAIORIA 

DAS 

OPÇÕES DO JEITO QUE ESTá...










--> MAS O PROFESSOR QUER FALAR DAQUELA OPÇÃO 


'strict: true',


QUE É IMPORTANTE....












--> O PROFESSOR APONTA QUE O 'STRICT MODE' 

É 


GERALMENTE __ENCORAJADO __ POR DESENVOLVEDORES... -------> O 



STRICT TRUE 




FAZ COM QUE 



CERTAS COISAS QUE ERAM NORMALMENTE PERMITIDAS 

EM JAVASCRIPT __ SEREM CONSIDERADAS __ PROIBIDAS 

PELO TYPESCRIPT/avisos.... 















--> E NÓS VEMOS ISSO LÁ NO NOSSO ARQUIVO 'app.ts':









SÓ PELO ADD DESSE ARQUIVO __ DE CONFIG/CONFIGURAÇÃO,





NOSSO CÓDIGO 

DE 

'app.ts'


JÁ 

VEM COM UM 

NOVO AVISO/ERRO....















--> O ERROR/AVISO  QUE VAMOS OBTER É:

'

Object is possibly null'  












--> E ISSO ACONTECEU DEVIDO A UMA FEATURE DO 

'STRICT MODE'... -------->   É A FEATURE DE 



'strictNullChecks: true',




QUE 




__ ESTÁ COMO 'true'...










TODOS OS CHECKS/propriedades CORRELATOS à 'strict',

QUANDO VOCÊ 

INICIALIZA ESSE ARQUIVO 

'tsconfig.json' por meio de '''tsc --init''',






ESTARÃO COMO TRUE:



    /* Type Checking */
    "strict": true,                                      /* Enable all strict type-checking options. */
    // "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied `any` type.. */
    // "strictNullChecks": true,                         /* When type checking, take into account `null` and `undefined`. */
    // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    // "strictBindCallApply": true,                      /* Check that the arguments for `bind`, `call`, and `apply` methods match the original function. */
    // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
    // "noImplicitThis": true,                           /* Enable error reporting when `this` is given the type `any`. */
    // "useUnknownInCatchVariables": true,               /* Type catch clause variables as 'unknown' instead of 'any'. */
    // "alwaysStrict": true









-------------------------------------------










ALTERNATIVAMENTE,


SE VOCê NÃO QUISER 'strict: true',


você 

__comentaria _ ESSA FEATURE PARA FORA,


e aí 


VERIA QUAIS FEATURES LOGO ABAIXO DELE VOCÊ MANTERIA...






EX:



    "strict": true,                                      /* Enable all strict type-checking options. */





-----------------------------












OK... ESTÃO TODOS SETTADOS COMO 'true'... 











E 1 DESSAS OPÇÕES/PROPRIEDADES,


NOS DITA QUE 



'SERÁ ATIRADO 1 ERROR SE VOCê tentar FAZER CALL DE ALGO EM __ ALGUMA OUTRA COISA,

COISA QUE PODERÁ/POSSUI A POSSIBILIDADE DE SER/ESTAR 'null' ' ....











--> E AQUI, DE FATO,





NÓS HAVÍAMOS SELECIONADO 1 BUTTON POR MEIO DA SINTAXE 



'const buttonElement = document.querySelector('button') 















-----> ENTRETANTO,

O PROBLEMA É QUE __o  TYPESCRIPT __ NAÕ TEM COMO SABER SE 
ESSE 

BUTTON REALMENTE EXISTE (é desconfiado)....











--> ISSO PQ O TYPESCRIPT  NÃO CHECA/NÃO TEM COMO CHECAR NOSSO CÓDIGO HTML (é fora de sua capacidade)....













-> É EXATAMENTE POR ISSO QUE RECEBEMOS UM ERROR 

em 

'buttonElement.addEventListener()'... --> É PQ 




ESSA CONSTANTE REALMENTE PODERIA/PODE ESTAR COMO NULL,

  



  SE NÃO TIVERMOS 


  BUTTON ELEMENT ALGUM...






  --> PARA CONSERTAR ESSE AVISO/ERRO,


  TEMOS 

  2 

  OPÇÕES 

  NO NOSSO CÓDIGO..





  1)  É MEIO 




  GAMBIARRA... --> NESSE APPROACH,


  PROFESSOR 

   

   PROPÕE 



   A ADIÇÃO DE UM 'if check',


   EM QUE 



   ENTÃO _ _CHECAMOS SE 

   'buttonElement' 

   É _ _REALMENTE TRUTHY... -------> 


   SE 
   ESSE 

   buttonElement


   for TRUTHY,


   VAMOS QUERER 

   EXECUTAR O CÓDIGO DE 







   EX:







if (buttonElement) {

           buttonElement.addEventListener('click', 
    
    () => {

        // const num1 = num1Element.value; ///SE ESCREVERMOS ISSO SEM _ EXPLICARMOS AO TYPESCRIPT QUE 'num1Element' É _ UMA CONSTANTE QUE SEGURA UM INPUT (pq inputs são elementos que REALMENTE POSSUEM ESSA PROPRIEDADE 'value', que é uma propriedade QUE MUITAS VEZES NÃO EXISTE EM ELEMENTOS HTML... -> precisamos usar aquilo que é chamado de 'TYPE CASTING'... ---> TYPE CASTING É AQUELE TRECHO 'as HTMLInputElement', QUE ESCLARECE QUE ESSE _ ELEMENTO QUE FOI SELECIONADO ___ SERÁ_ __ SEMPRE UM 'INPUT ELEMENT'... (assim, deixamos nosso código bem mais CLARO, EXPLÍCITO)...
        ///o código de const num1Element = document.getElementById('input1') as HTMLInputElement;  VAI FAZER COM QUE O 'error/aviso' que surge por causa de 'num1Element.value' SUMA...
        
        // const num2 = num2Element.value;


        const num1 = +num1Element.value; //coloco o '+' para CONVERTER ISSO EM UM NÚMERO...

        const num2 = +num2Element.value;


        const result = addSum(num1, num2);
        console.log(result);
    })

}










----------------------------------



OK... MOVIDO PARA DENTRO DESSE IF CHECK, TEMOs:


1) O JAVASCRIPT NÃO VAI MAIS FICAR CONFUSO,

PQ 


SE 


NÓS ENTRARMOS NAQUELE IF CHECK,

ISSO OBVIAMENTE SIGNIFICA QUE 



'buttonElement'

JÁ ESTÁ/ESTÁ COMO 'DEFINED'....





 
--> COMO ELE (o buttonElement) VAI ESTAR OBRIGATORIAMENTE 'defined' 


nesse if check,



vamos DEIXAR DE OBTER AQUELE ERROR/AVISO...









--> ALTERNATIVAMENTE, TEMOS A OPÇÃO 2:





2) SABEMOS QUE TEMOS 1 BUTTON/TEREMOS 1 BUTTON...  ------------> SABEMOS QUE 



ESSAS CONST, as 2, 


SERÃO 


'HTMLInputElement's -----> EM CASOS COMO ESSES,








__ PODEMOS_ _ SIMPLESMENTE ADICIONAR 




''!'' (bang operator)  NO FINAL __ DO VALOR DE 'buttonElement'... ------> ISSO 





APENAS 

VAI DIZER AO 



TYPESCRIPT:




'''SIM, ESSE BUTTON SELECIONADO POR ESSE QUERY SELECTOR __ PODE ATÉ SER NULL, TEORICAMENTE,

MAS __ NÓS __ TEMOS CERTEZA _ _aBSOLUTA DE QUE __ ELE NÃO É,

POR ISSO 


IGNORE ESSE CASE DE 'null' e fique quieto...'''














PORTANTO, PARA QUE 

ESSE AVISO SUMA,

NOSSO CÓDIGO TERÁ QUE FICAR ASSIM:









const num1Element = document.getElementById('input1') as HTMLInputElement;


const num2Element = document.getElementById('input2') as HTMLInputElement;



const buttonElement = document.querySelector('button')!; ///EIS O CÓDIGO EM QUESTÃO.



function addSum (num1: number, num2: number) { ///POR MEIO DESSA SINTAXE 'num1: number', DEFINIMOS __ QUAL_ _TYPE_ ESSE ARGUMENTO OBRIGATORIAMENTE DEVE TER/SER...

    return num1 + num2;
    }
    
    
    
    
   console.log(addSum(1, 6));
    







    buttonElement.addEventListener('click', 
    
    () => {

        const num1 = +num1Element.value; //coloco o '+' para CONVERTER ISSO EM UM NÚMERO...

        const num2 = +num2Element.value;


        const result = addSum(num1, num2);
        console.log(result);
    })














----------------------------------------







OK, AGORA O NULL CASE __ SERÁ _ IGNORADO_,



e o 



VALOR DE 


'HTMLBUttonElement'


SERÁ TIDO COMO O __ ÚNICO VALOR __ POSSÍVEL...









^^^^^^^^^^^^^ISSO É ALGO MUITO IMPORTANTE, E UMA COISA QUE O PROFESSOR QUE QUERIA NOS MOSTRAR, AQUI....




















---> OUTRA COISA QUE __ NÃO É PERMITIDA QUANDO O 'STRICT MODE'

ESTÁ LIGADO


é 


tentar 


__oMITIR_ OS TYPES_ DOS PARÂMETROS DE SUAS FUNCTIONS...





ex:



function add(num1, num2) { -------> ISSO VAI APITAR.... --> VAI APITAR PQ ELE VAI QUERER '(num1: Number, num2: Number')...

}








---------------------------------------------------------










SE VOCê DEIXA O STRICT LIGADO E NÃO DEFINE O DATA TYPE DE UM PARÂMETRO,

O TYPESCRIPT 


TE INFORMA 


'Parameter num1 implicitly has an 'any' type'... -----> RECLAMA QUE ISSO AÍ TEM O TYPE DE 'any...











-------> É CLARO QUE __ EXISTE UM TYPE DE 'any',

QUE 

VOCê __ PODE__ ASSIGNAR NOS SEUS PARÂMETROS... --> ENTRETANTO,

PROFESSOR 


EXPLICA QUE 

ESSE É 

UM 
'FALLBACK TYPE'

EXTREMAMENTE GENÉRICO,





E QUE 


BASICAMENTE NÃO CARREGA NENHUM 'TYPE INFORMATION' EXTRA,



e que 


QUALQUER TIPO DE VALOR (data type)


É 


PERMITIDO 

NESSE PARÂMETRO .... (o que é bem ruim)...











-----> SÓ USE 'any'


SE VOCÊ 


NÃO TIVER IDEIA ALGUMA DO TYPE DE DATA QUE VOCê VAI EXPECT, nessa function...












--> SE VOCê TIVER ALGUMA IDEIA DO TYPE QUE VOCê VAI QUERER,


O IDEAL É 'SER O MAIS ESPECÍFICO POSSÍVEL',



especificar bem quais valores vocÊ aceita, aqui....










------------> OK.... 



MAS O STRICT MODE NÃO TE PERMITE DEIXAR ISSO VAZIO.... ( a definição do data type) --> 




VOCÊ DEVE DEIXAR O ANY EXPLÍCITO ('num1: any') 

PARA 




 
 EVITAR ESSES AVISOS CHATOS..


















 OBS::::::::::::: QUANDO VOCÊ USA 'tsc --init',


 VOCÊ 


 CRIA UM ARQUIVO 'tsconfig.json'....








 --------> E QUANDO VOCÊ CRIA esse arquivo, 







 SE VOCê RODAR O 'typescript compiler' (com tsc app.ts),




 VOCÊ _ _AINDA PODERÁ ESCOLHER/escrever 







 O CÓDIGO 


 'tsc app.ts' ----------> SIM, VOCÊ PODE CONTINUAR USANDO ESSE CÓDIGO.... --> ENTRETANTO,



 SE 

 VOCÊ 


 USAR 

 ESSE 


 CÓDIGO,

 A CONFIGURAÇÃO 


 DO 



 'tsconfig.json'



 __ NÃO SERÁ LEVADA EM CONSIDERAÇÃO __ quando ocorrer o seu compile... --------> EM VEZ DISSO,




 QUANDO VOCê TIVER CRIADO ESSE ARQUIVO 

 'tsconfig.json',







 ___ VOCÊ _ DEVE _ RODAR 







 O __ TSC__ NA SUA FORMA MAIS PURA,


 com a simples escrita de 



 'tsc' (sem mais coisa alguma),






 PQ 
 ISSO AÍ 



VAI FAZER COM QUE __ TODOS OS ARQUIVOS 

DE 

TIPO 

'.ts' 


que 

você 


POSSUI 



NO FOLDER DO SEU PROJETO __ SEJAM __ COMPILADOS ___ LEVANDO EM CONSIDERAÇÃO AQUELE 

arquivo 


config de 


'tsconfig.json'...











--> CERTO... ISSO REALMENTE FUNCIONA....










--> RESUMINDO: 


SÓ SE VOCÊ NÃO ESPECIFICAR UM 'ALVO' DO tsc,

é que 



AS CONFIGURAÇÕES DO tsconfig.json 

SERÃO 

APLICADAS... ------------------------------> E TODAS AS FILES 


.ts NO SEU FOLDER SERÃO CONFIGURADAS...













--> SE VOCÊ TEIMAR E ESCREVER 

'tsc app.ts',

 



 A CONFIGURATION FILE SERÁ IGNORADA PARA A COMPILAÇÃO DO APP.JS desse arquivo... ------> O IDE, ENTRETANTO,

 SEMPRE 

 VAI 

 PEGAR/CAPTAR 




 O ARQUIVO 
 'tsconfig.json',






 NÃO INTERESSANDO A MANEIRA PELA QUAL VOCÊ COMPILA SEUS ARQUIVOS (com ou sem o tsconfig, com 'tsc app.ts', ou 'tsc' puro....)