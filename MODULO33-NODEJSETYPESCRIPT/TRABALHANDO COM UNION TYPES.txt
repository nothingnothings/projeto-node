












-----> OK, NÓS ADICIONAMOS AQUELE ARQUIVO DE 'tsconfig.json'

AO 


NOSSO PROEJTO,

O QUE 
MUDOU TUDO....













--> AGORA DIGAMOS QUE 

__qUEREMOS __ aCTUALLY_ _ DEIXAR NOSSO CÓDIGO UM POUCO MAIS FLEXÍVEL...










-> QUEREMOS DEIXAR A FUNÇÃO DE 'add'


UM POUCO MAIS FLEXÍVEL.... --> 



ELA 


DEVERÁ 

FUNCIONAR:


1) COM NUMBERS 





2) TAMBÉM COM STRINGS....










------> É CLARO QUE 

O  PROFESSOR QUER 

NOS MOSTRAR/ASSEGURAR 



QUE 

O TYPESCRIPT FUNCIONA COM NUMBERS PARA 



demonstrar a razão de ele ser ótimo,










MAS AINDA ASSIM,







ESSE USE CASE PODE __ EXISTIR__ EM ALGUM APP QUE VOCÊ CONSTRUIRÁ...











NOSSA FUNCTION,

ATÉ AGORA,

ESTÁ ASSIM:



function add(num1: number, num2: number) {
    return num1 + num2;
}











----------------> QUEREMOS PERMITIR TANTO 'number'


COMO 

'string',

MAS __ NÃO VAMOS QUERER 


DEFINIR 


AQUELE 


CRITÉRIO QUE É EXAGERADO/VAGO DEMAIS, o critério de 'any'... --------> 











OK, MAS QUE CÓDIGO TEMOS NO ADDEVENTLISTNEER,


QUE VAI QUERER 


ESSA 'SOMA DE STRINGS' (concatenação, na verdade)....









É ESTE AQUI:





function add(num1: number, num2: number) {
    return num1 + num2;
}






buttonElement.addEventListener('click', 


() => {

const num1 = num1Element.value;
const num2 = num2Element.value;
const result = add(+num1, +num2);
const stringResult = add(num1, num2); ////////EIS O CÓDIGO EM QUESTÃO (vamos querer adicionar/CONCATENAR 2 STRINGS EM 1 SÓ).....
console.log(result, stringResult);




}



)









EX:








    buttonElement.addEventListener('click',  //ver anotaçaõ lá no selector/ definição da constante de 'buttonElement'...
    
    () => {

        // const num1 = num1Element.value; ///SE ESCREVERMOS ISSO SEM _ EXPLICARMOS AO TYPESCRIPT QUE 'num1Element' É _ UMA CONSTANTE QUE SEGURA UM INPUT (pq inputs são elementos que REALMENTE POSSUEM ESSA PROPRIEDADE 'value', que é uma propriedade QUE MUITAS VEZES NÃO EXISTE EM ELEMENTOS HTML... -> precisamos usar aquilo que é chamado de 'TYPE CASTING'... ---> TYPE CASTING É AQUELE TRECHO 'as HTMLInputElement', QUE ESCLARECE QUE ESSE _ ELEMENTO QUE FOI SELECIONADO ___ SERÁ_ __ SEMPRE UM 'INPUT ELEMENT'... (assim, deixamos nosso código bem mais CLARO, EXPLÍCITO)...
        ///o código de const num1Element = document.getElementById('input1') as HTMLInputElement;  VAI FAZER COM QUE O 'error/aviso' que surge por causa de 'num1Element.value' SUMA...
        
        // const num2 = num2Element.value;


        const num1 = num1Element.value; //coloco o '+' para CONVERTER ISSO EM UM NÚMERO...

        const num2 = num2Element.value;
        const result = addSum(+num1, +num2);
        const stringResult = addSum(num1, num2); ////////EIS O CÓDIGO EM QUESTÃO (vamos querer adicionar/CONCATENAR 2 STRINGS EM 1 SÓ)..... --> aqui veremos COMO DEFINIR 'MÚLTIPLOS DATA TYPEs' como válidos para 1 parâmetro (tanto o type de STRING como de NUMBER)...
        console.log(result, stringResult);
        console.log(result);
    })













---------------------------------------






CERTO... ISSO SIGNIFICA QUE VAMOS QUERER 




ACEITAR 

ESSE RESULTADO DA CONCATENAÇÃO DE 

STRINGS...










--> PODERÍAMOS COLOCAR ANY,

mas isso é terrível...





-> PQ AÍ SERIA POSSÍVEL CONCATENAR BOOLEANS, como 'true' e 'false'... -> NÃO VAMOS QUERER ACEITAR BOOLEANS,

E SIM 

APENAS STRINGS E NUMBERS....











----------> É AÍ QUE PODEMOS USAR UMA FEATURE CHAMADA DE 'UNION TYPE'...









------> FREQUENTEMENTE EM CÓDIGO,



VOCÊ  TERÁ CÓDIGO

QUE FUNCIONA/FUNCIONARÁ __ COM MÚLTIPLOS TYPES... --> 






EM CASOS 


COMO 

ESSES,

NO TYPESCRIPT,


VOCÊ 


VAI TER DE RECORRER 



AO 

SÍMBOLO 

de 

"|" (PIPE)















-------> NESSES CASOS, VOCÊ USARÁ O '|'

PARA __ 


DIZER QUE 


__ NESSE PARÂMETRO SERÃO PERMITIDAS TANTO STRINGS COMO NUMBERS...








ex:











function add(num1: number | string, num2: number | string) {




}









FICOU TIPO ASSIM:





    function addSum (num1: number | string ///AQUI __ PERMITIMOS, NESSE PARÂMETRO, TANTO 'STRINGS' COMO 'NUMBERS'...
        
        ,
        
        num2: number | string) {
    return num1 + num2;
    }
    







-----------------------------------------














ok.. agora esses parâmetros PODERÃO SER OU NUMBERS, OU STRINGS....













--> QUANDO EU FIZER ISSO,


VOU RECEBER 1 ERRO/AVISO


lá 

na function body ,


código de 


'return num1 + num2'...










--> ESSE ERRO ACONTECEU/ACONTECE  _____PQ _ AINDA QUE 

ESSE 

OPERATOR 

de 


'+' 




SEJA FUNCIONAL COM 



'number + number' 

e 

'string + string',




O TYPESCRIPT, pelo menos no momento,




__ NÃO COMPREENDE ISSO.... --->>> O PROFESSOR ARGUMENTA QUE ESSE É UM _ ERRO ESTRANHO,




PQ __ O operator de adição, '+',





VAI FUNCIONAR PARA TANTO 'strings' como 'numbers'.... ----------> ISSO PODE PARECER ESTRANHO,

MAS 


ERROS SURGEM COM FREQUÊNCIA QUANDO VOCÊ 



__PASSA A ACEITAR MÚLTIPLOS TYPES em 1 


argumento...









-------------> *** QUANDO VOCÊ ACEITA DIFERENTES 'TYPES' E VOCÊ QUER EXECUTAR__ CÓDIGO 'SLIGHTLY DIFFERENT'
 


 com base 

 NOS DIFERENTES TYPES,



 ERROS FREQUENTEMENTE SURGEM...












 --> PARA SOLUCIONAR ESSE TIPO DE PROBLEMA,


 DEVEMOS RECORRER A IF CHECKS,

 para 


 CHECAR PELO DATATYPE





 de nossos parâmetros,

 e para ENTÃO 


 EXECUTAR DIFERENTES OPERAÇÕES 


 a partir 

 do seu datatype....






 ex:











 if (typeof num1 === 'number')  ---------> OU SEJA, VAMOS USAR CÓDIGO JAVASCRIPT VANILLA _ PARA CHECAR_ SE O DATATYPE DESSE PARÂMETRO É UM _ NUMBER...











 eX:




 

    function addSum (num1: number | string ///AQUI __ PERMITIMOS, NESSE PARÂMETRO, TANTO 'STRINGS' COMO 'NUMBERS'...
        
        ,
        
        num2: number | string) {




            if (typeof num1 === 'number') { ////EIS O CÓDIGO EM QUESTAÕ.

            }



    return num1 + num2;
    }
    







------------------------------------------








'typeof' -> É UM OPERADOR QUE EXISTE NO JAVASCRIPT,

E NOS 




RETORNA OS 'TYPES' das nossas data,


no formato de strings... ->





VAMOS CHECAR 

SE 
O 

TYPE É UM 'NUMBER'.... --> NA VERDADE,


CHECAREMOS 



SE _ AMBOS __OS 


PARÂMETROS SÃO NUMBERS...











--> AÍ COLOCAMOS UM 'else if'... --> 




CASO SEJAM de tipo 'string',




vamos querer EXECUTAR O MESMO CÓDIGO, MAS COM UM WHITE SPACE NO MEIO (só para diferenciar)...











--> POR FIM, ESCREVEMOS A HIPÓTESE DE 'MIXED DATA TYPES',

em que 
VAMOS QUERER 

SÓ 'return',

sem executar qualquer código....










EX:




 

    function addSum (num1: number | string ///AQUI __ PERMITIMOS, NESSE PARÂMETRO, TANTO 'STRINGS' COMO 'NUMBERS'...
        
        ,
        
        num2: number | string) {




            if (typeof num1 === 'number' &&
                   typeof num2 === 'number'  ) { ////EIS O CÓDIGO EM QUESTAÕ.
                         return num1 + num2;
            } else if (
                typeof num1 === 'string' &&
                typeof num2 === 'string'
            ) {
                return num1 + '' + num2;
            }

            return;
   
    }
    



---------------------------------------------
















--> ISTO, ESTE TRECHO AQUI:



            if (typeof num1 === 'number' &&
            typeof num2 === 'number'  ) { ////EIS O CÓDIGO EM QUESTAÕ.
                  return num1 + num2;
     } else if (
         typeof num1 === 'string' &&
         typeof num2 === 'string'
     ) {
         return num1 + '' + num2;
     }

        return; ///case de 'MIXED DATA TYPES'... -> não vamos querer rodar CÓDIGO ALGUM...






 







 __ É AQUILO QUE CHAMAMOS DE 'TYPE GUARD' ..... --> É UM TYPE GUARD 

 PQ 

 NÓS 


 EXECUTAMOS _ DIFERENTE __ CÓDIGO_ _ A PARTIR__ DOS DIFERENTES 

 TYPES 

 QUE 

 VAMOS RECEBENDO NESSA FUNÇÃO, PARA NOSSOS VALORES...












 -----> E SE VOCÊ FIZER ISSO,

 ESCREVER ESSE CÓDIGO AÍ,





 se você tentar então executar/chamar um código como 

 'console.log(addSum(true, false))',


 VOCÊ __ RECEBERÁ IMEDIATAMENTE UM __ ERRO,

 PQ 


 BOOLEANS__ NÃO SÃO 


 NUMBERS, NEM STRINGS,


 que 


 são AS ÚNICAS COISAS QUE DEFINIMOS LÁ NA NOSSA FUNCTION...














 EX:







     buttonElement.addEventListener('click',  //ver anotaçaõ lá no selector/ definição da constante de 'buttonElement'...
    
    () => {

        // const num1 = num1Element.value; ///SE ESCREVERMOS ISSO SEM _ EXPLICARMOS AO TYPESCRIPT QUE 'num1Element' É _ UMA CONSTANTE QUE SEGURA UM INPUT (pq inputs são elementos que REALMENTE POSSUEM ESSA PROPRIEDADE 'value', que é uma propriedade QUE MUITAS VEZES NÃO EXISTE EM ELEMENTOS HTML... -> precisamos usar aquilo que é chamado de 'TYPE CASTING'... ---> TYPE CASTING É AQUELE TRECHO 'as HTMLInputElement', QUE ESCLARECE QUE ESSE _ ELEMENTO QUE FOI SELECIONADO ___ SERÁ_ __ SEMPRE UM 'INPUT ELEMENT'... (assim, deixamos nosso código bem mais CLARO, EXPLÍCITO)...
        ///o código de const num1Element = document.getElementById('input1') as HTMLInputElement;  VAI FAZER COM QUE O 'error/aviso' que surge por causa de 'num1Element.value' SUMA...
        
        // const num2 = num2Element.value;


        const num1 = num1Element.value; //coloco o '+' para CONVERTER ISSO EM UM NÚMERO...

        const num2 = num2Element.value;
        const result = addSum(+num1, +num2);
        const stringResult = addSum(num1, num2); ////////EIS O CÓDIGO EM QUESTÃO (vamos querer adicionar/CONCATENAR 2 STRINGS EM 1 SÓ)..... --> aqui veremos COMO DEFINIR 'MÚLTIPLOS DATA TYPEs' como válidos para 1 parâmetro (tanto o type de STRING como de NUMBER)...
        console.log(result, stringResult);
        console.log(addSum(true, false)); ////ISSO NÃO FUNCIONARÁ, E O TYPESCRIPT APITARÁ/NOS AVISARÁ DISSO... --> É PQ NOSSA FUNCTION DE 'addSum' SÓ ACEITA OS DATATYPES DE NUMBER/STRING PARA SEUS PARÂMETROS, não permitindo o datatype de 'BOOLEAN'... (como true e false)...
    })















------------------> OK...







AÍ COMPILAMOS TUDO ISSO,

POR MEIO DO RUN DO CÓDIGO 'tsc'...










--> ELE COMPILA COM SUCESSO..




--> o código compilado fica assim:










"use strict";
// const addButton = document.querySelector('button');
// const input1 = document.getElementById('input1').textContent;
// const input2= document.getElementById('input2').textContent;
// const add = (num1, num2) => {
//     const paragraphNumber = document.querySelector('p');
//     paragraphNumber.textContent = num1 + num2;
// }
// addButton.addEventListener('click', add(input1, input2))
const num1Element = document.getElementById('input1'); //SIM, O TYPESCRIPT FUNCIONA COM QUALQUER TIPO DE JAVASCRIPT CODE, ATÉ CMO BROWSERSIDE VANILLA...
const num2Element = document.getElementById('input2');
const buttonElement = document.querySelector('button'); ///O 'BANG' OPERATOR AO FINAL DE UM VALOR DE UMA CONST SERVE PARA DIZER '''ESSA CONST NUNCA FICARÁ COMO 'NULL', ENTÃO PARE DE NOS INCOMODAR COM ESSE AVISO DE 'OBJECT IS POSSIBLY NULL', PQ ELE __ NUNCA __ VAI FICAR COMO NULL, SEU IDIOTA....
// function add (num1: number, num2: number) { ///POR MEIO DESSA SINTAXE 'num1: number', DEFINIMOS __ QUAL_ _TYPE_ ESSE ARGUMENTO OBRIGATORIAMENTE DEVE TER/SER...
//     return num1 + num2;
//     }
// function addSum (num1: number, num2: number, num3) { ///POR MEIO DESSA SINTAXE 'num1: number', DEFINIMOS __ QUAL_ _TYPE_ ESSE ARGUMENTO OBRIGATORIAMENTE DEVE TER/SER...
function addSum(num1 ///AQUI __ PERMITIMOS, NESSE PARÂMETRO, TANTO 'STRINGS' COMO 'NUMBERS'...
, num2) {
    if (typeof num1 === 'number' &&
        typeof num2 === 'number') { ////EIS O CÓDIGO EM QUESTAÕ.
        return num1 + num2;
    }
    else if (typeof num1 === 'string' &&
        typeof num2 === 'string') {
        return num1 + '' + num2;
    }
    return; ///case de 'MIXED DATA TYPES'... -> não vamos querer rodar CÓDIGO ALGUM...
}
// function addSum(num1: any) {} ////SIM, TAMBÉM EXISTE ESSE TYPE DE 'any', que é USADO COMO UM FALLBACK, PQ NÃO É NADA __ ESPECÍFICO, APENAS ATRAPALHA NOSSO CÓDIGO...
//// SE VOCê NÃO DEFINE nenhum data type em 1 dos seus parâmetros, ele é considerado como 'ANY', mas isso NÃO É BOM, PQ É UM 'ANY' IMPLÍCITO, um any que faz com que o STRICT MODE PENSE QUE VOCê 'ESQUECEU' DE DEFINIR O DATA TYPE DESSA FUNCTION, o que fará ele RECLAMAR.... (como visto com 'num3')...
console.log(addSum(1, 6));
// console.log(add('1', '6')); // --> isso fará com que UM ERROR SEJA THROWN PELO TYPESCRIPT, PQ NAQUELA FUNÇÃO DEFINIMOS QUE O DATA TYPE __ DEVE SER, OBRIGATORIAMENTE, _ 'NUMBER', e não string... (como visto nesse CONSOLE.LOG)...
buttonElement.addEventListener('click', //ver anotaçaõ lá no selector/ definição da constante de 'buttonElement'...
() => {
    // const num1 = num1Element.value; ///SE ESCREVERMOS ISSO SEM _ EXPLICARMOS AO TYPESCRIPT QUE 'num1Element' É _ UMA CONSTANTE QUE SEGURA UM INPUT (pq inputs são elementos que REALMENTE POSSUEM ESSA PROPRIEDADE 'value', que é uma propriedade QUE MUITAS VEZES NÃO EXISTE EM ELEMENTOS HTML... -> precisamos usar aquilo que é chamado de 'TYPE CASTING'... ---> TYPE CASTING É AQUELE TRECHO 'as HTMLInputElement', QUE ESCLARECE QUE ESSE _ ELEMENTO QUE FOI SELECIONADO ___ SERÁ_ __ SEMPRE UM 'INPUT ELEMENT'... (assim, deixamos nosso código bem mais CLARO, EXPLÍCITO)...
    ///o código de const num1Element = document.getElementById('input1') as HTMLInputElement;  VAI FAZER COM QUE O 'error/aviso' que surge por causa de 'num1Element.value' SUMA...
    // const num2 = num2Element.value;
    const num1 = num1Element.value; //coloco o '+' para CONVERTER ISSO EM UM NÚMERO...
    const num2 = num2Element.value;
    const result = addSum(+num1, +num2);
    const stringResult = addSum(num1, num2); ////////EIS O CÓDIGO EM QUESTÃO (vamos querer adicionar/CONCATENAR 2 STRINGS EM 1 SÓ)..... --> aqui veremos COMO DEFINIR 'MÚLTIPLOS DATA TYPEs' como válidos para 1 parâmetro (tanto o type de STRING como de NUMBER)...
    console.log(result, stringResult);
    // console.log(addSum(true, false)); ////ISSO NÃO FUNCIONARÁ, E O TYPESCRIPT APITARÁ/NOS AVISARÁ DISSO... --> É PQ NOSSA FUNCTION DE 'addSum' SÓ ACEITA OS DATATYPES DE NUMBER/STRING PARA SEUS PARÂMETROS, não permitindo o datatype de 'BOOLEAN'... (como true e false)...
});
// if (buttonElement) { ////se escrevermos assim, CONSERTAMOS O 'AVISO' do TYPESCRIPT de que essa variável PODERIA ESTAR COMO UNDEFINED (nenhum button encontrado, essa é a hipótese que ele considera)..
// buttonElement.addEventListener('click', 
// () => {
//     // const num1 = num1Element.value; ///SE ESCREVERMOS ISSO SEM _ EXPLICARMOS AO TYPESCRIPT QUE 'num1Element' É _ UMA CONSTANTE QUE SEGURA UM INPUT (pq inputs são elementos que REALMENTE POSSUEM ESSA PROPRIEDADE 'value', que é uma propriedade QUE MUITAS VEZES NÃO EXISTE EM ELEMENTOS HTML... -> precisamos usar aquilo que é chamado de 'TYPE CASTING'... ---> TYPE CASTING É AQUELE TRECHO 'as HTMLInputElement', QUE ESCLARECE QUE ESSE _ ELEMENTO QUE FOI SELECIONADO ___ SERÁ_ __ SEMPRE UM 'INPUT ELEMENT'... (assim, deixamos nosso código bem mais CLARO, EXPLÍCITO)...
//     ///o código de const num1Element = document.getElementById('input1') as HTMLInputElement;  VAI FAZER COM QUE O 'error/aviso' que surge por causa de 'num1Element.value' SUMA...
//     // const num2 = num2Element.value;
//     const num1 = +num1Element.value; //coloco o '+' para CONVERTER ISSO EM UM NÚMERO...
//     const num2 = +num2Element.value;
//     const result = addSum(num1, num2);
//     console.log(result);
// })
// }

















-------> É CLARO QUE O 'UNION TYPE' (


    aquele negócio de 


 
''''''''''''''''''

    function addSum (num1: number | string ///AQUI __ PERMITIMOS, NESSE PARÂMETRO, TANTO 'STRINGS' COMO 'NUMBERS'...
        
        ,
        
        num2: number | string) {
'''''''''''''''''

)















AQUELE USO DE '|',


TERÁ _ SUMIDO_...  _------> os if checks FICARÃO,







PQ ISSO É CÓDIGO JAVASCRIPT COMUM,

mas 


OS 


UNION TYPES REALMENTE TERÃO SUMIDO (pq eles só servem para O DEVELOPMENT DE NOSSO CÓDIGO)...










--> ok, agora se clicarmos no button,


TEREMOS TANTO O OUTPUT, no console, DO RESULTADO DA VERSÃO 'cálculo' (soma) 


QUANTO A VERSÃO 


'concatenate' 





DE NOSSA FUNCTION 'addSum()'...
