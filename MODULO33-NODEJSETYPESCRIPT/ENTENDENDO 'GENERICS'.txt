















------> OK... PARA ACABAR ESSE REFRESHER,


PROFESSOR QUER FALAR SOBRE 'GENERICS'....










--> É UAM FEATURE __ QUE PODE PARECER MUITO CONFUSA __ A PRIORI,


MAS 

QUE 

FAZ MUITO SENTIDO...












--> NA VERDADE,


NO NOSSO CÓDIGO,


NÓS __ JÁ TEMOS UM 'generic type':






















// const addButton = document.querySelector('button');


// const input1 = document.getElementById('input1').textContent;


// const input2= document.getElementById('input2').textContent;






// const add = (num1, num2) => {



//     const paragraphNumber = document.querySelector('p');
//     paragraphNumber.textContent = num1 + num2;
// }



// addButton.addEventListener('click', add(input1, input2))






const num1Element = document.getElementById('input1') as HTMLInputElement; //SIM, O TYPESCRIPT FUNCIONA COM QUALQUER TIPO DE JAVASCRIPT CODE, ATÉ CMO BROWSERSIDE VANILLA...


const num2Element = document.getElementById('input2') as HTMLInputElement; 


const buttonElement = document.querySelector('button')!; ///O 'BANG' OPERATOR AO FINAL DE UM VALOR DE UMA CONST SERVE PARA DIZER '''ESSA CONST NUNCA FICARÁ COMO 'NULL', ENTÃO PARE DE NOS INCOMODAR COM ESSE AVISO DE 'OBJECT IS POSSIBLY NULL', PQ ELE __ NUNCA __ VAI FICAR COMO NULL, SEU IDIOTA....



const numResults: number[] = [];  ////////COM ESSA SINTAXE DO LADO ESQUERDO DO '=', DIZEMOS AO TYPESCRIPT QUE NESSE ARRAY _ SÓ SERÃO PERMITIDOS __ NUMBERS....

const textResults: string[] = []; ///SÓ SERÃO PERMITIDAS _ strings__ DENTRO DESSE ARRAY...


// function add (num1: number, num2: number) { ///POR MEIO DESSA SINTAXE 'num1: number', DEFINIMOS __ QUAL_ _TYPE_ ESSE ARGUMENTO OBRIGATORIAMENTE DEVE TER/SER...

//     return num1 + num2;
//     }
    




type NumOrString = string | number; ////É UM __ OPERATOR__ TÍPICO DO TYPESCRIPT, E INEXISTENTE NO JAVASCRIPT (não confunda com o operator typeof DO JAVASCRIPT VANILLA)
///usamos isso para ABREVIAR OS 'UNION TYPES' (que são types-conjuntos, MÚLTIPLOS TYPES PERMITIDOS A UM PARÂMETRO)... --> substitua todos os locais do código em que vocÊ tem 'string | number' POR ESSE 'type alias' aí... (é tipo uma variável, portanto)...




type Result = {
    val: number;
    exemplo: string;
    timestamp: Date;
}


// function addSum (num1: number, num2: number, num3) { ///POR MEIO DESSA SINTAXE 'num1: number', DEFINIMOS __ QUAL_ _TYPE_ ESSE ARGUMENTO OBRIGATORIAMENTE DEVE TER/SER...
    function addSum (
        
        // num1: number | string ///AQUI __ PERMITIMOS, NESSE PARÂMETRO, TANTO 'STRINGS' COMO 'NUMBERS'...
        num1: NumOrString ///exemplo de utilizaçaõ de 'TYPE ALIAS' (visto ali em cima, em ''' type NumOrString = string | number;''' )
        ,
        
        // num2: number | string
        num2: NumOrString
        
        
        
        ) {


            if (typeof num1 === 'number' &&
            typeof num2 === 'number'  ) { ////EIS O CÓDIGO EM QUESTAÕ.
                  return num1 + num2;
     } else if (
         typeof num1 === 'string' &&
         typeof num2 === 'string'
     ) {
         return num1 + '' + num2;
     }

        return; ///case de 'MIXED DATA TYPES'... -> não vamos querer rodar CÓDIGO ALGUM...


    }
    
    




    function printResult(resultObject: Result ///uso do TYPE ALIAS DE 'Result' (que vai SUBSTITUIR esse código que temos logo abaixo)....
    
    
    // { ///EXEMPLO DE __ COMO DEFINIR __ 'OBJECT TYPES' nos seus parâmetros... --> 'vou querer que essa function receba um data type DE FORMATO OBJECT, COM ESTE, ESTE E ESTE FORMATO'... (define as características do objeto-parâmetro nesse PRÓPRIO OBJETO-CONFIG aqui... {})

    //     //objeto-config/molde DO FORMATO QUE NOSSO 'object TYPE' deverá ter...
    //     val: number;
    //    exemplo: string;
    //    timestamp: Date ///com isso, nos referimos ao OBJETO/CONSTRUCTOR FUNCTION 'Date' DO __ JAVASCRIPT__... (builtin)...


    // }

    
    ) { ///function body 
   
        console.log(resultObject.val);
   
   
    }









    // function addSum(num1: any) {} ////SIM, TAMBÉM EXISTE ESSE TYPE DE 'any', que é USADO COMO UM FALLBACK, PQ NÃO É NADA __ ESPECÍFICO, APENAS ATRAPALHA NOSSO CÓDIGO...
    //// SE VOCê NÃO DEFINE nenhum data type em 1 dos seus parâmetros, ele é considerado como 'ANY', mas isso NÃO É BOM, PQ É UM 'ANY' IMPLÍCITO, um any que faz com que o STRICT MODE PENSE QUE VOCê 'ESQUECEU' DE DEFINIR O DATA TYPE DESSA FUNCTION, o que fará ele RECLAMAR.... (como visto com 'num3')...
    
   console.log(addSum(1, 6));
    
    
    // console.log(add('1', '6')); // --> isso fará com que UM ERROR SEJA THROWN PELO TYPESCRIPT, PQ NAQUELA FUNÇÃO DEFINIMOS QUE O DATA TYPE __ DEVE SER, OBRIGATORIAMENTE, _ 'NUMBER', e não string... (como visto nesse CONSOLE.LOG)...





    buttonElement.addEventListener('click',  //ver anotaçaõ lá no selector/ definição da constante de 'buttonElement'...
    
    () => {

        // const num1 = num1Element.value; ///SE ESCREVERMOS ISSO SEM _ EXPLICARMOS AO TYPESCRIPT QUE 'num1Element' É _ UMA CONSTANTE QUE SEGURA UM INPUT (pq inputs são elementos que REALMENTE POSSUEM ESSA PROPRIEDADE 'value', que é uma propriedade QUE MUITAS VEZES NÃO EXISTE EM ELEMENTOS HTML... -> precisamos usar aquilo que é chamado de 'TYPE CASTING'... ---> TYPE CASTING É AQUELE TRECHO 'as HTMLInputElement', QUE ESCLARECE QUE ESSE _ ELEMENTO QUE FOI SELECIONADO ___ SERÁ_ __ SEMPRE UM 'INPUT ELEMENT'... (assim, deixamos nosso código bem mais CLARO, EXPLÍCITO)...
        ///o código de const num1Element = document.getElementById('input1') as HTMLInputElement;  VAI FAZER COM QUE O 'error/aviso' que surge por causa de 'num1Element.value' SUMA...
        
        // const num2 = num2Element.value;


        const num1 = num1Element.value; //coloco o '+' para CONVERTER ISSO EM UM NÚMERO...

        const num2 = num2Element.value;
        const result = addSum(+num1, +num2);
        const stringResult = addSum(num1, num2); ////////EIS O CÓDIGO EM QUESTÃO (vamos querer adicionar/CONCATENAR 2 STRINGS EM 1 SÓ)..... --> aqui veremos COMO DEFINIR 'MÚLTIPLOS DATA TYPEs' como válidos para 1 parâmetro (tanto o type de STRING como de NUMBER)...
        console.log(result, stringResult);


        numResults.push(result as number);
        textResults.push(stringResult as string);

        printResult({
            val: result as number, ///escrevemos 'as number' para DIZER AO TYPESCRIPT: 'SIM, EU __ SEI__ QUE ISSO SERÁ UM NUMBER, CHILL OUT, man...''' --> mesmo USO DE 'as' visto lá em cima com 'HTMLInputElement'...
            exemplo: 'EXEMPLOZXC',
            timestamp: new Date()
        });


        console.log(numResults, textResults);
        // console.log(addSum(true, false)); ////ISSO NÃO FUNCIONARÁ, E O TYPESCRIPT APITARÁ/NOS AVISARÁ DISSO... --> É PQ NOSSA FUNCTION DE 'addSum' SÓ ACEITA OS DATATYPES DE NUMBER/STRING PARA SEUS PARÂMETROS, não permitindo o datatype de 'BOOLEAN'... (como true e false)...
    })




    // if (buttonElement) { ////se escrevermos assim, CONSERTAMOS O 'AVISO' do TYPESCRIPT de que essa variável PODERIA ESTAR COMO UNDEFINED (nenhum button encontrado, essa é a hipótese que ele considera)..
        
    // buttonElement.addEventListener('click', 
    
    // () => {

    //     // const num1 = num1Element.value; ///SE ESCREVERMOS ISSO SEM _ EXPLICARMOS AO TYPESCRIPT QUE 'num1Element' É _ UMA CONSTANTE QUE SEGURA UM INPUT (pq inputs são elementos que REALMENTE POSSUEM ESSA PROPRIEDADE 'value', que é uma propriedade QUE MUITAS VEZES NÃO EXISTE EM ELEMENTOS HTML... -> precisamos usar aquilo que é chamado de 'TYPE CASTING'... ---> TYPE CASTING É AQUELE TRECHO 'as HTMLInputElement', QUE ESCLARECE QUE ESSE _ ELEMENTO QUE FOI SELECIONADO ___ SERÁ_ __ SEMPRE UM 'INPUT ELEMENT'... (assim, deixamos nosso código bem mais CLARO, EXPLÍCITO)...
    //     ///o código de const num1Element = document.getElementById('input1') as HTMLInputElement;  VAI FAZER COM QUE O 'error/aviso' que surge por causa de 'num1Element.value' SUMA...
        
    //     // const num2 = num2Element.value;


    //     const num1 = +num1Element.value; //coloco o '+' para CONVERTER ISSO EM UM NÚMERO...

    //     const num2 = +num2Element.value;


    //     const result = addSum(num1, num2);
    //     console.log(result);
    // })
    // }












    printResult(
            {
                val: 4214142,
                exemplo: 'asdasa',
                timestamp: new Date()
            }
    )







--------------------------------------------------------------------





















------- OK, MAS O QUE É UM GENERIC TYPE?










--> no nosso caso, 


são essas 2 linhas/arrays aqui:






const numResults: number[] = [];  

const textResults: string[] = []; 






----------------------------------------






1 'GENERIC TYPE'



É _ SIMPLESMENTE 

1 

TYPE QUE 



''''INTERAGE COM UM OUTRO TYPE''''....





(

    imagino que ARRAYS SEJAM GENERIC TYPES PQ INTERAGEM COM types como 'number', 'string', 'boolean', etc..
)













--> 1 ARRAY É UM GRANDE EXEMPLO DE GENERIC TYPE... --> 


ARRAYS SÃO 

'TYPES ON ITS OWN',



PQ 

SÃO 

'LISTS OF DATA'... ------>  ESSE É O 'CORE TYPE'... ---> entretanto,





ESSE 


TYPE DOS 'ARRAYS'

SEMPRE INTERAGE ___ COM UM OUTRO TYPE... -------> ELE INTERAGE COM OS 'TYPES'


que 

EXISTEM 


__DENTRO DE SI,

DENTRO DO ARRAY... -->  OU SEJA,



VOCê PODE/PODERIA  DIZER QUE 

O 


ARRAY É 

O 


'OUTER TYPE',


e que 



TODOS 


OS 

ELEMENTOS 


NO ARRAY/DENTRO DO ARRAY 







SÃO 

'INNER TYPE'.... ----------> E ESSA NOSSA FORMA DE DEFINIR 1 'ARRAY TYPE', aqui,




por meio desta sintaxe:






const numResults: number[] = [];  
                    ^^^^ ISTO AQUI 











--> ESSE WRITE DE 'number[]' 

É 

NA VERDADE 



____ APENAS__ 1 ___SHORTCUT_ COMUM,


NO TYPESCRIPT... -------> A VERSÃO _ MAIS LONGA __ DISSO__ 

,



MAIS COMPLEXA,



É ESCREVER ASSIM:







1) const numResults: Array = [];  //////// COMEÇAMOS ASSIM... -> COM ESSA ESCRITA, DEFINIMOS A CONSTANTE DE 'numResults' COMO SENDO DE TYPE '''ARRAY''' (core type)....





1a) ENTRETANTO, ISSO FARÁ COM QUE 'Array' SEJA CONSIDERADO, AGORA, UM 'GENERIC TYPE' (pq podemos ter QUALQUER COISA DENTRO DESSE ARRAY, DESDE NUMBERS ATÉ BOOLEANS)...  --> por isso é 'generic'...





1b) É POR ISSO QUE TEMOS QUE DEFINIR O 'INNER TYPE' desse array...








2) const numResults: Array<> = []; /////////////VOCÊ VAI ADICIONAR ESSE '<>' (SÃO CHAMADOS DE 'ANGLE BRACKETS') ... 








2a) const numResults: Array<number> = []; ////////////// COM ISSO, ESTAREMOS DIZENDO QUE DENTRO DESSE 'GENERIC TYPE OF ARRAY' __ DEVEMOS/TEREMOS__ SÓ 'NUMBER'..., só NÚMEROS... --> SERÁ UM ARRAY CHEIO DE NÚMEROS..












3) ------> OK... --> MAS A 'COISA A QUE O TYPE DENTRO DO __ANGLE BRAKCETS SE REFERE' ___ DEPENDE__ DO __ GENERIC TYPE COM O QUAL __ VOCÊ 

ESTÁ TRABALHANDO... ------> NO CASO, ESTAMOS TRABLAHANDO COM UM GENERIC TYPE DE 'array'...


























---------> OUTRO EXEMPLO DE 'GENERIC TYPE'



É _ UMA PROMISE____ --->  













PARA EXEMPLIFICAR ISSO,


O PROFESSOR 

CRIA UMA PROMISE  LÁ EMBAIXO,

POR MEIO DO CÓDIGO DE 




'const myPromise = new Promise();' 


















--------> CERTO... MAS POR DEFAULT,

ESSE CÓDIGO de 


'const myPromise = new Promise();'



NÃO 


__ FUNCIONARÁ _ 



NO NOSSO PROJETO... ( o typescript vai apontar como UM ERROR/INVÁLIDO)...











--> ISSO ACONTECE PQ 



__TEMOS QUE __ ADICIONAR UMA 







__________LIBRARY__ AO TSCONFIG (Arquivo )



PARA ESSENCIALMENTE 


DIZER AO 



TSCONFIG __ QUAIS TIPOS _ DE FEATURES___ 







QUEREMOS __ SUPORTAR...









--> E PARA ADICIONAR ESSA LIBRARY, 


TEMOS O CÓDIIGO DE TSCONFIG.JSON:













{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig.json to read more about this file */

    /* Projects */
    // "incremental": true,                              /* Enable incremental compilation */
    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
    // "tsBuildInfoFile": "./",                          /* Specify the folder for .tsbuildinfo incremental compilation files. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

    /* Language and Environment */
    "target": "es2016",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    // "lib": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */
    // "jsx": "preserve",                                /* Specify what JSX code is generated. */
    // "experimentalDecorators": true,                   /* Enable experimental support for TC39 stage 2 draft decorators. */
    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h' */
    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using `jsx: react-jsx*`.` */
    // "reactNamespace": "",                             /* Specify the object invoked for `createElement`. This only applies when targeting `react` JSX emit. */
    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */

    /* Modules */
    "module": "commonjs",                                /* Specify what module code is generated. */
    // "rootDir": "./",                                  /* Specify the root folder within your source files. */
    // "moduleResolution": "node",                       /* Specify how TypeScript looks up a file from a given module specifier. */
    // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
    // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
    // "typeRoots": [],                                  /* Specify multiple folders that act like `./node_modules/@types`. */
    // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
    // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
    // "resolveJsonModule": true,                        /* Enable importing .json files */
    // "noResolve": true,                                /* Disallow `import`s, `require`s or `<reference>`s from expanding the number of files TypeScript should add to a project. */

    /* JavaScript Support */
    // "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the `checkJS` option to get errors from these files. */
    // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from `node_modules`. Only applicable with `allowJs`. */

    /* Emit */
    // "declaration": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    // "declarationMap": true,                           /* Create sourcemaps for d.ts files. */
    // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
    // "sourceMap": true,                                /* Create source map files for emitted JavaScript files. */
    // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If `declaration` is true, also designates a file that bundles all .d.ts output. */
    // "outDir": "./",                                   /* Specify an output folder for all emitted files. */
    // "removeComments": true,                           /* Disable emitting comments. */
    // "noEmit": true,                                   /* Disable emitting files from a compilation. */
    // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // "importsNotUsedAsValues": "remove",               /* Specify emit/checking behavior for imports that are only used for types */
    // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
    // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
    // "stripInternal": true,                            /* Disable emitting declarations that have `@internal` in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like `__extends` in compiled output. */
    // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
    // "preserveConstEnums": true,                       /* Disable erasing `const enum` declarations in generated code. */
    // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */
    // "preserveValueImports": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */

    /* Interop Constraints */
    // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
    // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */
    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */

    /* Type Checking */
    "strict": true,                                      /* Enable all strict type-checking options. */
    // "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied `any` type.. */
    // "strictNullChecks": true,                         /* When type checking, take into account `null` and `undefined`. */
    // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    // "strictBindCallApply": true,                      /* Check that the arguments for `bind`, `call`, and `apply` methods match the original function. */
    // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
    // "noImplicitThis": true,                           /* Enable error reporting when `this` is given the type `any`. */
    // "useUnknownInCatchVariables": true,               /* Type catch clause variables as 'unknown' instead of 'any'. */
    // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
    // "noUnusedLocals": true,                           /* Enable error reporting when a local variables aren't read. */
    // "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read */
    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
    // "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
    // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
    // "noUncheckedIndexedAccess": true,                 /* Include 'undefined' in index signature results */
    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type */
    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true                                 /* Skip type checking all .d.ts files. */
  }
}





















-------> AQUELA PROPRIEDADE DE 



"lib:" []













---------> ESTE TRECHO AQUI:


  "target": "es2016",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    // "lib": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */
    // "jsx": "preserve",  








------> NESSE 'TARGET',


ESTAMOS ESPECIFICANDO QUE VAMOS QUERER 

'COMPILE THE TYPESCRIPT CODE 

DOWN 
TO 



ES2016 JAVASCRIPT' (que é meio VELHO)...










-->  SE TROCARMOS PARA 'es6',

POR EXEMPLO,



diz o professor,





__ ESSE CÓDIGO DE 'new Promise()"


VAI FUNCIONAR SEM APITAR...








(

    NO MEU CÓDIGO, ISSO NÃO FOI NECESSÁRIO PQ __ EU JÁ TINHA 'es2016' escrito naquela propriedde...
)














------> CERTO.... 









--> ESTAMOS DIZENDO AO TYPESCRIPT QUE 

ESTAMOS 

TRABALHANDO COM UMA VERSÃO DO __ JAVASCRIPT_ 

QUE 

SUPORTA_ _PROMISES (es6+ ) --------> ISSO PQ 




___ 



AS PROMISES __ NÃO __ SÃO 




UMA FEATURE 'TYPESCRIPT',



PQ __ 




ELAS _ _NÃO PODEM __ SER COMPILADAS EM 

'ALGO QUE FUNCIONA COM 

JS/BROWSERS ANTIGOS',



EM VEZ DISSO 
DEVEMOS 

__DIZER__ AO 


TYPESCRIPT QUE 



__ QUEREMOS, SIM,


COMPILAR 



NOSSO CÓDIGO 






NESSE FORMATO 'ES6',



QUE 

NATIVAMENTE 

SUPORTA PROMISES....



(



    E É ISSO QUE FIZEMOS,

    COM O CHANGE DO TARGET PARA 

    'es2016'...




)















--> CERTO... AÍ CONTINUAMOS:



const myPromise = new Promise();












--> VAMOS QUERER PASSAR UM ARGUMENTO 

A ESSA 

PROMISE... --> ESSE 

ARGUMENTO __ SERÁ __ UMA 








___ FUNCTION, COMO SEMPRE_, 


COM 

ARGUMENTOS INTERNOS DE 

'res, rej'... (

    RESOLVE E REJECT)... 
)








ex:








const myPromise = new Promise(
    (res, rej) => {



    }
)












--> E DENTRO DESSA PROMISE,




QUANDO A DEFINIMOS 

POR CONTA PRÓPRIA,





__ PODEMOS __ DEFINIR ALGO COMO UM 

'setTimeout()',




PARA EXECUTAR UM 

CÓDIGO 






APÓS TRANSCORRIDA CERTA QUANTIDADE DE SEGUNDOS...






EX:








    const myPromise = new Promise(
        (res, rej) => {
      


            setTimeout(
                () => {
                    
                    res('IT WORKED!');
                },
                 

                 1000
            )
    
        }
    )










    --> OK, VAMOS RESOLVER NOSSA PROMISE, APÓS 1 SEGUNDO, COM 

    'it worked'...








--------------------------




MAS PARA 






USARMOS ESSA PROMISE (ela não se executará sozinha),


DEVEMOS 


CHAMÁ-LA 


com 



'
myPromise'....















--> CHAMADA ESSA PROMISE,


VAMOS CHAINAR 

'.then()' NELA...




--> CHAMAMOS 'THEN' PARA ENTÃO 

PEGAR SEU 


'RESULT'..




ex:







    const myPromise = new Promise(
        (res, rej) => {
      


            setTimeout(
                () => {
                    
                    res('IT WORKED!');
                },
                 

                 1000
            )
    
        }
    )




myPromise.then(
    (result) => {

        console.log(result);
    }
)



----------------------------------












OK.... ISSO FEITO,

VAMOS COMPILAR ESSE ARQUIVO 'app.ts' 



POR MEIO 


DO 



WRITE DE 

'tsc'


LÁ NO TERMINAL...





(

    PARA CONSEGUIRMOS USAR O 

    CONFIG FILE DE 'tsconfig.json' COM O COMPILER...
)




------------------------












-------->  ISSO TERÁ COMPILADO NOSSO CÓDIGO...






O ´CODIGO COMPILADO FICOU ASSIM:

const myPromise = new Promise((res, rej) => {
    setTimeout(() => {
        res('IT WORKED!');
    }, 1000);
});
myPromise.then((result) => {
    console.log(result); //vai outputtar 'it worked'...
})
    .catch((err) => {
    console.log(err);
});










--> SE AGORA RECARREGARMOS NOSSO CÓDIGO,






VEMOS QUE ELE __ FUNCIONOU_...










--> OK, MAS PQ 

A 

PROMISE É UM 'GENERIC TYPE'? 












--> SIM, PROMISES SÃO TRATADAS COMO 'GENERIC TYPES'... mas pq?







É PQ __ AS PROMISES EVENTUALMETNE VÃO FAZER 'RESOLVE/REJECT',



e 

esse 

RESOLVE/REJECT_  SEMPRE _ SERÁ 

UM 

VALOR SORTIDO (pode ser um OBJETO, UM BOOLEAN, UM NUMBER, UMA STRING... QUALQUER COISA).....








-------------------------










OK.......... AS PROMISES SÃO 

'
GENERIC TYPES'


pq 

os 
valores a que 

fazem resolve/REJECT 


PODEM SER QUALQUER COISA...














-------> NO CASO DE NOSSO EXEMPLO,

ELA 


FAZ RESOLVE A UMA __STRING_... -------->












SE QUISERMOS, 




PODEMOS 

ESCREVER 



'myPromise.then(
    (result) => {
            console.log(result.split('w')) ///EIS O CÓDIGO EM QUES~TAO.

    }
)
'

















--------> ENTRETANTO, ESSE WRITE DE 'result.split()' (SPLITTAR ESSA STRING) 



NÃO _ FUNCIONARÁ/DARÁ UM AVISO,






___ VAI DAR UM AVISO __ PQ O TYPESCRIPT __ NÃO TEM COMO SABER/COMPREENDER QUE ISSO,

ESSA 



PROMISE,

VAI NOS DAR 

_ UMA STRING___... (


    ele 

    não tem como saber o TYPE ESPECÍFICO DESSE 'GENERIC TYPE' QUE É 

    NOSSA PROMISE.... a promise pode RESOLVER/REJECT _ QUALQURE COISA,


    de verdade...
)












---> BEM.... SE QUISERMOS __ CONSERTAR__ ESSE PROBLEMA,


DEVEMOS 


__USAR AQUELA SINTAXE DO 

'angle brackets',



de 

'<>',




PARA ESPECIFICAR QUE __ VAMOS RESOLVE/REJECT __ SEMPRE UMA STRING COM ESSA NOSSA PROMISE...




ex:







const myPromise = new Promise<string>((res, rej) => { ///EIS O CÓDIGO EM QUESTÃO.
    setTimeout(() => {
        res('IT WORKED!');
    }, 1000);
});
myPromise.then((result) => {
    console.log(result); //vai outputtar 'it worked'...
})
    .catch((err) => {
    console.log(err);
});









--------------------------------------










NICE... ISSO FUNCIONOU...









--> MAS O PROFESSOR NOS EXPLICA QUE 

'NÃO PODEMOS, ENTRETANTO,


ADICIONAR ANGLE BRACKETS ESPECIFICANDO ISSO __ EM QUALQUER _ OBJECT/BUILTIN OBJECT 

DO JAVASCRIPT'... -->  SÓ PODEMOS FAZER ISSO 



_ NOS OBJETOS_  QUE 


SUPORTAM ESSA SINTAXE de '<>'... -------------> MAS O PROMISE OBJECT,


A CONSTRUCTOR FUNCTION DE 'OBJECT',


__ SUPORTA ISSO,

PQ 





__ 'VOCÊ PODE SETTAR O VALOR A QUE A PROMISE VAI RESOLVE/REJECT' .... 














--> OK.... ---> NOSSO CÓDIGO DE 'split'

VAI FUNCIONAR SEM AVISOS, PORTANTO... 












--> CERTO... --> GENERIC TYPES PODEM SER TRICKY NA PRIMEIRA VEZ QUE VOCÊ OS 

ESTUDA,

MAS 

ELES 

TE 



AJUDAM MT, FAZEM SENTIDO,


E TE DÃO 'EXTRA TYPE SAFETY' 

QUANDO 

VOC~E 
TRABALHA COM 






'MORE COMPLEX TYPES',


ou types
que 

SÃO SIMPLESMENTE CONECTADOS ENTRE SI....