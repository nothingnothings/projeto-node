O QUE SIGNIFICA 'MVC'












É ALL ABOUT THE SEPARATION OF CONCERNS... ------> isso quer dizer que 

voce tem que assegurar que DIFERENTES PARTES DO SEU CÓDIGO DEVERÃO FAZER 

DIFERENTES COISAS,




E VOCE TEM QUE SABER 


CLARAMENTE QUAL PARTE DEVERÁ SER 


RESPONSÁVEL POR OQ...









-----> MVC ---> SIGNIFICA 'MODEL VIEW CONTROLLER.'..




-> ISSO PQ TRABALHAMOS COM 

'MODELS'



'VIEWS'


E 

'CONTROLLERS'...











-------> VIEWS ---> JÁ SABEMOS O QUE SÃO, PQ JÁ TEMOS 'VIEWS' 

NOS NOSSOS PROJETOS  (são as pages/templates servidas aos nossos users...)






---> JÁ 'MODELS' SÃO BASICAMENTE OBJETOS, OU A PARTE 


DO 
SEU CÓDIGO 

QUE 
É 


RESPONSÁVEL POR __REPRESENTAR__ SUA DATA-_ NO SEU 

CÓDIGO,


E TE PERMITIR 
__tRABALHAR__ COM ESSA DATA (


ex: FETCH DATA,

SAVE DATA,


SALVAR DE/A UM ARUQIVO,


OU ATÉ MESMO 


O MANAGE DESSA DATA NA MEMÓRIA DO SEU APP, COMO ESTAMOS FAZENDO 

NO MOMENTO... --> TUDO ISSO É 

MANAGEADO POR 'MODELS'...



)








--> JÁ OS 'VIEWS' SÃO RESPONSÁVEIS POR AQUILO QUE O 


USUÁRIO VE,




SÃO RESPONSÁVEIS POR RENDERIZAR O CONTEÚDO CORRETO NOS NOSSOS DOCUMENTOS HTML,




E AÍ 

'SEND THEM BACK TO THE USER'... --------> ISSO SIGNIFICA QUE 


ELES 


SÃO 

DESCONECTADOS DO 

CÓDIGO DE SUA APPLICATION,




E QUE 


TEM 'MINOR/LIGHT' INTEGRATION EM RELAÇÃO 

__à DATA-_ QUE INJETAMOS __ NA NOSSA 

TEMPLATING ENGINE _ PARA __ GERAR__ ESSAS VIEWS__..


(''DECOUPLED FROM YOUR APPLICATION CODE...'''  )











JÁ OS CONTROLLERS, A 3A ESPECIE,



__ SÃO A 'CONEXAO', O CONNECTING POINT ENTRE 

AS 

VIEWS 

E 
OS MODELS... ---> ISSO PQ:




1) OS VIEWS NÃO SE IMPORTAM COM NOSSA APPLICATION LOGIC (and they shouldnt)



2) OS MODELS SE IMPORTAM COM NOSSA APPLICATION LOGIC....







3) JÁ OS CONTROLLERS SÃO A COISA QUE TRABALHA COM OS MODELS,
SAO A COISA 

QUE 



__ SALVAM A DATA/TRIGGAM O PROCESSO DE SAVE, ETC... --> 

E ELES 

TAMBBÉM


__SÃO RESPONSÁVEIS PELO 'PASS' DE DATA AOS SEUS 

VIEWS,



ELE FETCHEA A DATA E COLOCA NOS SEUS VIEWS (


isso significa que os controllers são o MIDDLEMAN,



ELES CONTEM A LÓGICA 'IN BETWEEN'...

)


OK, MAS E AS ROUTES














ROUTES ------------> --> ROUTES SE ENCAIXAM...




-> ROUTES SÃO BASICAMENTE AS COISAS QUE DEFINEM 

'PARA QUAL HTTP METHOD, PARA QUAL PATH, 


QUAL CONTROLLER CODE DEVERÁ SER EXECUTADO...  ' -----> JÁ O CONTROLLER 



DEFINE 


''''COM QUAL MODEL TRABALHAR''',



E '''''QUAL CÓDIGO DE LÓGICA EXECUTAR'''.









----> E COMO O PROFESSOR EXPLICOU,



O CONTROLLER É QUE 


DEFINE ___ COM QUAL MODEL VAMOS TRABALHAR, E COM QUAL 



VIEW DEVEMOS 

RENDERIZAR....










--> ESSE É O PATTERN.. ----> E EM UM APP COM 

EXPRESSJS,


BUILT COM EXPRESSJS,

QUE 


CONFIA MT NESSE CONCEITO DE 

'MIDDLEWARES',


____ OS CONTROLLERS 


ACABAM 

SENDO 

'KINDOF'  SPLITADOS 


AO LONGO DE MIDDLEWARE FUNCTIONS... (split up across middleware functions)...





--> ISSO SIGNIFICA QUE PARTE DA LÓGICA DOS CONTROLLERS ACABA SPLITTADA 

EM 

MÚLTIPLAS 


MIDDLEWARE FUNCTIONS...










--> POR ENQUANTO, DEVEMOS EXAMINAR NOSSO APP DO SHOP E VER COMO 


O PATTERN MVC É APLICADO NELE...












---> ADICIONANDO __CONTROLLERS__ AO NOSSO APP..