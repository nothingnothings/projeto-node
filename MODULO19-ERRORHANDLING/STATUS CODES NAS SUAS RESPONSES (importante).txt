









--> HÁ MAIS UMA COISA IMPORTANTE QUE O PROFESSOR QUER NOS MOSTRAR NESSE MÓDULO,
 

 QUE 



 SÃO 

 OS 


 'HTTP STATUS CODES'...










 ----------> STATUS CODES....











 --> QUAIS CODES TEMOS, E QUAIS UTILIZAMOS?








 --> PROFESSOR QUER COMEÇAR POR: 'QUAL A UTILIDADE DOS CÓDIGOS, PQ ELES EXISTEM?'















 --> STATUS CODES -----> SÃO SIMPLESMENTE 'EXTRA INFO' que passamos aos browsers,



EXTRA INFO _ QUE AJUDA O BROWSER A ENTENDER  ______ SE UMA OPERATION 'SUCCEEDED OR NOT'...










-----> SE VOCÊ ESTÁ ESCREVENDO UM APP ___ COM UM __ MONTE__ DE CÓDIGO CLIENTSIDE 

JAVASCRIPT,





___ OU ENTÃO 1 'MOBILE APP',



APPS NOS QUAIS VOCÊ 

ENTÃO 

FAZ 

O 

FETCH DE 

'ONLY DATA'



EM VEZ 


__ DE PÁGINAS HTML COMPLETAS E PESADAS (algo que faremos no futuro),










ALGO QUE É VISTO 



EM 



APLICATIVOS QUE USAM A 'REST API' no nosso servidor,











NESSES CASOS OS STATUS CODES 


'ALLOW YOU TO UNDERSTAND IF AN ERROR HAPPENED',



E TAMBÉM 


__ QUAL TIPO _ DE ERRO... ----->  ISSO PQ __ VOCÊ TIPICAMENTE 


MAPPEIA __ 


CERTOS TIPOS DE 

ERRORS 

A 

CERTOS TIPOS 

DE 

STATUS CODES...










----> POR EXEMPLO,

TEMOS 




CÓDIGOS 




'200'




e 





'201' 









--> SÃO CÓDIGOS DE SUCESSO, SÃO MT IMPORTANTES...




--> INDICAM QUE NOSSA OPERAÇÃO FOI UM SUCESSO....





--> 200  e 201...















----> 3XX --------> CÓDIGOS DE 300 SÃO SIMPLESMENTE 




'REDIRECTION STATUS CODES',

eles 

indicam que 

UM REDIRECT ACONTECEU AO USER (perda do request antigo, make de um novo request...)
















--------> CÓDIGOS 4XX (400), -------> INDICAM 



'CLIENT-SIDE ERRORS'.. -------------->  ELES INDICAM QUE 



'SOMETHING HAPPENED'

PQ 


1 ERRO FOI CAUSADO_ __ PELO CLIENT EM SI___... (


    exemplos clássicos:




    1) DATA INCORRETA FOI INPUTTADA EM UMA FORM...



    2) FORA COLOCADO UM PATH QUE NÃO EXISTE 


    NA URL BAR....
)











------> CÓDIGO DE 'INPUT ERRADO EM UMA FORM '--> retornamos o  



CLÁSSICO 



'status(422)'....












--> POR FIM, TEMOS 




OS 

STATUS 

DE 


'500',


QUE 


SERVEM 

PARA 


INDICAR 




que 



UM 


'SERVERSIDE ERROR'


aconteceu...











certo....











ENTÃO TEMOS 





__4 __ MODALIDADES DE ERRO....








2 ---> sucesso (Verde)



3 ---> redirect (laranja)



4 --> erro, clientside (vermelho) --> ex: 'input errado/inválido;' 'PÁGINA/PATH NÃO ENCONTRADO'....



5 --> SERVERSIDE ERROR ---> EX: 'erro de database'...










---------------------------------








PROFESSOR ENTÃO PASSA A CITAR ALGUNS EXEMPLOS DE CADA STATUS CODE....












--> 200 



e 



201 











--> DIFERENÇA ENTRE OS 2:





200 ------>  OPERATION SUCCEEDED... é GENÉRICO...







201 ---> operation succeeded, mas 1 RESOURCE FOI CRIADO __ NO NOSSO APP/database/server...












ok......... ESSE É UM PADRÃO __ COMUM___...







----------------------------------------------------






REDIRECTS:









301 -------> SIMPLESMENTE É UM CÓDIGO QUE É USADO EM CONJUNTO COM 'REDIRECTION',


e que 

é 

TIPICAMENTE USADO PARA 'INFORM US', por exemplo,


que 'THIS RESOURCE MOVED PERMANENTLY',

ou coisa do tipo.... (não entendi)..


The HTTP response status code 301 Moved Permanently is used for permanent redirecting, 
meaning that links or records returning this response should be updated.
 The new URL should be provided in the Location field, included with the response.






Em linhas gerais, o Redirect 301 é uma instrução no servidor que informa 
que a Página A agora é a Página B, de forma que quando o visitante
acessar a Página A será automaticamente remetido para o endereço da Página B.






É através desse mecanismo que quando você acessa bancoreal.com.br cai em santander.com.br e também 
quando você acessa www.resultadosdigitais.com.br cai em resultadosdigitais.com.br.














-----> professor explica que 


'301' também é usado para TEMPORARY REDIRECTS











MAS OS REDIRECTS TEMPORÁRIOS GERALMENTE SÃO ASSIM:







A 307 Temporary Redirect is an HTTP response status code that 
indicates that that the URL the user is requesting has been transferred to
 a temporary location and will be back soon. Before the advent of HTTP 1.1, 302s were commonly
 
  used to create temporary redirects.

















-----------------------------------







CÓDIGOS 400, DE ERRO 'CLIENTSIDE',


temos 




o 








401 ---> USADO PARA 'NON AUTHENTICATED, error' --->  quando user não tem AUTH ALGUMA no seu app...







403 --->  USADO PARA 'NOT AUTHORIZED, error'... -----> 'VOCÊ PODE ESTAR AUTHENTICATED, MAS VOCÊ AINDA PODE NÃO ESTAR ALLOWED/AUTHORIZED A FAZER ESSA OPERAÇÃO ESPECÍFICA'....







404 --> PAGE NOT FOUND (path inválido)...







422--->  __ USADO PARA 'INVALID INPUT' por parte do user...








--> HÁ MAIS ALGUNS.....





-------------------------------














5XX 





500 ---> É O MAIS COMUM, INDICA 'HOUVE UM SERVERSIDE ERROR'...











--> MAS HÁ OUTROS, COMO O 

DE 
'
TIMEOUT'
 

 e assim por diante...












 --. NA PRÓXIMA LIÇÃO ENCONTRAMOS A LISTA COMPLETA DE STATUS CODES....
















-------> PROFESSOR DIZ QUE DEVEMOS ESCANEAR NOSSO CÓDIGO RAPIDINHO, VER SE ENCONTRAMOS 

ALGUNS LUGARES ONDE PODEOMS 


COLOCAR CÓDIGOS DE 


STATUS.... 








--> SE 


EXAMINAMOS NOSSO CÓDIGO,


VAMOS PERCEBER QUE 


___RARAMENTE___ SETTAMOS 1 

'STATUS CODE'.. 






nos controllers...









--> começamos por admin.js:










const Product = require('../models/product');

const ObjectId = require('mongodb').ObjectId;

const { validationResult } = require('express-validator');

const fs = require('fs');

// exports.getAddProductPage = (req, res, next) => {
//     res.render('admin/add-product', {        //RENDER. USADO COM TEMPLATING ENGINES COMO 'pug'...
//       pageTitle: 'Add Product',
//       path: '/admin/add-product',
//       activeAddProduct: true,
//       productCSS: true,
//       formsCSS: true,
//     });

//   };

exports.getAddProductPage = (req, res, next) => {
  const editMode = req.query.edit;

  const errors = validationResult(req);

  validationErrors = errors.array();

  // if(!req.session.isLoggedIn) {

  //   ///É ___A GUARD__ DE NOSSA PÁGINA... -> se o usuário NÃO ESTIVER 'LOGGED IN'/ autenticado, NÃO VAMOS RENDERIZAR A PAGE COMUM DE 'ADD A PRODUCT' para ele... (vamos bloquear a route, essencialmente; ou, em outras palavras, renderizar OUTRA COISA que não a page original, de 'add a product', destinada AOS USERS AUTENTICADOOS...)
  //     ////É CLARO QUE ESSE APPROACH É MEIO CUMBERSOME.... --> NA AULA 254, PROFESSOR NOS MOSTRA__ APPROACH BEM MENOS CUMBERSOME, E BEM MAIS 'SCALABLE'...
  //       ////examinar arquivo 'isAuth.js', lá no FOLDER de 'middlewares'... -- > vamos importar esse middleware LÁ NOS NOSSOS ARQUIVOS DE 'routes'...
  //       return res.redirect('/login');

  // }

  // const isLoggedIn = req.get('Cookie').trim().split('=')[1];

  res.render('admin/edit-product', {
    pageTitle: 'Add Product',
    path: '/admin/add-product',
    editing: editMode,
    errorMessage: null,
    validationErrors,

    // isLoggedIn: req.session.isLoggedIn,  ///FUNCIONAL, MAS CUMBERSOME (vamos ter que adicionar essa property EM TODO E CADA CONTROLLER DE NOSSO APP, 1 por 1.... mt chato).
    // csrfToken: req.csrfToken() /// FUNCIONAL, MAS CUMBERSOME (como o código de cima)....
    // isLoggedIn: req.isLoggedIn
    // isLoggedIn: isLoggedIn
  });
};

exports.getEditProductPage = (req, res, next) => {
  const editMode = req.query.edit;

  // console.log(req.params.productId);

  if (!editMode) {
    return res.redirect('/'); ////redireciona admin que NÃO TIVER O QUERY PARAM de 'edit=true' na url que é enviada a route de '/admin/edit-product/:productId?'....
  }

  const productId = req.params.productId;

  // Product.getSingleProduct(productId) ///método custom/criado por nós... --> foi usado com o MONGODB DRIVER COMUM, e não com o mongoose (que é claramente melhor, pois possui o builtin method de 'findById'....)
  Product.findById(productId)
    .then((product) => {
      if (!product) {
        // return res.redirect('/'); //RUIM.... não faz muito sentido...

        req.flash( 
          'error',
          'Product not found'
        );
        res.redirect('/admin/product-list-admin');  ////BEM MELHOR DO QUE AQUELE redirect para '/', pois vamos REDIRECIONAR PARA A PAGE DE 'product list admin' E AÍ VAMOS DISPLAYAR UMA MENSAGEM DE ERRO DIZENDO QUE O PRODUCT NÃO PODE SER ENCONTRADO... melhor user experience...
          




      }

      // const isLoggedIn = req.get('Cookie').trim().split('=')[1];

      res.render('admin/edit-product', {
        pageTitle: 'Edit Product',
        path: '/admin/edit-product',
        editing: editMode,
        prod: product,
        // isLoggedIn: req.session.isLoggedIn
        // isLoggedIn: isLoggedIn
      });
    })
    .catch(err => {
      const error = new Error(err);
      error.httpStatusCode = 500;
      return next(error);

}) 

  ///CÓDIGO QUE USA/USAVA ___ SEQUELIZE E UMA DATABASE SQL...
  // req.user.getProducts( ///approach mais ELEGANTE do que 'Product.findByPk(productId)', mas __RETORNA 1 ARRAY em vez de 1 'objeto', o que nos força A MANIPULÁ-LO com códigos como 'const product = products[0]', visto logo abaixo....
  //   {
  //     where: {id: productId}
  //   }

  // )
  // .then(
  //   (products) => {

  //     const product = products[0];

  //     if (!product) {
  //       return res.redirect('/');
  //     }
  //     res.render('admin/edit-product', {
  //       pageTitle: 'Edit Product',
  //               path: '/admin/edit-product',
  //               editing: editMode,
  //               prod: product,
  //     })
  //   }
  // )

  ////o 'getProducts', exemplo de MAGIC METHOD do sequelize, é approach MAIS ELEGANTE do que esse de '.findByPk(productId)'...
  // Product.findByPk(productId) //código COM O SEQUELIZE... ///substituímos pelo código logo acima, que é a mesma coisa, MAS __RESTRINGINDO O SEARCH DOS PRODUCTS APENAS àQUELES PRODUCTS QUE REALMENTE TENHAM SIDO CRIADOS POR ESSE 'user' específico (o 'req.user.id' deve bater, ser o mesmo valor do field 'userId' em um dado record/product na nossa database...)
  //   .then((product) => {
  //     if (!product) {
  //       alert(
  //         'The requested product has not been found in the database.'
  //       );
  //       return;
  //     } else {
  //       res.render('admin/edit-product', {
  //         pageTitle: 'Edit Product',
  //         path: '/admin/edit-product',
  //         editing: editMode, ////TRABALHO COM QUERY PARAMS.... --> usado para comunicar/diferenciar entre requests que querem ADICIONAR UM NOVO PRODUTO E ___ REQUESTS__ QUE QUEREM __ ALTERAR UM PRODUTO QUE JÁ EXISTE ('editMode = true'....)
  //         prod: product,
  //       });
  //     }
  //   });

  // Product.findProduct(productId).then(([rows, fieldData]) => { //CÓDIGO SEM O SEQUELIZE...

  //   console.log(rows);
  //   if (!rows) {
  //     return res.redirect('/');
  //   } else {
  //     const prod = {
  //       ...rows[0],
  //     };
  //     res.render('admin/edit-product', {
  //       pageTitle: 'Edit Product',
  //       path: '/admin/edit-product',
  //       editing: editMode, ////TRABALHO COM QUERY PARAMS.... --> usado para comunicar/diferenciar entre requests que querem ADICIONAR UM NOVO PRODUTO E ___ REQUESTS__ QUE QUEREM __ ALTERAR UM PRODUTO QUE JÁ EXISTE ('editMode = true'....)
  //       prod: prod,
  //     });
  //   }
  // });

  // Product.findProduct(productId,
  //     (product) => {

  //       if (!product) {
  //         return res.redirect('/'); //não é a melhor user experience, mas dá pro gasto.... (devíamos mostrar um error....)
  //       }
  //       // console.log(product);
  //       res.render('admin/edit-product', {
  //         pageTitle: 'Edit Product',
  //         path: '/admin/edit-product',
  //         editing: editMode, ////TRABALHO COM QUERY PARAMS.... --> usado para comunicar/diferenciar entre requests que querem ADICIONAR UM NOVO PRODUTO E ___ REQUESTS__ QUE QUEREM __ ALTERAR UM PRODUTO QUE JÁ EXISTE ('editMode = true'....)
  //         prod: product
  //       });
  //     }

  //   )
};

exports.editProduct = (req, res, next) => {
  const productId = req.body.id;
  const userId = req.user._id;

  const title = req.body.title;
  const imageUrl = req.body.imageUrl;
  const description = req.body.description;
  const price = req.body.price;

  const errors = validationResult(req);

  const validationErrors = errors.array();

  console.log(validationErrors);

  // const product = new Product( title, price, imageUrl, description, userId, productId) /////////CÓDIGO VELHO, QUE USAVA O 'MONGODB DRIVER' default, ___ SEM O MONGOOSE__ E SEUS HELPER METHODS, HELPER METHODS EXISTENTES NOS 'MODELOS MONGOOSE'...
  //   product.save() ///CÓDIGO DO PROFESSOR... UM POUCO MAIS OPTIMIZADO DO QUE O MEU, POIS USA UM MESMO MÉTODO, 'save()', para RODAR 2 OPERAÇÕES DIFERENTES, 1 OPERAÇÃO DE EDIT E OUTRA DE ADD....
  //   .then(
  //     (result) => {

  //       console.log(result);
  //       res.redirect('/admin/product-list-admin');
  //     }
  //   )
  //   .catch(
  //     (err) => {
  //       console.log(err);

  //       res.redirect('/admin/product-list-admin');
  //     }
  //   )

  //APPROACH DO MONGOOSE...

  ///MÉTODO DO MONGOOSE QUE EXPERIMENTEI E FUNCIONOU, MAS QUE NÃO FOI USADO PELO PROFESSOR, por alguma razão....
  // Product.findOneAndUpdate( ///MÉTODO BUILTIN DO MONGOOSE, BUILTIN NOS MODELS MONGOOSE DEFINIDOS POR NÓS....

  //   {_id: ObjectId(productId)},

  //   {
  //       title: title,
  //       imageUrl: imageUrl,
  //       description: description,
  //       price: price

  //   }

  // )

  if (validationErrors.length > 0) {
    console.log(validationErrors);
    console.log(errors.array(), 'saasas');

    Product.find({ userId: userId }).then((products) => {
      // let errorMessage = null;

      return res.status(422).render('admin/product-list-admin', {
        pageTitle: 'Admin Products Page',
        path: 'admin/product-list-admin',
        errorMessage: errors.array()[0].msg,
        validationErrors: validationErrors,
        prods: products,
      });
    })
    .catch(err => {
      const error = new Error(err);
      error.httpStatusCode = 500;
      return next(error);

}) 
  } else {
    Product.findById(productId) //método MONGOOSE, builtin...


      .then((product) => {

        ////throw new Error('Dummy'); //////ESSE É O EXEMPLO USADO PELO PROFESSOR... é necessário esse THROW MANUAL DE UM ERROR (isso é só um exemplo, pq você não vai escrever assim...)
        if (product.userId.toString() !== req.user._id.toString()) {
          return res.redirect('/');
        } else {
          product.title = title;
          product.price = price;
          product.description = description;
          product.imageUrl = imageUrl;

          return product.save();
        }
      })
      .then((result) => {
        console.log('UPDATED PRODUCT');
        res.redirect('/admin/product-list-admin');
      })
      .catch((err) => {   //////// O __ ERRO__ DO 'throw new Error('Dummy')' (_ E QUALQUER OUTRO ERROR DESSE TIPO, do tipo que 'THROWS AN ERROR') É __ CAPTURADO AQUI....  e armazenado nessa variável 'err', que então PASSAMOS AO CALL DE 'next()" LOGO ABAIXO, PARA __CONSEGUIR __ TRIGGAR O 'SPECIAL ERROR HANDLING MIDDLEWARE', lá no app.js...
        console.log(err);

        const error = new Error(err);
        error.httpStatusCode = 500;
        return next(error); ///É ISSO QUE VAI FAZER O REPASSE DO ERRO A NOSSA 'SPECIAL ERROR HANDLING MIDDLEWARE', lá no app.js.... (é o middleware que  tem 4 argumentos, 'error, req, res, next'...)
      });
  }
};

exports.postDeleteProduct = (req, res, next) => {
  // Product.deleteProduct(req.body.id); ///////CÓDIGO QUE NÃO USAVA O SEQUELIZE...
  // console.log('TEST');
  // res.redirect('/');

  const productId = req.body.id;

  Product.findByIdAndDelete(productId) ///////MÉTODO __ DO MONGOOSE__, USADO COM FREQUÊNCIA... (use sempre 'findByIdAndDelete()', que é a versão que DEPRECOU o 'findByIdAndRemove()'....)
    .then((result) => {
      console.log(result);
      res.redirect('/admin/product-list-admin');
    })
    .catch(err => {
      const error = new Error(err);
      error.httpStatusCode = 500;
      return next(error);

}) 

  // Product.deleteProduct(productId) //////CÓDIGO QUE __ NÃO USAVA O 'MONGOOSE', e sim apenas o 'mongodb driver' default.... --> devemos usar o MONGOOSE, aquele method de 'findByIdAndDelete()'...
  // .then(
  //   (result) => {
  //         console.log(result, 'LINE');
  //         res.redirect('/admin/product-list-admin');

  //   }
  // )
  // .catch(
  //   (err) => {
  //     console.log(err);
  //     res.redirect('/admin/product-list-admin');
  //   }
  // )

  ////MEU CÓDIGO SEQUELIZE. Funciona, mas é um pouco pior do que o do professor, que usa 'product.destroy()' em vez de 'Product.destroy()' (a versão com MAIÚSCULO vai RODAR UMA QUERY, aceitando um OBJETO QUE AJUDA A IDENTIFICAR QUAL PRODUCT QUEREMOS DESTRUIR... JÁ A VERSÃO EM MINÚSCULO destrói o OBJETO/product que FOI ENCONTRADO pelo run da query 'FindByPk()'...)

  // Product.destroy(
  //   {
  //     where: {id: productId}
  //   }
  // )
  // .then(
  //   (result) => {
  //     console.log(result);
  //     res.redirect('/products')
  //   }
  // )
  // .catch(
  //   (err) => {
  //     console.log(err);
  //   }
  // )

  // Product.findByPk(productId)
  // .then(
  //   (product) => {
  //       return product.destroy(); //esse return nos ajuda com O HANDLE DO then e catch blocks logo abaixo, que dependem dele...
  //   }
  // )
  // .then(
  //   (result) => {
  //       console.log('DELETED PRODUCT');
  //       res.status(302).redirect('/admin/product-list-admin');
  //   }
  // )
  // .catch(
  //   (err) => {console.log(err)}
  // )
};

// exports.postAddProduct = (req, res, next) => { ///VERSÃO QUE NÃO USAVA SEQUELIZE.....
//     // products.push({ title: req.body.title });

//                                   //id, title, imageUrl, description, price
//     const newProduct = new Product(null, req.body.title, req.body.imageUrl, req.body.description, req.body.price );
//     // newProduct.save();  //é código assíncrono, no final das contas...
//     // // res.status(302).redirect('/');

//     newProduct.save()
//     .then(
//       () => {
//         res.status(302).redirect('/');
//       }
//     )
//   };

exports.postAddProduct = (req, res, next) => {
  const errors = validationResult(req);

  const validationErrors = errors.array();

  console.log(validationErrors);

  const title = req.body.title;
  const imageUrl = req.body.imageUrl;
  const price = req.body.price;
  const description = req.body.description;
  // const user = req.user;
  console.log(req.user);
  const userId = req.user._id; ////importante

  ////VERSÃO QUE UTILIZA/UTILIZAVA O DRIVER PADRÃO DE 'MONGODB' do node, em vez de 'mongoose'.... passamos a usar O MONGOOSE, por isso não vamos mais INSTANCIAR ESSE 'product' com esses argumentos, dessa forma aí...
  // const newProduct = new Product(title, price, imageUrl, description, userId); ///com isso, estamos usando A VERSÃO 'NOSQL'/mongodb do código de 'add a product to our database'...

  //  newProduct.save().then(
  //    (result) => {

  //         // console.log(result);
  //         res.redirect('/admin/product-list-admin');

  //    }
  //  )
  //  .catch(
  //    (err) => {
  //         // console.log(err);
  //         res.redirect('/product-list-admin');
  //    }
  //  )

  if (validationErrors.length > 0) {
    console.log(validationErrors);
    console.log(errors.array(), 'saasas');

    Product.find({ userId: userId }).then((products) => {
      // let errorMessage = null;

      return res.status(422).render('admin/product-list-admin', {
        pageTitle: 'Admin Products Page',
        path: 'admin/product-list-admin',
        errorMessage: errors.array()[0].msg,
        validationErrors: validationErrors,
        prods: products,
      });

      //     return  res.render( 'admin/product-list-admin', {
      //       pageTitle: 'Admin Products Page',
      //       path: 'admin/product-list-admin',
      //       errorMessage: errorMessage,
      //       validationErrors: validationErrors,
      //       prods: products

      //     }
      // )
    });
  } else {
    const product = new Product({
      ///VERSÃO _MONGOOSE__ do código acima... --> vamos instanciar nosso MODEL MONGOOSE, e aí vamos passar um OBJETO como seu parâmetro... (sintaxe distinta daquela usada com o NORMAL MONGODB DRIVER, em que INSTANCIÁVAMOS UM MODELO 'Product', e em que A ORDEM DE PASS DOS PARÂMETROS IMPORTAVA, PQ NÃO ESTÁVAMOS USANDO 1 JAVASCRIPT OBJECT PARA PASSAR OS PARÂMETROS, COMO ESTAMOS FAZENDO AQUI, nessa linha....)

      title: title,
      price: price,
      description: description,
      imageUrl: imageUrl,
      userId: userId, //////IMPORTANTE, vincula cada product que é criado AO USER QUE O CRIOU... (relation por meio de REFERENCING, field de 'userId' em cada PRODUCT...)
    });

    product ///esse agora é um MODEL INSTANCIADO __ MONGOOSE, E NÃO 'MONGODB NORMAL' (sem o mongoose).... --> isso significa que ELE VAI TER, NO SEU INTERIOR, TODOS OS MÉTODOS ESPECIAIS DE MODELS MONGOOSE, models definidos com o MONGOOSE, métodos que FACILITAM O WRITE DE QUERIES NOSQL....
      .save() ///// esse, agora, não é o método 'save()' que era escrito por nós, por nossas próprias mãos, e SIM __ O MÉTODO '.save()' PROVIDENCIADO PELO PRÓPRIO MONGOOSE, dentro dos MODELS mongoose...
      .then((result) => {
        // console.log(result);
        res.redirect('/admin/product-list-admin');
      })
      .catch((err) => {
        // console.log(err);
        // res.redirect('/product-list-admin');

        console.log(err);

        // res.render('500'); //jeito ERRADO de fazer isso... (não usa o controller lá em 'error.js'...)
        ///    res.redirect('/500'); //SEGUNDO jeito errado de fazer isso.... -> É MELHOR __ FAZER O THROW DE UM ERROR, E AÍ USAR A 'EXPRESSJS ERROR HANDLING MIDDLEWARE' para handlar esse THROWN ERROR...

        // throw new Error() /// UM DOS JEITOS CORRETOS de fazer o error handling de TECHNICAL PROBLEMS (problemas como DATABASE CONNECTION FAILED)... --> isso vai resultar no RETURN DE UMA PAGE 500 AO USER, que é o que queremos... (e sem redirects ou render diretos... e sim o uso do EXPRESSJS ERROR HANDLING MIDDLEWARE...)
        ///entretanto, prefira o código abaixo, que usa 'next(erroQueVocêQuerPassar)', pq esse approach de baixo usa o 'EXPRESSJS BUILTIN ERROR HANDLING MIDDLEWARE'....

        const error = new Error(err); //poderíamos definir nossa própria error message aqui, e não usar esse objeto 'err' --> ex: new Error('Database connection error. Please sit tight!');
        error.httpStatusCode = 500;
        return next(error); ////o pass de um ERROR a um call de 'next()' faz com que ocorra um JUMP diretamente para os 'ERROR HANDLING MIDDLEWARES'... todos os MIDDLEWARES COMUNS de nosso app são PULADOS.... -------> FAZ COM QUE O MIDDLEWAER DE 'app.use((error, req, res, next) => { res.redirect(/'500')}' LÁ EM 'app.js' SEJA __ EXECUTADO, POIS É ESSE TAL DE 'MIDDLEWARE ESPECIAL DE ERROR HANDLING'... )

        //     return  res.status(500).render( 'admin/edit-product', {  ////OUTRA OPÇÃO DE ERROR HANDLING === RE-RENDERIZAR A PAGE EM QUE O USER ESTAVA, MAS COM A ADIÇÃO DE UM MODAL/DIV  INFORMANDO-O DO ERRO QUE ACONTECEU, e que ele pode dar retry, etc etc...
        //       pageTitle: 'Add Product',
        //       path: 'admin/add-product',
        //       editing: false,
        //       hasError: true,
        //       product: {
        //         title: title,
        //         imageUrl: imageUrl,
        //         price: price,
        //         description: description
        //       },
        //       errorMessage: 'Database operation failed, please try again',
        //       validationErrors: [],
        //       prods: products

        //     }
        // )
      });
  }
};

exports.getProductsAdminPage = (req, res, next) => {
  // Product.findAll().then((products) => {
  //   res.render('admin/product-list-admin', {
  //     path: '/admin/products-list',
  //     pageTitle: 'Admin Products Page',
  //     prods: products,
  //   });
  // });

  // Product.getProducts()  ///MÉTODO QUE USÁVAMOS COM O 'MONGODB DRIVER' comum, sem o mongoose.... --> substituímos PELO USO DO método fetchall __BUILTIN DO MONGOOSE, QUE É 'find()', nos MODELS MONGOOSE QUE CRIAMOS...

  console.log(req.session.user);

  const userId = req.session.user._id;
  const userId2 = req.user._id;

  const errors = validationResult(req);

  validationErrors = errors.array();

  console.log(userId2);

  Product.find({ userId: userId }) /////forma de fazer 'AUTHORIZATE', essencialmente.... (só vamos poder VER o PRODUCT QUE FOI EFETIVMAENTE CRIADO PELO PRÓPRIO USER/ADMIN que o CRIOU)...
    // .populate('userId') ///////// O 'POPULATE' (que deve ser chamado após '.find()', opcionalmente) TE DEIXA DIZER AO  'MONGOOSE' QUE  ELE  DEVE  ''''POPULATE A CERTAIN FIELD ___WITH ALL THE __  DETAILED INFORMATION ABOUT  THAT THING (no caso, o 'user'), NOT JUST ITS ID'''''... --> DE FATO, ISSO É ___MUITO, MAS MUITO ÚTIL... (OBS:: O PARâMETRO, no caso 'userId', é o FIELD QUE VOCÊ DESEJA QUE FIQUE PREENCHIDO POR TODA ESSA DETAILED INFORMATION acerca desse document envolvido na relation (no caso, 'user', o user RELACIONADO ao given product) ...
    .then((products) => {
      // const isLoggedIn = req.get('Cookie').trim().split('=')[1];

      if (!products) {
        res.render('admin/product-list-admin', {
          path: '/admin/products-list',
          pageTitle: 'Admin Products Page',

          prods: [],
        });
      }

      res.render('admin/product-list-admin', {
        path: '/admin/products-list',
        pageTitle: 'Admin Products Page',
        prods: products,
        // errorMessage: errors.array()[0].msg,
        errorMessage: null,
        validationErrors: validationErrors,
        // isLoggedIn: req.session.isLoggedIn
        // isLoggedIn: isLoggedIn
      });
    })
    .catch(err => {
      const error = new Error(err);
      error.httpStatusCode = 500;
      return next(error);

}) 

  // Product.fetchAll(
  //   (products) => {
  //res.render('admin/product-list-admin', {
  //     path: '/admin/products-list',
  //     pageTitle: 'Admin Products Page',
  //     prods: products
  //   })
  //}
  // )
};


















-----------------------> O DEFAULT DE STATUS CODES É 


'200' -------> ESSE 


DEFAULT É FINE 

PARA 


CONTROLLERS COMO 




'''










exports.getAddProductPage = (req, res, next) => {
  const editMode = req.query.edit;

  const errors = validationResult(req);

  validationErrors = errors.array();

  res.render('admin/edit-product', {
    pageTitle: 'Add Product',
    path: '/admin/add-product',
    editing: editMode,
    errorMessage: null,
    validationErrors,
  });
};




'''''''






-----------------------------------








É 'FINE' 

PARA 

ESSE CASE AÍ,




MAS 


QUANDO 

VAMOS 


ATÉ NOSSO CÓDIGO DE 'create a new product',








TEMOS ESTE CÓDIGO:















exports.postAddProduct = (req, res, next) => {
  const errors = validationResult(req);

  const validationErrors = errors.array();


  const title = req.body.title;
  const imageUrl = req.body.imageUrl;
  const price = req.body.price;
  const description = req.body.description;
  console.log(req.user);
  const userId = req.user._id; ////importante


  if (validationErrors.length > 0) {


    Product.find({ userId: userId }).then((products) => {

      return res.status(422).render('admin/product-list-admin', {
        pageTitle: 'Admin Products Page',
        path: 'admin/product-list-admin',
        errorMessage: errors.array()[0].msg,
        validationErrors: validationErrors,
        prods: products,
      });
    });
  } else {
    const product = new Product({
      title: title,
      price: price,
      description: description,
      imageUrl: imageUrl,
      userId: userId, //////IMPORTANTE, vincula cada product que é criado AO USER QUE O CRIOU... (relation por meio de REFERENCING, field de 'userId' em cada PRODUCT...)
    });

    product ///esse agora é um MODEL INSTANCIADO __ MONGOOSE, E NÃO 'MONGODB NORMAL' (sem o mongoose).... --> isso significa que ELE VAI TER, NO SEU INTERIOR, TODOS OS MÉTODOS ESPECIAIS DE MODELS MONGOOSE, models definidos com o MONGOOSE, métodos que FACILITAM O WRITE DE QUERIES NOSQL....
      .save() ///// esse, agora, não é o método 'save()' que era escrito por nós, por nossas próprias mãos, e SIM __ O MÉTODO '.save()' PROVIDENCIADO PELO PRÓPRIO MONGOOSE, dentro dos MODELS mongoose...
      .then((result) => {
        // console.log(result);
        res.redirect('/admin/product-list-admin');
      })
      .catch((err) => {
        const error = new Error(err); //poderíamos definir nossa própria error message aqui, e não usar esse objeto 'err' --> ex: new Error('Database connection error. Please sit tight!');
        error.httpStatusCode = 500;
        return next(error); ////o pass de um ERROR a um call de 'next()' faz com que ocorra um JUMP diretamente para os 'ERROR HANDLING MIDDLEWARES'... todos os MIDDLEWARES COMUNS de nosso app são PULADOS.... -------> FAZ COM QUE O MIDDLEWAER DE 'app.use((error, req, res, next) => { res.redirect(/'500')}' LÁ EM 'app.js' SEJA __ EXECUTADO, POIS É ESSE TAL DE 'MIDDLEWARE ESPECIAL DE ERROR HANDLING'... )
      });
  }
};









------------- 






--> NESSE CÓDIGO AÍ,
 
 JÁ FAZEMOS O USO DE UM STATUS CODE DE '422' (input inválido)



 QUANDO 





 OCORRE FALHA NA 'VALIDATION',




 MAS VAMOS QUERER QUE 

 TAMBÉM 

 SEJA 


 ENVIADO 

 UM CÓDIGO DE 'SUCCESS' A PARTIR 

 DE 

 NOSSO 

 'succeed'...






(

    ou seja,

    lá 



    em 



''''''''''''''

   product 
      .save() 
      .then((result) => {
        res.redirect('/admin/product-list-admin');
      })

''''''''''''

)









--> eu imagino que é IDIOTA/inútil colocar um STATUS CODE EM 1 REDIRECT,

mas 

eu posso estar enganado..










--> PROFESSOR EXPLICA EXATAMENTE ISSO:




SE NÓS 'SUCCEED' AQUI, Nós já estamos fazendo 1 


__REDIRECT__, 

QUE 
É UM MOVIMENTO/response que 

JÁ VAI SETTAR 



UM 

STATUS CODE DE 

'301'... (redirect)  -----------------------> ENTRETANTO, MAIS TARDE,


QUANDO 


APRENDERMOS SOBRE 


'RESTFUL APIs',




QUE É UM TIPO DIFERENTE DE NODEAPP (em que retornamos NÃO HTML, e sim 'JUST DATA'),





AÍ __ VAMOS VER _______ QUE _ É 





POSSÍVEL/BOM 






VER 'THE 201 CODE COMING BACK'... --------> isso pq aqui, NESSA CONFIGURAÇÃO ATUAL DO CÓDIGO,




ESSE 

'status(201)', PERANTE ESSE 'redirect()',



NÃO FAZ SENTIDO...













-----------> OK....  MESMA COISA COM 'edit product',




TAMBÉM É OK DEIXAR ESSE 


'res.redirect('/')',









TODOS ESSES REDIRECTS vão retornar '200' (que é o default, devido a esse REDIRECT...)












--> EM TODOS OS CASES DE SUCCESS, DE NOSSO APP,

NÓS FAZEMOS 'REDIRECT',






O QUE FAZ COM QUE 200 SEJA USADO AUTOMATICAMENTE...











--> ISSO SIGNIFICA QUE TODOS OS CODES DE NOSSO APP 

SÃO 

'PRETTY FINE'
,




BEM DECENTES...







-------> UMA DAS MELHORES COISAS 

DE 

SE FAZER/GOOD PRACTICE 

É 


USAR 




'res.status(422).render()'





PARA FINS DE 'VALIDATING'.... (user input inválido)....











--------> NÓS TAMBÉM TEMOS AQUELE MIDDLEWARE 

de 

'isAuth.js',


QUE 



É 



O LOCAL EM QUE 

EU FAÇO 


'redirect'

QUANDO 






NÓS/O USER TENTA 'DO SOMETHING'

quando 

ele 

NÃO ESTÁ 'LOGGED IN' (non authenticated)...-----------> AGORA, DE NOVO,




TEMOS 1 REDIRECT, COMO VISTO NESTE CÓDIGO:







module.exports = (req, res, next) => {
  if (!req.session.isLoggedIn) {
    res.redirect('/login');
  } else {
    next();
  }
};




















---------> DE NOVO ,

COMOO ESTAMOS FAZENDO REDIRECTING,




___ NÓS ESTAMOS 



ENVIANDO UM CÓDIGO DE '300'.....







--> ESCREVER ISTO:



res.status(401).redirect('/login')' 



É 


__COMPLETAMENTE INÚTIL,
 PQ 

 ESSE 

 STATUS CODE VAI SER 'OVERWRITTEN'

 quando 

 OCORRER O REDIRECT.... (por isso não faz sentido escrever isso)... --> MAIS TARDE, DE NOVO, QUANDO 

 TIVERMOS UMA 


 'RESTFUL API',




 api que NOS LIVRA DO 'REDIRECT AROUND' (pq só vamos ter '1 única page', SEM REDIRECTS),




 AÍ VAMOS USAR ESSE 



STATUS DE '400'.... (not authenticated)....










-------------> JUSTAMENTE POR AGORA NÓS SEMPRE 




ESTARMOS 



'REDIRECTING'

ou 

'DIRECTLY RENDERING A PAGE',




NÓS __ NÃO ESTAMOS __ 



SETTANDO TANTOS 



STATUS CODES 

no nosso app.. -----> VEREMOS ELES SÓ MAIS TARDE, COM OS RESTFUL APIs... 













-------->  PODEMOS VER EXEMPLOS DE STATUS CODES 
DE 

404 
e 


500

LÁ 

EM 

'error.js',



NESSES 


CONTROLLERS:










exports.error404 = (req, res, next) => {
  // const isLoggedIn = req.get('Cookie').trim().split('=')[1];

  res.status(404).render('404', {
    pageTitle: 'Page not Found',
    path: '',

    // isLoggedIn: isLoggedIn
    isLoggedIn: req.session.isLoggedIn,
  });
};






exports.error500 = (req, res, next) => {

  res.status(500).render('500', {
    pageTitle: 'Something went wrong',
    path: '',
    isLoggedIn: req.session.isLoggedIn,
  });
};






----------------------------------------










----> CERTO... MAS O IMPORTANTE AQUI, NO CASO, É ENTENDER QUE __ 


ESSES 

STATUS 

CODES 


NÃO SIGNIFICAM QUE 



'NOSSO APP CRASHOU'... ------->  EM VEZ DISSO,



SE 

EU 


DIGITAR 



ALGUMA ROUTE/PATH INVÁLIDO,




por exemplo,





VOU RECEBER 





MINHA PÁGINA DE 




'PAGE NOT FOUND',






E AÍ 

SE ABRIRMOS




OS CHROME DEVTOOLS,




VAMOS VER QUE 




TEREMOS RECEBIDO
 






 a página '404' 



 COM UM CÓDIGO DE 

 STATUS de 
 '404', marcado em VERMELHO,







 ___ SINALIZANDO __ QUE HOUVE UM ERRO... -->  MAS MESMO EXISTINDO O RECEIVE DESSE ERROR,


 NOSSA PAGE NÃO VAI 'CRASHAR',



 e ainda SERÁ RENDERIZADA UMA PAGE VÁLIDA
 ,







 __ E O BONUS É QUE 



 NÓS PASSAMOS AQUELA INFO EXTRA DE 

 'hey, aqui está a page, mas vocÊ vê essa page especial pq 

 ALGO DEU ERRADO, por sua parte'....













 ---------> OK.... --------> E O CHROME SABE DISSO, TAMBÉM,


 PQ 
 ELE 

 SUBLINHA 

 DE VERMELHO 


 OS ERROS... ----> ISSO 






 VAI SER BEM VANTAJOSO NO FUTURO, COM AS RESTFUL APIs,




 PQ LÁ 

 NÓS VAMOS TER UMA 


 RELAÇÃO BEM MAIS 'DIRETA' 

 com nossos requests,




 PQ __ NÃO VAMOS 'RENDER NEW PAGES ALL THE TIME', 


 e é 

 justamente por isso que vamos 
 '

 GET 

 USEFUL INFORMATION OUT OF THOSE STATUS CODES'... ----------> OK, 




 ESSES 

 SÃO 

 OS 

 HTTP STATUS CODES 

 E 

 SUA 

 RELÇAÃO COM ERRORS... SEU KEY TAKEAWAY:








*** 1 STATUS CODE __ NÃO SIGNIFICA __ QUE O 'REQUEST FAILED',



OU QUE O 'APP CRASHOU'... - --------> os status code, no máximo, sinalizam que 

HOUVE UM PROBLEMA,

e que 

AGORA 

ESTAMOS 'RETURNING INFORMATION WITH THE PROBLEM, TO THE CLIENT'... (


    E ESSA É TAMBÉM OUTRA MANEIRA DE 'GRACEFULLY HANDLING ERRORS'...
)










ex:




file:///A:/NodeJS%20-%20The%20Complete%20Guide/[Tutsgalaxy.com]%20-%20NodeJS%20-%20The%20Complete%20Guide/19%20Error%20Handling/310%20Available%20Status%20Codes.html








-------------------------------------------

















1×× Informational

100 Continue

101 Switching Protocols

102 Processing

2×× Success

200 OK

201 Created

202 Accepted

203 Non-authoritative Information

204 No Content

205 Reset Content

206 Partial Content

207 Multi-Status

208 Already Reported

226 IM Used

3×× Redirection

300 Multiple Choices

301 Moved Permanently

302 Found

303 See Other

304 Not Modified

305 Use Proxy

307 Temporary Redirect

308 Permanent Redirect

4×× Client Error

400 Bad Request

401 Unauthorized

402 Payment Required

403 Forbidden

404 Not Found

405 Method Not Allowed

406 Not Acceptable

407 Proxy Authentication Required

408 Request Timeout

409 Conflict

410 Gone

411 Length Required

412 Precondition Failed

413 Payload Too Large

414 Request-URI Too Long

415 Unsupported Media Type

416 Requested Range Not Satisfiable

417 Expectation Failed

418 I'm a teapot

421 Misdirected Request

422 Unprocessable Entity

423 Locked

424 Failed Dependency

426 Upgrade Required

428 Precondition Required

429 Too Many Requests

431 Request Header Fields Too Large

444 Connection Closed Without Response

451 Unavailable For Legal Reasons

499 Client Closed Request

5×× Server Error

500 Internal Server Error

501 Not Implemented

502 Bad Gateway

503 Service Unavailable

504 Gateway Timeout

505 HTTP Version Not Supported

506 Variant Also Negotiates

507 Insufficient Storage

508 Loop Detected

510 Not Extended

511 Network Authentication Required

599 Network Connect Timeout Error

